{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nvar _dec, _class, _temp, _dec2, _class3;\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query fetchTradeHistory($start: String!, $end: String!, $symbol: String!) {\\n    checkApiKey\\n\\n    fetchTradeHistory(start: $start, end: $end, symbol: $symbol) {\\n      id\\n      timestamp\\n      side\\n      price\\n      orderQty\\n      leavesQty\\n      currentQty\\n      avgEntryPrice\\n      execGrossPnl\\n      realizedPnl\\n      commission\\n      execType\\n      orderType\\n      trdStart\\n      trdEnd\\n      notes\\n      hashtags\\n    }\\n\\n    fetchOneMinuteCandleHistory(start: $start, end: $end) {\\n      id\\n      timestamp\\n      symbol\\n      timeframe\\n      open\\n      high\\n      low\\n      close\\n      trades\\n      volume\\n      vwap\\n      lastSize\\n      homeNotional\\n      foreignNotional\\n    }\\n\\n    fetchOneHourCandleHistory(start: $start, end: $end) {\\n      id\\n      timestamp\\n      symbol\\n      timeframe\\n      open\\n      high\\n      low\\n      close\\n      trades\\n      volume\\n      vwap\\n      lastSize\\n      homeNotional\\n      foreignNotional\\n    }\\n\\n    fetchOneDayCandleHistory(start: $start, end: $end) {\\n      id\\n      timestamp\\n      symbol\\n      timeframe\\n      open\\n      high\\n      low\\n      close\\n      trades\\n      volume\\n      vwap\\n      lastSize\\n      homeNotional\\n      foreignNotional\\n    }\\n\\n    fetchFiveMinuteCandleHistory(start: $start, end: $end) {\\n      id\\n      timestamp\\n      symbol\\n      timeframe\\n      open\\n      high\\n      low\\n      close\\n      trades\\n      volume\\n      vwap\\n      lastSize\\n      homeNotional\\n      foreignNotional\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Query } from \"react-apollo\";\nimport ReChart from \"./Tades/Trades\";\nimport Sidebar from \"../Menu/Menu\";\nimport gql from \"graphql-tag\";\nimport styled from \"styled-components\";\nimport { inject, observer } from \"mobx-react\";\nimport { ContainDiv, NextToDiv, NextToDivHeader, RowContainer, ContainDivHeader } from \"./Tades/Trades\";\nimport { equal } from \"fast-deep-equal\";\nimport ApiKeyForm from \"./AddApiForm\";\nimport TotalDat from \"./Dashboard\";\nimport TotalDat768 from \"./768px/DashboardTest\";\nimport { when, reaction } from \"mobx\";\nimport { getStateDate, makeDateDays, makeDateHrs } from \"../Helpers/Functions\";\nvar FetchQuery = (_dec = inject([\"store\"]), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$Component) {\n  _inherits(FetchQuery, _React$Component);\n\n  var _super = _createSuper(FetchQuery);\n\n  function FetchQuery(props) {\n    var _this;\n\n    _classCallCheck(this, FetchQuery);\n\n    _this = _super.call(this, props);\n\n    _this.clicked = function () {\n      store.isAuth = !store.isAuth;\n      console.log(store.isAuth);\n    };\n\n    _this.state = {\n      startDate: \"\",\n      endDate: \"\",\n      date: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(FetchQuery, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"loaded fetch query component\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var fetchTradeHistoryVariables = {\n        start: this.props.store.startDate,\n        end: this.props.store.endDate,\n        symbol: this.props.store.symbol\n      };\n      return __jsx(\"div\", null, __jsx(Comp, {\n        query: fetchTradeHistoryQuery,\n        vars: fetchTradeHistoryVariables\n      }));\n    }\n  }]);\n\n  return FetchQuery;\n}(React.Component), _temp)) || _class) || _class);\nvar Comp = (_dec2 = inject([\"store\"]), _dec2(_class3 = observer(_class3 = /*#__PURE__*/function (_React$Component2) {\n  _inherits(Comp, _React$Component2);\n\n  var _super2 = _createSuper(Comp);\n\n  function Comp(props) {\n    var _this2;\n\n    _classCallCheck(this, Comp);\n\n    _this2 = _super2.call(this, props);\n    _this2.state = {\n      width: 0\n    };\n    _this2.updateWindowDimensions = _this2.updateWindowDimensions.bind(_assertThisInitialized(_this2));\n    return _this2;\n  }\n\n  _createClass(Comp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      this.tempTagsReaction = reaction(function () {\n        return _this3.props.store.hasTempTags;\n      }, function (notifications, reaction) {\n        _this3.forceUpdate(console.log(\"FORCE UPDATE WAS CALLED\"));\n      });\n      this.updateWindowDimensions();\n      window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.tempTagsReaction();\n      window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"updateWindowDimensions\",\n    value: function updateWindowDimensions() {\n      console.log(window.innerWidth);\n      this.setState({\n        width: window.innerWidth\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      console.log(\"rerendered\");\n      return __jsx(Query, {\n        query: this.props.query,\n        variables: this.props.vars\n      }, function (_ref) {\n        var loading = _ref.loading,\n            error = _ref.error,\n            data = _ref.data;\n        if (error) return __jsx(\"div\", null, \"no data loaded\");\n        if (loading) return __jsx(\"div\", null, \"Loading\");\n\n        if (data.checkApiKey == false) {\n          return __jsx(ApiKeyForm, null);\n        } else if (data.checkApiKey == true) {\n          _this4.props.store.resetHasTempTags();\n\n          _this4.props.store.clearTempNotes();\n\n          _this4.props.store.clearTempTags();\n\n          _this4.props.store.resetPnl();\n\n          _this4.props.store.hasSingleTrade = false;\n\n          if (_this4.state.width > 768) {\n            return __jsx(TotalDat, {\n              data: data\n            });\n          } else {\n            return __jsx(TotalDat768, {\n              data: data\n            });\n          }\n        }\n      });\n    }\n  }]);\n\n  return Comp;\n}(React.Component)) || _class3) || _class3);\nexport default FetchQuery;\nvar fetchTradeHistoryQuery = gql(_templateObject());","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/components/Dashboard/FetchQuery.js"],"names":["Query","ReChart","Sidebar","gql","styled","inject","observer","ContainDiv","NextToDiv","NextToDivHeader","RowContainer","ContainDivHeader","equal","ApiKeyForm","TotalDat","TotalDat768","when","reaction","getStateDate","makeDateDays","makeDateHrs","FetchQuery","props","clicked","store","isAuth","console","log","state","startDate","endDate","date","fetchTradeHistoryVariables","start","end","symbol","fetchTradeHistoryQuery","React","Component","Comp","width","updateWindowDimensions","bind","tempTagsReaction","hasTempTags","notifications","forceUpdate","window","addEventListener","removeEventListener","innerWidth","setState","query","vars","loading","error","data","checkApiKey","resetHasTempTags","clearTempNotes","clearTempTags","resetPnl","hasSingleTrade"],"mappings":"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","sourcesContent":["import { Query } from \"react-apollo\";\nimport ReChart from \"./Tades/Trades\";\nimport Sidebar from \"../Menu/Menu\";\nimport gql from \"graphql-tag\";\nimport styled from \"styled-components\";\nimport { inject, observer } from \"mobx-react\";\nimport {\n  ContainDiv,\n  NextToDiv,\n  NextToDivHeader,\n  RowContainer,\n  ContainDivHeader,\n} from \"./Tades/Trades\";\nimport { equal } from \"fast-deep-equal\";\nimport ApiKeyForm from \"./AddApiForm\";\nimport TotalDat from \"./Dashboard\";\nimport TotalDat768 from \"./768px/DashboardTest\";\nimport { when, reaction } from \"mobx\";\nimport { getStateDate, makeDateDays, makeDateHrs } from \"../Helpers/Functions\";\n\n@inject([\"store\"])\n@observer\nclass FetchQuery extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { startDate: \"\", endDate: \"\", date: \"\" };\n  }\n\n  componentDidMount() {\n    console.log(\"loaded fetch query component\");\n  }\n\n  clicked = () => {\n    store.isAuth = !store.isAuth;\n    console.log(store.isAuth);\n  };\n\n  render() {\n    let fetchTradeHistoryVariables = {\n      start: this.props.store.startDate,\n      end: this.props.store.endDate,\n      symbol: this.props.store.symbol,\n    };\n\n    return (\n      <div>\n        <Comp\n          query={fetchTradeHistoryQuery}\n          vars={fetchTradeHistoryVariables}\n        />\n      </div>\n    );\n  }\n}\n\n@inject([\"store\"])\n@observer\nclass Comp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { width: 0 };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.tempTagsReaction = reaction(\n      () => this.props.store.hasTempTags,\n      (notifications, reaction) => {\n        this.forceUpdate(console.log(\"FORCE UPDATE WAS CALLED\"));\n      }\n    );\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    this.tempTagsReaction();\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    console.log(window.innerWidth);\n    this.setState({\n      width: window.innerWidth,\n    });\n  }\n\n  render() {\n    console.log(\"rerendered\");\n    return (\n      <Query query={this.props.query} variables={this.props.vars}>\n        {({ loading, error, data }) => {\n          if (error) return <div>no data loaded</div>;\n          if (loading) return <div>Loading</div>;\n          if (data.checkApiKey == false) {\n            return <ApiKeyForm />;\n          } else if (data.checkApiKey == true) {\n            this.props.store.resetHasTempTags();\n            this.props.store.clearTempNotes();\n            this.props.store.clearTempTags();\n            this.props.store.resetPnl();\n            this.props.store.hasSingleTrade = false;\n\n            if (this.state.width > 768) {\n              return <TotalDat data={data} />;\n            } else {\n              return <TotalDat768 data={data} />;\n            }\n          }\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default FetchQuery;\n\nconst fetchTradeHistoryQuery = gql`\n  query fetchTradeHistory($start: String!, $end: String!, $symbol: String!) {\n    checkApiKey\n\n    fetchTradeHistory(start: $start, end: $end, symbol: $symbol) {\n      id\n      timestamp\n      side\n      price\n      orderQty\n      leavesQty\n      currentQty\n      avgEntryPrice\n      execGrossPnl\n      realizedPnl\n      commission\n      execType\n      orderType\n      trdStart\n      trdEnd\n      notes\n      hashtags\n    }\n\n    fetchOneMinuteCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchOneHourCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchOneDayCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchFiveMinuteCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}