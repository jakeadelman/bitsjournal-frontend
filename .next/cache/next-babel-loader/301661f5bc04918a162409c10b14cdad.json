{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport function calcTrades(_x) {\n  return _calcTrades.apply(this, arguments);\n}\n\nfunction _calcTrades() {\n  _calcTrades = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(inputData) {\n    var _ret, _ret3;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(inputData[0].side == \"Buy\" && inputData[0].execType == \"Trade\")) {\n              _context.next = 4;\n              break;\n            }\n\n            _ret = function () {\n              var avgBuyPrice = 0;\n              var avgSellPrice = 0;\n              var totBuyContracts = 0;\n              var totSellContracts = 0;\n              var buyNum = 0;\n              var sellNum = 0;\n              var totBuyContractsMult = 0;\n              var totSellContractsMult = 0;\n              var realQty = 0;\n              var totCommission = 0;\n\n              for (var i = 0; i < inputData.length; i++) {\n                // realQty = inputData[i].orderQty - inputData[i].leavesQty;\n                if (inputData[i].side == \"Buy\" && inputData[i].leavesQty == 0) {\n                  buyNum += 1;\n                  totBuyContracts += inputData[i].orderQty;\n                  totBuyContractsMult += inputData[i].orderQty * parseFloat(inputData[i].price);\n                }\n\n                if (inputData[i].side == \"Sell\" && inputData[i].leavesQty == 0) {\n                  sellNum += 1;\n                  totSellContracts += inputData[i].orderQty;\n                  totSellContractsMult += inputData[i].orderQty * parseFloat(inputData[i].price);\n                }\n\n                if (inputData[i].orderType == \"Limit\" && inputData[i].execType !== \"Funding\") {\n                  totCommission += realQty * 0.0025 / inputData[i].price;\n                }\n\n                if (inputData[i].orderType == \"Market\") {\n                  totCommission -= realQty * 0.0075 / inputData[i].price;\n                }\n\n                if (inputData[i].orderType.includes(\"Stop\")) {\n                  totCommission -= realQty * 0.0075 / inputData[i].price;\n                }\n\n                if (i == inputData.length - 1) {\n                  var _ret2 = function () {\n                    avgBuyPrice = totBuyContractsMult / totBuyContracts;\n                    avgSellPrice = totSellContractsMult / totSellContracts;\n                    var avgExit = void 0;\n                    var avgEntry = void 0;\n\n                    if (avgBuyPrice != null) {\n                      avgEntry = avgBuyPrice;\n                    } else {\n                      avgEntry = 0;\n                    }\n\n                    if (avgSellPrice != null) {\n                      avgExit = avgSellPrice;\n                    } else {\n                      avgExit = 0;\n                    } // this.state.cumQty = totBuyContracts;\n\n\n                    var thePnl = (1 / avgBuyPrice - 1 / avgSellPrice) * totSellContracts;\n\n                    if (thePnl != null) {\n                      var myPnl = thePnl + totCommission;\n                      return {\n                        v: {\n                          v: new Promise(function (resolve) {\n                            var end = {};\n                            end[\"pnl\"] = myPnl;\n                            end[\"avgEntryPrice\"] = avgEntry;\n                            end[\"avgExitPrice\"] = avgExit;\n                            end[\"cumQty\"] = totBuyContracts;\n                            resolve(end);\n                          })\n                        }\n                      }; //   store.addPnl(myPnl);\n                    } else {\n                      return {\n                        v: {\n                          v: new Promise(function (resolve) {\n                            var end = {};\n                            end[\"pnl\"] = 0;\n                            end[\"avgEntryPrice\"] = avgEntry;\n                            end[\"avgExitPrice\"] = avgExit;\n                            end[\"cumQty\"] = totBuyContracts;\n                            resolve(end);\n                          })\n                        }\n                      };\n                    }\n                  }();\n\n                  if (typeof _ret2 === \"object\") return _ret2.v;\n                }\n              }\n            }();\n\n            if (!(typeof _ret === \"object\")) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _ret.v);\n\n          case 4:\n            if (!(inputData[0].side == \"Sell\" && inputData[0].execType == \"Trade\")) {\n              _context.next = 8;\n              break;\n            }\n\n            _ret3 = function () {\n              var totBuyContracts = 0;\n              var totSellContracts = 0;\n              var buyNum = 0;\n              var sellNum = 0;\n              var totBuyContractsMult = 0;\n              var totSellContractsMult = 0;\n              var realQty = 0;\n              var totCommission = 0;\n\n              for (var i = 0; i < inputData.length; i++) {\n                // realQty = inputData[i].orderQty - inputData[i].leavesQty;\n                if (inputData[i].side == \"Buy\" && inputData[i].leavesQty == 0) {\n                  // totBuyPrice += parseFloat(inputData[i].price);\n                  buyNum += 1;\n                  totBuyContracts += inputData[i].orderQty;\n                  totBuyContractsMult += inputData[i].orderQty * parseFloat(inputData[i].price);\n\n                  if (inputData[0].orderQty == 40000) {\n                    console.log(\"BUY SIDE\", inputData[i], realQty, totSellContracts, totBuyContracts, totSellContractsMult);\n                  }\n                }\n\n                if (inputData[i].side == \"Sell\" && inputData[i].leavesQty == 0) {\n                  sellNum += 1;\n\n                  if (i == 0) {\n                    var difference = inputData[i].orderQty + inputData[i].currentQty;\n                    var newRealQty = inputData[i].orderQty - difference;\n                    totSellContracts += newRealQty;\n                    totSellContractsMult += newRealQty * parseFloat(inputData[i].price);\n                  } else {\n                    totSellContracts += inputData[i].orderQty;\n                    totSellContractsMult += inputData[i].orderQty * parseFloat(inputData[i].price);\n                  }\n\n                  if (inputData[0].orderQty == 40000) {\n                    console.log(\"SELL SIDE\", inputData[i], realQty, totSellContracts, totBuyContracts, totSellContractsMult);\n                  }\n                }\n\n                if (inputData[i].orderType == \"Limit\" && inputData[i].execType !== \"Funding\") {\n                  totCommission += realQty * 0.0025 / inputData[i].price;\n                }\n\n                if (inputData[i].orderType == \"Market\") {\n                  totCommission -= realQty * 0.0075 / inputData[i].price;\n                }\n\n                if (inputData[i].orderType.includes(\"Stop\")) {\n                  totCommission -= realQty * 0.0075 / inputData[i].price;\n                }\n\n                if (i == inputData.length - 1) {\n                  var _ret4 = function () {\n                    var avgBuyPrice = totBuyContractsMult / totBuyContracts;\n                    var avgSellPrice = totSellContractsMult / totSellContracts;\n                    var pnl = (1 / avgBuyPrice - 1 / avgSellPrice) * totBuyContracts;\n\n                    if (inputData[0].orderQty == 40000) {\n                      console.log(pnl, avgBuyPrice, avgSellPrice, totBuyContracts);\n                    }\n\n                    var avgEntry = void 0;\n                    var avgExit = void 0;\n\n                    if (avgBuyPrice != null) {\n                      avgExit = avgBuyPrice;\n                    } else {\n                      avgExit = 0;\n                    }\n\n                    if (avgSellPrice != null) {\n                      avgEntry = avgSellPrice;\n                    } else {\n                      avgEntry = 0;\n                    }\n\n                    if (pnl != null) {\n                      var myPnl = pnl + totCommission;\n                      return {\n                        v: {\n                          v: new Promise(function (resolve) {\n                            var end = {};\n                            end[\"pnl\"] = myPnl;\n                            end[\"avgEntryPrice\"] = avgEntry;\n                            end[\"avgExitPrice\"] = avgExit;\n                            end[\"cumQty\"] = totSellContracts;\n\n                            if (inputData[0].orderQty == 40000) {\n                              console.log(end);\n                            }\n\n                            resolve(end);\n                          })\n                        }\n                      };\n                    } else {\n                      return {\n                        v: {\n                          v: new Promise(function (resolve) {\n                            var end = {};\n                            end[\"pnl\"] = 0;\n                            end[\"avgEntryPrice\"] = avgEntry;\n                            end[\"avgExitPrice\"] = avgExit;\n                            end[\"cumQty\"] = totSellContracts;\n                            resolve(end);\n                          })\n                        }\n                      };\n                    }\n                  }();\n\n                  if (typeof _ret4 === \"object\") return _ret4.v;\n                }\n              }\n            }();\n\n            if (!(typeof _ret3 === \"object\")) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _ret3.v);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _calcTrades.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}