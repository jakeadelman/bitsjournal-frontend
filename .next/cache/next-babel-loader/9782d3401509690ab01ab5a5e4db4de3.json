{"ast":null,"code":"var _dec, _class, _dec2, _class2;\n\nvar __jsx = React.createElement;\nimport React, { PureComponent, Component } from \"react\";\nimport { LineChart, AreaChart, Area, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { wideFont, smallFont } from \"../../shared/helpers\";\nimport theme from \"../../theme\";\nimport { formatDateMonthOnly, calcCommission, formatDateShort, formatDateShortWithHour } from \"../../Helpers/Functions.js\";\nimport { inject, observer } from \"mobx-react\";\nimport MainChart from \"../Chart/index\";\nimport Notes from \"../Notes/Notes\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretDown, faCaretUp } from \"@fortawesome/free-solid-svg-icons\";\nimport equal from \"fast-deep-equal\";\nimport TextareaAutosize from \"react-autosize-textarea\";\nimport MyTextArea from \"../Notes/TextArea\";\nimport { when, reaction } from \"mobx\";\nimport { calcTrades } from \"./calcTrades\";\nimport { ApolloConsumer } from \"react-apollo\";\nlet Example = (_dec2 = inject([\"store\"]), _dec2(_class2 = observer(_class2 = class Example extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0,\n      height: 0,\n      data: [],\n      fullTrades: [],\n      hasSingleTrade: false\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.createFullTrades = this.createFullTrades.bind(this);\n  }\n\n  createFullTrades(data) {\n    let fullRay = [];\n    let fullTrades = [];\n\n    for (let i = 0; i < data.fetchTradeHistory.length; i++) {\n      fullRay.unshift(data.fetchTradeHistory[i]);\n\n      if (i == data.fetchTradeHistory.length - 1) {\n        for (let j = 0; j < fullRay.length; j++) {\n          let dat = fullRay[j]; // dat.timestamp = formatDateForRow(dat.timestamp);\n          // fullRay[j] = dat;\n\n          if (dat.trdStart == true) {\n            let sliced = fullRay.slice(j, fullRay.length);\n\n            for (let k = 0; k < sliced.length; k++) {\n              if (sliced[k].trdEnd == true && k > 0) {\n                let newsliced = sliced.slice(0, k + 1);\n                fullTrades.unshift(newsliced);\n                break;\n              }\n            }\n          }\n\n          if (j == fullRay.length - 1) {\n            let returnVal = {};\n            returnVal[\"initData\"] = this.props.initData;\n            returnVal[\"data\"] = fullRay;\n            returnVal[\"fullTrades\"] = fullTrades;\n            return returnVal;\n          }\n        }\n      }\n    }\n  }\n\n  filter() {}\n\n  componentDidUpdate(prevProps) {\n    if (!equal(this.props.filteredData, prevProps.filteredData)) {\n      // this.updateTrades(this.props.data);\n      let newFullTrades = [];\n      let firstFullTrades = this.createFullTrades(this.props.data);\n      firstFullTrades = firstFullTrades.fullTrades;\n\n      if (this.props.filteredData == null) {\n        this.setState({\n          fullTrades: firstFullTrades\n        });\n      } else {\n        for (let i = 0; i < firstFullTrades.length; i++) {\n          for (let j = 0; j < this.props.filteredData.length; j++) {\n            if (firstFullTrades[i][0].id == this.props.filteredData[j].id) {\n              newFullTrades.unshift(firstFullTrades[i]);\n            }\n          }\n\n          if (i == firstFullTrades.length - 1) {\n            this.setState({\n              fullTrades: newFullTrades\n            });\n          }\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    let returned = this.createFullTrades(this.props.data);\n\n    if (returned != undefined) {\n      this.setState({\n        data: returned.fullRay,\n        fullTrades: returned.fullTrades,\n        initData: returned.initData\n      });\n    } else {\n      this.setState({\n        data: this.props.initData,\n        initData: this.props.initData\n      });\n    }\n\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n    this.singleNotesReaction = reaction(() => this.props.store.isSingleNotes, (notifications, reaction) => {\n      if (this.props.store.isSingleNotes == false) {\n        this.setState({\n          isSingleNotes: false\n        });\n      } else {\n        this.setState({\n          isSingleNotes: true\n        });\n      }\n    });\n    this.singleTradeReaction = reaction(() => this.props.store.hasSingleTrade, (notifications, reaction) => {\n      this.props.store.pnl = 0;\n\n      if (this.props.store.hasSingleTrade == false) {\n        this.setState({\n          hasSingleTrade: false\n        });\n      } else {\n        this.setState({\n          hasSingleTrade: true\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    if (window.innerWidth < 768) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.9\n      });\n    } else if (window.innerWidth < 1024) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.9 - 179\n      });\n    } else if (window.innerWidth >= 1024) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.8 - 179\n      });\n    }\n  }\n\n  render() {\n    if (this.state.hasSingleTrade == false) {\n      return __jsx(ThemeProvider, {\n        theme: theme(false)\n      }, __jsx(\"div\", {\n        style: {\n          minWidth: this.state.chartWidth\n        }\n      }, this.state.fullTrades.map((slic, i) => {\n        return __jsx(MakeCol, {\n          clicked: false,\n          slic: slic,\n          onemin: this.props.data.fetchOneMinuteCandleHistory,\n          fivemin: this.props.data.fetchFiveMinuteCandleHistory,\n          onehour: this.props.data.fetchOneHourCandleHistory,\n          oneday: this.props.data.fetchOneDayCandleHistory,\n          key: i\n        });\n      })));\n    } else {\n      return __jsx(ThemeProvider, {\n        theme: theme(false)\n      }, __jsx(\"div\", {\n        style: {\n          minWidth: this.state.chartWidth\n        }\n      }, __jsx(MakeCol, {\n        clicked: true,\n        slic: this.props.store.singleTrade,\n        onemin: this.props.data.fetchOneMinuteCandleHistory,\n        fivemin: this.props.data.fetchFiveMinuteCandleHistory,\n        onehour: this.props.data.fetchOneHourCandleHistory,\n        oneday: this.props.data.fetchOneDayCandleHistory\n      })));\n    }\n  }\n\n}) || _class2) || _class2);\nexport { Example as default };\nlet MakeCol = (_dec = inject(\"store\"), _dec(_class = observer(_class = class MakeCol extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      pnl: 0,\n      avgEntryPrice: 0,\n      avgExitPrice: 0,\n      clicked: false,\n      cumQty: 0,\n      readMoreClicked: false\n    };\n    this.readMoreClicked = this.readMoreClicked.bind(this);\n    this.clicked = this.clicked.bind(this);\n    this.getSlicData = this.getSlicData.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  updateWindowDimensions() {\n    this.setState({\n      width: window.innerWidth\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n    this.setState({\n      clicked: this.props.clicked\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!equal(this.props.slic, prevProps.slic)) {\n      this.getSlicData();\n    }\n  }\n\n  componentWillMount() {\n    this.getSlicData();\n    this.updateWindowDimensions();\n  }\n\n  async getSlicData() {\n    this.state.data = this.props.slic;\n    let calced = await calcTrades(this.props.slic);\n\n    if (calced !== undefined) {\n      this.setState({\n        pnl: calced[\"pnl\"],\n        avgEntryPrice: calced[\"avgEntryPrice\"],\n        avgExitPrice: calced[\"avgExitPrice\"],\n        cumQty: calced[\"cumQty\"]\n      });\n\n      if (this.props.clicked == true) {\n        this.props.store.pnl = calced[\"pnl\"];\n      } else {\n        this.props.store.addPnl(calced[\"pnl\"]);\n      }\n    }\n  }\n\n  clicked(dat) {\n    if (this.state.clicked == false) {\n      this.props.store.setSingleTrade(dat);\n      this.props.store.hasSingleTrade = true;\n      this.setState({\n        clicked: true\n      });\n    } else {\n      this.props.store.hasSingleTrade = false;\n      this.setState({\n        clicked: false\n      });\n    }\n  }\n\n  readMoreClicked() {\n    if (this.state.readMoreClicked == false) {\n      this.setState({\n        readMoreClicked: true\n      });\n    } else {\n      this.setState({\n        readMoreClicked: false\n      });\n    }\n  }\n\n  render() {\n    if (this.state.clicked == false) {\n      return __jsx(ContainDiv, {\n        onClick: () => this.clicked(this.state.data)\n      }, __jsx(NextToDiv, null, formatDateMonthOnly(this.state.data[0].timestamp)), __jsx(NextToDiv, null, formatDateMonthOnly(this.state.data[this.state.data.length - 1].timestamp)), __jsx(IsShort, {\n        side: this.state.data[0].side,\n        last: this.state.data[this.state.data.length - 1].orderType\n      }), __jsx(NextToDiv, null, \"$\", this.state.avgEntryPrice.toFixed(1)), __jsx(NextToDiv, null, \"$\", this.state.avgExitPrice.toFixed(1)), __jsx(NextToDiv, null, this.state.cumQty), __jsx(NextToDiv, null, this.state.pnl.toFixed(4) + \"xbt\"));\n    } else {\n      if (this.props.store.isSingleNotes == false) {\n        return __jsx(TotalDetails, null, __jsx(MoreBoxTall, null, __jsx(ContainDivClicked, {\n          onClick: () => this.clicked(this.state.data)\n        }, __jsx(NextToDiv, null, formatDateMonthOnly(this.state.data[0].timestamp)), __jsx(NextToDiv, null, formatDateMonthOnly(this.state.data[this.state.data.length - 1].timestamp)), __jsx(IsShort, {\n          side: this.state.data[0].side,\n          last: this.state.data[this.state.data.length - 1].orderType\n        }), __jsx(NextToDiv, null, \"$\", this.state.avgEntryPrice.toFixed(1)), __jsx(NextToDiv, null, \"$\", this.state.avgExitPrice.toFixed(1)), __jsx(NextToDiv, null, this.state.cumQty), __jsx(NextToDiv, null, this.state.pnl.toFixed(4) + \"xbt\"))), __jsx(MainChart, {\n          onemin: this.props.onemin,\n          fivemin: this.props.fivemin,\n          onehour: this.props.onehour,\n          oneday: this.props.oneday,\n          trades: this.state.data\n        }), __jsx(ApolloConsumer, null, client => __jsx(MyTextArea, {\n          firstTrade: this.state.data[0],\n          client: client\n        })));\n      } else {\n        return __jsx(TotalDetails, null, __jsx(MoreBoxTall, null, __jsx(OrderExecution, {\n          data: this.state.data\n        })));\n      }\n    }\n  }\n\n}) || _class) || _class);\n\nclass IsShort extends Component {\n  componentDidMount() {\n    console.log(this.props.last);\n  }\n\n  render() {\n    if (this.props.side == \"Sell\") {\n      if (this.props.last.includes(\"Stop\")) {\n        return __jsx(NextToDiv, null, \"Short\");\n      } else {\n        return __jsx(NextToDiv, null, \"Short\");\n      }\n    } else {\n      if (this.props.last.includes(\"Stop\")) {\n        return __jsx(NextToDiv, null, \"Long\");\n      } else {\n        return __jsx(NextToDiv, null, \"Long\");\n      }\n    }\n  }\n\n}\n\nconst OrderExecution = ({\n  data\n}) => {\n  return __jsx(ExecContainer, null, __jsx(ContainDivBlack, null, __jsx(NextToDivBlackTitle, null, __jsx(TitleSpan, null, \"Timestamp\")), __jsx(NextToDivBlackTitle, null, __jsx(TitleSpan, null, \"Side\")), __jsx(NextToDivBlackTitle, null, __jsx(TitleSpan, null, \"Order Type\")), __jsx(NextToDivBlackTitle, null, __jsx(TitleSpan, null, \"Price\")), __jsx(NextToDivBlackTitle, null, __jsx(TitleSpan, null, \"Order Qty\")), __jsx(NextToDivBlackTitle, null, __jsx(TitleSpan, null, \"Leaves Qty\")), __jsx(NextToDivBlackTitle, null, __jsx(TitleSpan, null, \"Commission\"))), data.map(dat => {\n    return __jsx(ContainDivBlack, null, __jsx(NextToDivBlack, null, formatDateMonthOnly(dat.timestamp)), dat.execType == \"Trade\" ? __jsx(NextToDivBlack, null, dat.side) : __jsx(NextToDivBlack, null, dat.execType), __jsx(NextToDivBlack, null, dat.orderType), __jsx(NextToDivBlack, null, \"$\", dat.price.toString()), __jsx(NextToDivBlack, null, dat.orderQty), __jsx(NextToDivBlack, null, dat.leavesQty == \"0\" ? \"\" : dat.leavesQty), __jsx(NextToDivBlack, null, dat.execType == \"Funding\" ? \"\" : calcCommission(dat.price, dat.side, dat.orderQty, dat.leavesQty, dat.orderType)));\n  }));\n};\n\nexport const ContainDiv = styled.div.withConfig({\n  displayName: \"Trades__ContainDiv\",\n  componentId: \"bmyhv8-0\"\n})([\"width:100%;display:flex;flex-direction:row;height:47px;border-bottom:1px solid #f2f2f2;font-weight:400;&:hover{transition:none;background:#f8f8ff;cursor:pointer;}\"]);\nexport const ContainDivClicked = styled.div.withConfig({\n  displayName: \"Trades__ContainDivClicked\",\n  componentId: \"bmyhv8-1\"\n})([\"width:100%;display:flex;flex-direction:row;height:47px;transition:none;font-weight:400;border-bottom:1px solid #f2f2f2;border-radius:none;cursor:pointer;background:#f8f8ff;background:#ffffff;\"]);\nexport const ContainDivBlack = styled.div.withConfig({\n  displayName: \"Trades__ContainDivBlack\",\n  componentId: \"bmyhv8-2\"\n})([\"width:100%;display:flex;flex-direction:row;height:40px;background:#f8f8ff;border-bottom:1px solid #f2f2f2;\"]);\nexport const ContainDivHeader = styled.div.withConfig({\n  displayName: \"Trades__ContainDivHeader\",\n  componentId: \"bmyhv8-3\"\n})([\"width:100%;display:flex;flex-direction:row;height:38px;border-bottom:1px solid #d3d3d3;\"]); // f2f2f2\n// border-right: 1px solid #f2f2f2;\n\nexport const NextToDiv = styled.div.withConfig({\n  displayName: \"Trades__NextToDiv\",\n  componentId: \"bmyhv8-4\"\n})([\"display:inline-block;width:30%;padding:8px;padding-top:12px;padding-left:12px;color:#000;font-weight:300;font-size:14px;@media (max-width:550px){font-size:13px;}\"]);\nexport const NextToDivBlack = styled.div.withConfig({\n  displayName: \"Trades__NextToDivBlack\",\n  componentId: \"bmyhv8-5\"\n})([\"display:inline-block;width:30%;padding:4px;padding-left:12px;font-size:14px;padding-top:9px;\"]); // border-right: 1px solid #f2f2f2;\n\nexport const NextToDivBlackTitle = styled.div.withConfig({\n  displayName: \"Trades__NextToDivBlackTitle\",\n  componentId: \"bmyhv8-6\"\n})([\"display:inline-block;width:30%;padding:4px;padding-left:14px;padding-top:9px;font-size:14px;\"]);\nconst TitleSpan = styled.span.withConfig({\n  displayName: \"Trades__TitleSpan\",\n  componentId: \"bmyhv8-7\"\n})([\"display:inline-block;border-bottom:1px dotted black;padding-bottom:0px;font-size:13px;font-weight:300;color:black;\"]);\nexport const NextToDivBlackTime = styled.div.withConfig({\n  displayName: \"Trades__NextToDivBlackTime\",\n  componentId: \"bmyhv8-8\"\n})([\"display:inline-block;width:30%;padding:4px;padding-left:12px;font-size:14px;padding-top:10px;@media (max-width:1200px){font-size:13px;}@media (max-width:663px){padding-top:0px !important;}\"]);\nexport const NextToDivHeader = styled.div.withConfig({\n  displayName: \"Trades__NextToDivHeader\",\n  componentId: \"bmyhv8-9\"\n})([\"display:inline-block;width:30%;color:#78838e;font-weight:600;display:inline-block;text-transform:uppercase;padding:10px;padding-left:12px;\", \" font-size:13px;\"], smallFont);\nconst InnerPnlWin = styled.div.withConfig({\n  displayName: \"Trades__InnerPnlWin\",\n  componentId: \"bmyhv8-10\"\n})([\"background:black;margin-right:auto;padding:0 3px;max-width:80px;color:white;font-weight:600;\"]);\nconst InnerPnlLoss = styled.div.withConfig({\n  displayName: \"Trades__InnerPnlLoss\",\n  componentId: \"bmyhv8-11\"\n})([\"background:red;margin-right:auto;padding:0 3px;border-radius:2px;max-width:80px;color:white;font-weight:600;\"]);\nconst ReadMore = styled.div.withConfig({\n  displayName: \"Trades__ReadMore\",\n  componentId: \"bmyhv8-12\"\n})([\"position:absolute;bottom:0;left:0;width:100%;text-align:center;margin:0;padding:10px 0;background-image:-webkit-gradient( linear,left top,left bottom,color-stop(0,rgba(255,0,0,0)),color-stop(1,rgba(248,248,255,1)) );\"]);\nconst ReadMoreTall = styled.div.withConfig({\n  displayName: \"Trades__ReadMoreTall\",\n  componentId: \"bmyhv8-13\"\n})([\"position:absolute;bottom:0;left:0;width:100%;text-align:center;margin:0;padding:10px 0;\"]); // background-image: linear-gradient(to bottom, transparent, black);\n\nconst MoreBoxShort = styled.div.withConfig({\n  displayName: \"Trades__MoreBoxShort\",\n  componentId: \"bmyhv8-14\"\n})([\"max-height:300px;position:relative;overflow:hidden;\"]);\nconst MoreBoxTall = styled.div.withConfig({\n  displayName: \"Trades__MoreBoxTall\",\n  componentId: \"bmyhv8-15\"\n})([\"max-height:none;position:relative;overflow:hidden;\"]);\nconst ExecContainer = styled.div.withConfig({\n  displayName: \"Trades__ExecContainer\",\n  componentId: \"bmyhv8-16\"\n})([\"max-height:none;position:relative;overflow:hidden;border:1px solid #f2f2f2;\"]);\nconst TotalDetails = styled.div.withConfig({\n  displayName: \"Trades__TotalDetails\",\n  componentId: \"bmyhv8-17\"\n})([\"\"]); // border: 1px solid rgba(33, 37, 40, 0.7);\n\nconst ReadMoreInner = styled.div.withConfig({\n  displayName: \"Trades__ReadMoreInner\",\n  componentId: \"bmyhv8-18\"\n})([\"color:rgba(33,37,40,1);padding:0;margin:auto;width:30px;border-radius:2px;-webkit-transition-property:none;-moz-transition-property:none;-o-transition-property:none;transition-property:none;:hover{cursor:pointer;background-color:rgba(33,37,40,1);color:#fff;-webkit-transition-property:none;-moz-transition-property:none;-o-transition-property:none;transition-property:none;}font-size:20px;\"]);","map":null,"metadata":{},"sourceType":"module"}