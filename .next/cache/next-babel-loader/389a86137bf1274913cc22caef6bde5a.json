{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n              mutation addNotes($time: String!, $notes: String!) {\\n                addNotes(time: $time, notes: $notes)\\n              }\\n            \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { getNotes, getHashtags } from \"./notesHelpers\";\nimport React, { useState, useEffect } from \"react\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport { observer } from \"mobx-react-lite\";\nimport { inject } from \"mobx-react\";\nimport TextareaAutosize from \"react-autosize-textarea\";\nimport gql from \"graphql-tag\";\nvar MyTextArea = inject(\"store\")(observer(function (_ref) {\n  var firstTrade = _ref.firstTrade,\n      store = _ref.store,\n      client = _ref.client;\n\n  var _useState = useState(),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState(false),\n      light = _useState2[0],\n      setLight = _useState2[1];\n\n  var _useState3 = useState(client),\n      myClient = _useState3[0],\n      setClient = _useState3[1];\n\n  useEffect(function () {\n    var val;\n\n    if (firstTrade.notes == \"undefined\") {\n      setValue(\"Add notes here...\");\n      setLight(true);\n    } else {\n      setValue(firstTrade.notes);\n    }\n\n    var notTemp = true;\n\n    if (store.tempNotes[0] !== undefined) {\n      for (var i = 0; i < store.tempNotes.length; i++) {\n        if (store.tempNotes[i].time == firstTrade.timestamp.toString()) {\n          setValue(store.tempNotes[i].note);\n        }\n      }\n    }\n  });\n  useEffect(function () {\n    if (value != \"Add notes here...\") {\n      setLight(false);\n      getNotes(value).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(res) {\n          var notes, time, reso;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  notes = res[0];\n                  time = firstTrade.timestamp;\n                  reso = myClient.mutate({\n                    mutation: gql(_templateObject()),\n                    variables: {\n                      time: time,\n                      notes: notes\n                    }\n                  });\n                  _context.next = 5;\n                  return reso;\n\n                case 5:\n                  return _context.abrupt(\"return\", _context.sent);\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }, [value]);\n\n  function handleChange() {\n    return function (event) {\n      setLight(false);\n      store.addTempNote(firstTrade.timestamp, event.target.value);\n      setValue(event.target.value);\n    };\n  }\n\n  if (light == false) {\n    return __jsx(TextareaAutosize, {\n      style: {\n        width: \"100%\",\n        padding: \"12px 20px\",\n        marginTop: \"8px\",\n        boxSizing: \"border-box\",\n        background: \"#f8f8ff\",\n        border: \"none\",\n        outline: \"none\",\n        fontSize: \"15px\"\n      },\n      rows: 5,\n      maxRows: 25,\n      value: value,\n      onChange: handleChange()\n    });\n  } else {\n    return __jsx(TextareaAutosize, {\n      style: {\n        width: \"100%\",\n        padding: \"12px 20px\",\n        marginTop: \"8px\",\n        boxSizing: \"border-box\",\n        background: \"#f8f8ff\",\n        border: \"none\",\n        outline: \"none\",\n        fontSize: \"15px\",\n        color: \"#c6c6c6\"\n      },\n      rows: 5,\n      maxRows: 25,\n      value: value,\n      onChange: handleChange()\n    });\n  }\n}));\nexport default MyTextArea;","map":null,"metadata":{},"sourceType":"module"}