{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n          mutation addApiKey($key: String!, $secret: String!) {\\n            addApiKey(key: $key, secret: $secret)\\n          }\\n        \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n          mutation {\\n            populate\\n          }\\n        \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        mutation addApiKey($key: String!, $secret: String!) {\\n          addApiKey(key: $key, secret: $secret)\\n        }\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport { Alert } from \"reactstrap\";\nimport styled from \"styled-components\";\nimport FormWrapper from \"../form/FormWrapper\";\nimport Input from \"../form/Input\";\nimport Label from \"../form/Label\";\nimport Button from \"../shared/Button\";\n\nvar Cookie = require(\"js-cookie\");\n\nvar ApiKeyForm = function ApiKeyForm() {\n  var _useState = useState(false),\n      res = _useState[0],\n      setRes = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(true),\n      notSubmitted = _useState3[0],\n      setNotSubmitted = _useState3[1];\n\n  function handleSubmit(_x, _x2) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event, client) {\n      var form, formData, key, secret, apiRes;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              setNotSubmitted(false);\n              form = event.target;\n              formData = new window.FormData(form);\n              key = formData.get(\"key\");\n              secret = formData.get(\"secret\"); // console.log(email, password);\n\n              form.reset(); //check if api key is valid\n\n              apiRes = client.mutate({\n                mutation: gql(_templateObject()),\n                variables: {\n                  key: key,\n                  secret: secret\n                }\n              });\n              apiRes.then(function (apiRes) {\n                console.log(\"<<RES>>\");\n                console.log(apiRes.data.addApiKey);\n                console.log(typeof apiRes.data.addApiKey);\n                var isTrue = apiRes.data.addApiKey == true;\n                console.log(isTrue);\n                setRes(isTrue);\n                setLoading(false);\n              })[\"catch\"](function (apiRes) {\n                var isTrue = apiRes.data.addApiKey == true;\n                console.log(isTrue);\n                setRes(isTrue);\n                setLoading(false);\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  if (notSubmitted == true) {\n    return __jsx(ApolloConsumer, null, function (client) {\n      return __jsx(\"div\", null, __jsx(\"div\", null, __jsx(Alert, {\n        color: \"info\"\n      }, \"Add a Bitmex api key to import your recent trades and to automatically populate your future trades into the platform.\"), __jsx(Alert, {\n        color: \"info\"\n      }, \"Note: We keep the keys encrypted in out database, however, make sure to leave \\\"withdrawals allowed\\\" UNCHECKED anyways when choosing key settings.\")), __jsx(FormWrapper, null, __jsx(StyledForm, {\n        onSubmit: function onSubmit(event) {\n          return handleSubmit(event, client);\n        }\n      }, __jsx(InputWrapper, null, __jsx(Label, null, \"key\"), __jsx(Input, {\n        placeholder: \"\",\n        name: \"key\",\n        type: \"text\",\n        required: true\n      })), __jsx(InputWrapper, null, __jsx(Label, null, \"secret\"), __jsx(Input, {\n        placeholder: \"\",\n        name: \"secret\",\n        type: \"text\",\n        required: true\n      })), __jsx(\"div\", {\n        style: {\n          display: \"flex\",\n          width: \"100%\"\n        }\n      }, __jsx(SubmitButton, {\n        type: \"submit\"\n      }, \"Submit\")))));\n    });\n  }\n\n  if (loading == true) {\n    return __jsx(\"div\", null, \"loading\");\n  } else {\n    if (res == false) {\n      return __jsx(\"div\", null, \"error submitting, please reload page and try again\");\n    }\n\n    if (res == true) {\n      return __jsx(ApolloConsumer, null, function (client) {\n        return __jsx(Populate, {\n          client: client\n        });\n      });\n    }\n  }\n};\n\nvar Populate = function Populate(_ref) {\n  var client = _ref.client;\n\n  var _useState4 = useState(false),\n      res = _useState4[0],\n      setRes = _useState4[1];\n\n  var _useState5 = useState(true),\n      loading = _useState5[0],\n      setLoading = _useState5[1];\n\n  useEffect(function () {\n    if (loading == true) {\n      console.log(\"IN POPULATE\");\n      var myClient = client;\n      var apiRes = myClient.mutate({\n        mutation: gql(_templateObject2())\n      });\n      apiRes.then(function (reso) {\n        console.log(\"<<API RES>>\");\n        console.log(reso);\n        console.log(reso.data.populate);\n        setRes(reso.data.populate);\n        setLoading(false);\n      });\n    }\n  }, []);\n\n  var resetApi = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(client) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log(\"RESETTING\");\n              return _context3.abrupt(\"return\", new Promise( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve) {\n                  var key, secret, myRes;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          key = \"none\";\n                          secret = \"none\";\n                          myRes = client.mutate({\n                            mutation: gql(_templateObject3()),\n                            variables: {\n                              key: key,\n                              secret: secret\n                            }\n                          });\n                          _context2.next = 5;\n                          return myRes;\n\n                        case 5:\n                          return _context2.abrupt(\"return\", _context2.sent);\n\n                        case 6:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x4) {\n                  return _ref3.apply(this, arguments);\n                };\n              }()));\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function resetApi(_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  if (loading == true) {\n    return __jsx(\"div\", null, \"loading\");\n  } else {\n    if (res == false) {\n      resetApi(client);\n      return __jsx(\"div\", null, \"api key not valid - reload and try again\");\n    } else {\n      location.reload();\n    }\n  }\n};\n\nexport default ApiKeyForm;\nvar StyledForm = styled.form.withConfig({\n  displayName: \"AddApiForm__StyledForm\",\n  componentId: \"z7z7vm-0\"\n})([\"display:flex;flex-direction:column;align-items:flex-start;\", \";\"], function (props) {\n  return props.loading && \"filter: grayscale(0.5) blur(5px) opacity(0.6); pointer-events: none\";\n});\nvar SubmitButton = styled(Button).withConfig({\n  displayName: \"AddApiForm__SubmitButton\",\n  componentId: \"z7z7vm-1\"\n})([\"align-self:flex-end;margin-right:0px;margin-left:auto;\"]);\nvar InputWrapper = styled.div.withConfig({\n  displayName: \"AddApiForm__InputWrapper\",\n  componentId: \"z7z7vm-2\"\n})([\"position:relative;margin-bottom:24px;width:100%;\"]);","map":null,"metadata":{},"sourceType":"module"}