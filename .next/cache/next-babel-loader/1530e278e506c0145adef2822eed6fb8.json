{"ast":null,"code":"var _dec, _class2, _dec2, _class3;\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport { getNotes, getHashtags } from \"./notesHelpers\";\nimport gql from \"graphql-tag\";\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes, faEquals } from \"@fortawesome/free-solid-svg-icons\";\nimport { inject, observer } from \"mobx-react\";\nimport { when } from \"mobx\";\nimport equal from \"fast-deep-equal\";\nimport TextareaAutosize from \"react-autosize-textarea\";\nimport { wideFont, smallFont } from \"../../shared/helpers\";\n\nlet _class = (_dec2 = inject([\"store\"]), _dec2(_class3 = observer(_class3 = class extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      hashtags: [],\n      initHashtags: [],\n      showNotes: false\n    };\n    this.setShowNotes = this.setShowNotes.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.store.tempNotes[0] != undefined) {\n      let isTemp = false;\n\n      for (let i = 0; i < this.props.store.tempNotes.length; i++) {\n        if (this.props.store.tempNotes[i].time == this.props.firstTrade.timestamp) {\n          this.setState({\n            value: this.props.store.tempNotes[i].note\n          });\n          isTemp = true;\n        }\n\n        if (i == this.props.store.tempNotes.length - 1 && isTemp == false) {\n          this.setState({\n            value: this.props.firstTrade.notes\n          });\n        }\n      }\n    } else {\n      if (this.props.firstTrade.notes != \"undefined\") {\n        this.setState({\n          value: this.props.firstTrade.notes\n        });\n      }\n    }\n\n    let splitTags = this.props.firstTrade.hashtags.split(\",\");\n    splitTags.map(tag => {\n      this.state.initHashtags.push(tag);\n    });\n  }\n\n  handleChange(client) {\n    return event => {\n      // event.preventDefault();\n      this.setState({\n        value: event.target.value\n      }, this.handleSubmit(client));\n      this.props.store.addTempNote(this.props.firstTrade.timestamp, event.target.value);\n    };\n  }\n\n  removeHashtag(client, hashtag) {\n    return async event => {\n      if (event != undefined && event.preventDefault != undefined) {\n        event.preventDefault();\n      }\n\n      let time = this.props.firstTrade.timestamp;\n      client.mutate({\n        mutation: gql`\n            mutation removeHashtag($time: String!, $hashtag: String!) {\n              removeHashtag(time: $time, hashtag: $hashtag)\n            }\n          `,\n        variables: {\n          time,\n          hashtag\n        },\n        refetchQueries: [`fetchTradeHistory`]\n      }).then(() => {\n        this.props.store.changeHasTempTags();\n      });\n    };\n  }\n\n  handleSubmit(client) {\n    return event => {\n      if (event != undefined && event.preventDefault != undefined) {\n        event.preventDefault();\n      }\n\n      console.log(\"HASHTAGS\", this.state.hashtags);\n      getNotes(this.state.value).then(async res => {\n        let notes = res[0];\n        let time = this.props.firstTrade.timestamp;\n        let reso = client.mutate({\n          mutation: gql`\n            mutation addNotes($time: String!, $notes: String!) {\n              addNotes(time: $time, notes: $notes)\n            }\n          `,\n          variables: {\n            time,\n            notes\n          }\n        });\n        return await reso;\n      });\n    };\n  }\n\n  setShowNotes() {\n    if (this.state.showNotes == false) {\n      this.setState({\n        showNotes: true\n      });\n    } else {\n      this.setState({\n        showNotes: false\n      });\n    }\n  }\n\n  render() {\n    return __jsx(ApolloConsumer, null, client => __jsx(\"div\", null, __jsx(FullRow, {\n      onSubmit: this.handleSubmit(client)\n    }, this.state.initHashtags.map(tag => {\n      if (tag != \"undefined\") {\n        return __jsx(SingleHashtagDiv, null, __jsx(SingleHashtagText, null, \"#\", tag), __jsx(SingleHashtagDelete, {\n          onClick: this.removeHashtag(client, tag)\n        }, __jsx(FontAwesomeIcon, {\n          icon: faTimes,\n          size: \"xs\",\n          style: {\n            transition: \"none\"\n          }\n        })));\n      }\n    }), __jsx(HashtagDiv, null, __jsx(AddHashtag, {\n      firstTrade: this.props.firstTrade,\n      client: client\n    })))));\n  }\n\n}) || _class3) || _class3);\n\nexport { _class as default }; // const NotesInput = styled.textarea`\n//   width: 100%;\n//   padding: 12px 20px;\n//   margin: 8px 0;\n//   box-sizing: border-box;\n//   background: #f8f8ff;\n//   border: none;\n// `;\n\nlet AddHashtag = (_dec = inject([\"store\"]), _dec(_class2 = observer(_class2 = class AddHashtag extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clicked: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.clicked = this.clicked.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      client: this.props.client\n    });\n  }\n\n  handleChange(event) {\n    // event.preventDefault();\n    console.log(event.target.value);\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  async handleSubmit(event) {\n    // return event => {\n    event.preventDefault();\n    console.log(this.state.value);\n    getHashtags(this.state.value).then(async res => {\n      console.log(\"CLICKED\");\n      let client = this.state.client;\n      let hashtag = res;\n      console.log(hashtag, \"HASHTAG\");\n      let time = this.props.firstTrade.timestamp;\n      let reso = client.mutate({\n        mutation: gql`\n            mutation addHashtag($time: String!, $hashtag: String!) {\n              addHashtag(time: $time, hashtag: $hashtag)\n            }\n          `,\n        variables: {\n          time,\n          hashtag\n        },\n        refetchQueries: [`fetchTradeHistory`]\n      });\n      return await reso;\n    }).then(reso => {\n      this.setState({\n        value: \"\"\n      });\n      this.props.store.changeHasTempTags();\n    }); // };\n  }\n\n  clicked() {\n    this.state.clicked ? this.setState({\n      clicked: false\n    }) : this.setState({\n      clicked: true\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Popup, {\n      onClick: this.clicked,\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\"\n      }\n    }, __jsx(\"div\", null, \"Add Hashtag\"), __jsx(FontAwesomeIcon, {\n      icon: faPlus,\n      style: {\n        transition: \"none\",\n        margin: \"auto 4px\"\n      }\n    })), this.state.clicked ? __jsx(PopupTop, null, __jsx(\"form\", {\n      onSubmit: this.handleSubmit\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      onChange: this.handleChange\n    }), __jsx(AddHashSubmit, {\n      type: \"submit\",\n      value: \"Add\"\n    }))) : null);\n  }\n\n}) || _class2) || _class2);\nconst AddHashSubmit = styled.input.withConfig({\n  displayName: \"NotesTest__AddHashSubmit\",\n  componentId: \"sc-6j67dn-0\"\n})([\"background:none;border:none;color:white;font-weight:500;padding:2px;\"]);\nconst Popup = styled.div.withConfig({\n  displayName: \"NotesTest__Popup\",\n  componentId: \"sc-6j67dn-1\"\n})([\"position:relative;display:inline-block;cursor:pointer;background:#000;padding:8px;border-radius:2px;\"]);\nconst PopupTop = styled.div.withConfig({\n  displayName: \"NotesTest__PopupTop\",\n  componentId: \"sc-6j67dn-2\"\n})([\"position:absolute;background:#000;z-index:1;margin:5px;padding:2px;border-radius:2px;\"]); // background: #6c757d;\n// background: #b9bdc1;\n\nconst SingleHashtagDiv = styled.div.withConfig({\n  displayName: \"NotesTest__SingleHashtagDiv\",\n  componentId: \"sc-6j67dn-3\"\n})([\"background:#f8f8ff;margin:0 8px;color:black;padding:5px 7px;white-space:nowrap;display:flex;flex-direction:row;margin-left:0px;border-radius:2px;\"]);\nconst ShowNotesDiv = styled.div.withConfig({\n  displayName: \"NotesTest__ShowNotesDiv\",\n  componentId: \"sc-6j67dn-4\"\n})([\"background:#fff;margin:20px 8px;color:#000;padding:10px;padding-top:8px;white-space:nowrap;display:flex;flex-direction:row;margin-left:0px;border-radius:2px;background:#f8f8ff;:hover{transition:none;cursor:pointer;}\"]);\nconst ShowNotesInner = styled.div.withConfig({\n  displayName: \"NotesTest__ShowNotesInner\",\n  componentId: \"sc-6j67dn-5\"\n})([\"\", \" font-size:13px;transition:none;margin:auto;\"], wideFont);\nconst SingleHashtagText = styled.div.withConfig({\n  displayName: \"NotesTest__SingleHashtagText\",\n  componentId: \"sc-6j67dn-6\"\n})([\"margin:auto;\", \"\"], wideFont);\nconst SingleHashtagDelete = styled.div.withConfig({\n  displayName: \"NotesTest__SingleHashtagDelete\",\n  componentId: \"sc-6j67dn-7\"\n})([\"margin:auto;margin-left:6px;margin-bottom:4px;:hover{cursor:pointer;}\"]);\nconst HashtagDiv = styled.div.withConfig({\n  displayName: \"NotesTest__HashtagDiv\",\n  componentId: \"sc-6j67dn-8\"\n})([\"margin:auto 0;text-align:center;vertical-align:middle;color:white;\"]);\nconst FullRow = styled.form.withConfig({\n  displayName: \"NotesTest__FullRow\",\n  componentId: \"sc-6j67dn-9\"\n})([\"display:flex;flex-direction:row;\"]);\nconst NotesSubmit = styled.input.withConfig({\n  displayName: \"NotesTest__NotesSubmit\",\n  componentId: \"sc-6j67dn-10\"\n})([\"margin:9px;padding:15px;background:#212528;border:none;color:white;\"]);\nconst NotesInput = styled.textarea.withConfig({\n  displayName: \"NotesTest__NotesInput\",\n  componentId: \"sc-6j67dn-11\"\n})([\"width:100%;padding:12px 20px;margin:0px 0;box-sizing:border-box;background:#f8f8ff;border:none;\"]);","map":null,"metadata":{},"sourceType":"module"}