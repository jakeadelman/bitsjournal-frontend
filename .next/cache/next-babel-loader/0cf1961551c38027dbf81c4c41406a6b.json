{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n              mutation addNotes($time: String!, $notes: String!) {\\n                addNotes(time: $time, notes: $notes)\\n              }\\n            \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { getNotes, getHashtags } from \"./notesHelpers\";\nimport React, { useState, useEffect } from \"react\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport { observer } from \"mobx-react-lite\";\nimport { inject } from \"mobx-react\";\nimport TextareaAutosize from \"react-autosize-textarea\";\nimport gql from \"graphql-tag\";\nvar MyTextArea = inject(\"store\")(observer(_s(function (_ref) {\n  _s();\n\n  var firstTrade = _ref.firstTrade,\n      store = _ref.store,\n      client = _ref.client;\n\n  var _useState = useState(),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState(false),\n      light = _useState2[0],\n      setLight = _useState2[1];\n\n  var _useState3 = useState(client),\n      myClient = _useState3[0],\n      setClient = _useState3[1];\n\n  useEffect(function () {\n    var val;\n\n    if (firstTrade.notes == \"undefined\") {\n      setValue(\"Add notes here...\");\n      setLight(true);\n    } else {\n      setValue(firstTrade.notes);\n    }\n\n    var notTemp = true;\n\n    if (store.tempNotes[0] !== undefined) {\n      for (var i = 0; i < store.tempNotes.length; i++) {\n        if (store.tempNotes[i].time == firstTrade.timestamp.toString()) {\n          setValue(store.tempNotes[i].note);\n        }\n      }\n    }\n  });\n  useEffect(function () {\n    if (value != \"Add notes here...\") {\n      setLight(false);\n      getNotes(value).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(res) {\n          var notes, time, reso;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  notes = res[0];\n                  time = firstTrade.timestamp;\n                  reso = myClient.mutate({\n                    mutation: gql(_templateObject()),\n                    variables: {\n                      time: time,\n                      notes: notes\n                    }\n                  });\n                  _context.next = 5;\n                  return reso;\n\n                case 5:\n                  return _context.abrupt(\"return\", _context.sent);\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }, [value]);\n\n  function handleChange() {\n    return function (event) {\n      setLight(false);\n      store.addTempNote(firstTrade.timestamp, event.target.value);\n      setValue(event.target.value);\n    };\n  }\n\n  if (light == false) {\n    return __jsx(TextareaAutosize, {\n      style: {\n        width: \"100%\",\n        padding: \"12px 20px\",\n        marginTop: \"8px\",\n        boxSizing: \"border-box\",\n        background: \"#f8f8ff\",\n        border: \"none\",\n        outline: \"none\",\n        fontSize: \"15px\"\n      },\n      rows: 5,\n      maxRows: 25,\n      value: value,\n      onChange: handleChange()\n    });\n  } else {\n    return __jsx(TextareaAutosize, {\n      style: {\n        width: \"100%\",\n        padding: \"12px 20px\",\n        marginTop: \"8px\",\n        boxSizing: \"border-box\",\n        background: \"#f8f8ff\",\n        border: \"none\",\n        outline: \"none\",\n        fontSize: \"15px\",\n        color: \"#c6c6c6\"\n      },\n      rows: 5,\n      maxRows: 25,\n      value: value,\n      onChange: handleChange()\n    });\n  }\n}, \"Pe9LQ7lFqU1C0OJkoV6cmhGkWh0=\")));\nexport default MyTextArea;","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/components/Dashboard/Notes/TextArea.js"],"names":["getNotes","getHashtags","React","useState","useEffect","ApolloConsumer","observer","inject","TextareaAutosize","gql","MyTextArea","firstTrade","store","client","value","setValue","light","setLight","myClient","setClient","val","notes","notTemp","tempNotes","undefined","i","length","time","timestamp","toString","note","then","res","reso","mutate","mutation","variables","handleChange","event","addTempNote","target","width","padding","marginTop","boxSizing","background","border","outline","fontSize","color"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,gBAAtC;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,UAAU,GAAGH,MAAM,CAAC,OAAD,CAAN,CACjBD,QAAQ,IAAC,gBAAmC;AAAA;;AAAA,MAAhCK,UAAgC,QAAhCA,UAAgC;AAAA,MAApBC,KAAoB,QAApBA,KAAoB;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AAAA,kBAChBV,QAAQ,EADQ;AAAA,MACnCW,KADmC;AAAA,MAC5BC,QAD4B;;AAAA,mBAEhBZ,QAAQ,CAAC,KAAD,CAFQ;AAAA,MAEnCa,KAFmC;AAAA,MAE5BC,QAF4B;;AAAA,mBAGZd,QAAQ,CAACU,MAAD,CAHI;AAAA,MAGnCK,QAHmC;AAAA,MAGzBC,SAHyB;;AAI1Cf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIgB,GAAJ;;AACA,QAAIT,UAAU,CAACU,KAAX,IAAoB,WAAxB,EAAqC;AACnCN,MAAAA,QAAQ,CAAC,mBAAD,CAAR;AACAE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAHD,MAGO;AACLF,MAAAA,QAAQ,CAACJ,UAAU,CAACU,KAAZ,CAAR;AACD;;AACD,QAAIC,OAAO,GAAG,IAAd;;AACA,QAAIV,KAAK,CAACW,SAAN,CAAgB,CAAhB,MAAuBC,SAA3B,EAAsC;AACpC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,KAAK,CAACW,SAAN,CAAgBG,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,YAAIb,KAAK,CAACW,SAAN,CAAgBE,CAAhB,EAAmBE,IAAnB,IAA2BhB,UAAU,CAACiB,SAAX,CAAqBC,QAArB,EAA/B,EAAgE;AAC9Dd,UAAAA,QAAQ,CAACH,KAAK,CAACW,SAAN,CAAgBE,CAAhB,EAAmBK,IAApB,CAAR;AACD;AACF;AACF;AACF,GAhBQ,CAAT;AAkBA1B,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIU,KAAK,IAAI,mBAAb,EAAkC;AAChCG,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAjB,MAAAA,QAAQ,CAACc,KAAD,CAAR,CAAgBiB,IAAhB;AAAA,6EAAqB,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACfX,kBAAAA,KADe,GACPW,GAAG,CAAC,CAAD,CADI;AAEfL,kBAAAA,IAFe,GAERhB,UAAU,CAACiB,SAFH;AAGfK,kBAAAA,IAHe,GAGRf,QAAQ,CAACgB,MAAT,CAAgB;AACzBC,oBAAAA,QAAQ,EAAE1B,GAAF,mBADiB;AAMzB2B,oBAAAA,SAAS,EAAE;AAAET,sBAAAA,IAAI,EAAJA,IAAF;AAAQN,sBAAAA,KAAK,EAALA;AAAR;AANc,mBAAhB,CAHQ;AAAA;AAAA,yBAWNY,IAXM;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAArB;;AAAA;AAAA;AAAA;AAAA;AAaD;AACF,GAjBQ,EAiBN,CAACnB,KAAD,CAjBM,CAAT;;AAmBA,WAASuB,YAAT,GAAwB;AACtB,WAAO,UAACC,KAAD,EAAW;AAChBrB,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAL,MAAAA,KAAK,CAAC2B,WAAN,CAAkB5B,UAAU,CAACiB,SAA7B,EAAwCU,KAAK,CAACE,MAAN,CAAa1B,KAArD;AACAC,MAAAA,QAAQ,CAACuB,KAAK,CAACE,MAAN,CAAa1B,KAAd,CAAR;AACD,KAJD;AAKD;;AAED,MAAIE,KAAK,IAAI,KAAb,EAAoB;AAClB,WACE,MAAC,gBAAD;AACE,MAAA,KAAK,EAAE;AACLyB,QAAAA,KAAK,EAAE,MADF;AAELC,QAAAA,OAAO,EAAE,WAFJ;AAGLC,QAAAA,SAAS,EAAE,KAHN;AAILC,QAAAA,SAAS,EAAE,YAJN;AAKLC,QAAAA,UAAU,EAAE,SALP;AAMLC,QAAAA,MAAM,EAAE,MANH;AAOLC,QAAAA,OAAO,EAAE,MAPJ;AAQLC,QAAAA,QAAQ,EAAE;AARL,OADT;AAWE,MAAA,IAAI,EAAE,CAXR;AAYE,MAAA,OAAO,EAAE,EAZX;AAaE,MAAA,KAAK,EAAElC,KAbT;AAcE,MAAA,QAAQ,EAAEuB,YAAY;AAdxB,MADF;AAkBD,GAnBD,MAmBO;AACL,WACE,MAAC,gBAAD;AACE,MAAA,KAAK,EAAE;AACLI,QAAAA,KAAK,EAAE,MADF;AAELC,QAAAA,OAAO,EAAE,WAFJ;AAGLC,QAAAA,SAAS,EAAE,KAHN;AAILC,QAAAA,SAAS,EAAE,YAJN;AAKLC,QAAAA,UAAU,EAAE,SALP;AAMLC,QAAAA,MAAM,EAAE,MANH;AAOLC,QAAAA,OAAO,EAAE,MAPJ;AAQLC,QAAAA,QAAQ,EAAE,MARL;AASLC,QAAAA,KAAK,EAAE;AATF,OADT;AAYE,MAAA,IAAI,EAAE,CAZR;AAaE,MAAA,OAAO,EAAE,EAbX;AAcE,MAAA,KAAK,EAAEnC,KAdT;AAeE,MAAA,QAAQ,EAAEuB,YAAY;AAfxB,MADF;AAmBD;AACF,CAzFO,kCADS,CAAnB;AA6FA,eAAe3B,UAAf","sourcesContent":["import { getNotes, getHashtags } from \"./notesHelpers\";\nimport React, { useState, useEffect } from \"react\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport { observer } from \"mobx-react-lite\";\nimport { inject } from \"mobx-react\";\nimport TextareaAutosize from \"react-autosize-textarea\";\nimport gql from \"graphql-tag\";\n\nconst MyTextArea = inject(\"store\")(\n  observer(({ firstTrade, store, client }) => {\n    const [value, setValue] = useState();\n    const [light, setLight] = useState(false);\n    const [myClient, setClient] = useState(client);\n    useEffect(() => {\n      let val;\n      if (firstTrade.notes == \"undefined\") {\n        setValue(\"Add notes here...\");\n        setLight(true);\n      } else {\n        setValue(firstTrade.notes);\n      }\n      let notTemp = true;\n      if (store.tempNotes[0] !== undefined) {\n        for (let i = 0; i < store.tempNotes.length; i++) {\n          if (store.tempNotes[i].time == firstTrade.timestamp.toString()) {\n            setValue(store.tempNotes[i].note);\n          }\n        }\n      }\n    });\n\n    useEffect(() => {\n      if (value != \"Add notes here...\") {\n        setLight(false);\n        getNotes(value).then(async (res) => {\n          let notes = res[0];\n          let time = firstTrade.timestamp;\n          let reso = myClient.mutate({\n            mutation: gql`\n              mutation addNotes($time: String!, $notes: String!) {\n                addNotes(time: $time, notes: $notes)\n              }\n            `,\n            variables: { time, notes },\n          });\n          return await reso;\n        });\n      }\n    }, [value]);\n\n    function handleChange() {\n      return (event) => {\n        setLight(false);\n        store.addTempNote(firstTrade.timestamp, event.target.value);\n        setValue(event.target.value);\n      };\n    }\n\n    if (light == false) {\n      return (\n        <TextareaAutosize\n          style={{\n            width: \"100%\",\n            padding: \"12px 20px\",\n            marginTop: \"8px\",\n            boxSizing: \"border-box\",\n            background: \"#f8f8ff\",\n            border: \"none\",\n            outline: \"none\",\n            fontSize: \"15px\",\n          }}\n          rows={5}\n          maxRows={25}\n          value={value}\n          onChange={handleChange()}\n        />\n      );\n    } else {\n      return (\n        <TextareaAutosize\n          style={{\n            width: \"100%\",\n            padding: \"12px 20px\",\n            marginTop: \"8px\",\n            boxSizing: \"border-box\",\n            background: \"#f8f8ff\",\n            border: \"none\",\n            outline: \"none\",\n            fontSize: \"15px\",\n            color: \"#c6c6c6\",\n          }}\n          rows={5}\n          maxRows={25}\n          value={value}\n          onChange={handleChange()}\n        />\n      );\n    }\n  })\n);\n\nexport default MyTextArea;\n"]},"metadata":{},"sourceType":"module"}