{"ast":null,"code":"export async function getNotes(inputVal) {\n  return new Promise(resolve => {\n    let notes;\n\n    if (inputVal != null) {\n      notes = inputVal;\n    } else {\n      notes = \"undefined\";\n    } // let hashtags = \"\";\n    // if (inputHashtags != null) {\n    //   for (let k = 0; k < inputHashtags.length; k++) {\n    //     hashtags += inputHashtags[k] + \" \";\n    //     if (k == inputHashtags.length - 1) {\n    //       let endArr = [];\n    //       endArr.push(notes);\n    //       endArr.push(hashtags);\n    //       resolve(endArr);\n    //     }\n    //   }\n    // } else {\n\n\n    let endArr = [];\n    endArr.push(notes); // endArr.push(hashtags);\n\n    resolve(endArr); // }\n  });\n}\nexport async function getHashtags(inputHashtags) {\n  console.log(inputHashtags, \"INP HASH\");\n  return new Promise(resolve => {\n    let hashtags;\n\n    if (inputHashtags != null && inputHashtags != undefined) {\n      hashtags = inputHashtags;\n    } else {\n      hashtags = \"undefined\";\n    }\n\n    console.log(hashtags, \"END HASHS\");\n    resolve(hashtags);\n  });\n}","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/components/Dashboard/Notes/notesHelpers.js"],"names":["getNotes","inputVal","Promise","resolve","notes","endArr","push","getHashtags","inputHashtags","console","log","hashtags","undefined"],"mappings":"AAAA,OAAO,eAAeA,QAAf,CAAwBC,QAAxB,EAAkC;AACvC,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5B,QAAIC,KAAJ;;AACA,QAAIH,QAAQ,IAAI,IAAhB,EAAsB;AACpBG,MAAAA,KAAK,GAAGH,QAAR;AACD,KAFD,MAEO;AACLG,MAAAA,KAAK,GAAG,WAAR;AACD,KAN2B,CAO5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAIC,MAAM,GAAG,EAAb;AACAA,IAAAA,MAAM,CAACC,IAAP,CAAYF,KAAZ,EApB4B,CAqB5B;;AACAD,IAAAA,OAAO,CAACE,MAAD,CAAP,CAtB4B,CAuB5B;AACD,GAxBM,CAAP;AAyBD;AACD,OAAO,eAAeE,WAAf,CAA2BC,aAA3B,EAA0C;AAC/CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ,EAA2B,UAA3B;AACA,SAAO,IAAIN,OAAJ,CAAYC,OAAO,IAAI;AAC5B,QAAIQ,QAAJ;;AACA,QAAIH,aAAa,IAAI,IAAjB,IAAyBA,aAAa,IAAII,SAA9C,EAAyD;AACvDD,MAAAA,QAAQ,GAAGH,aAAX;AACD,KAFD,MAEO;AACLG,MAAAA,QAAQ,GAAG,WAAX;AACD;;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,EAAsB,WAAtB;AACAR,IAAAA,OAAO,CAACQ,QAAD,CAAP;AACD,GATM,CAAP;AAUD","sourcesContent":["export async function getNotes(inputVal) {\n  return new Promise(resolve => {\n    let notes;\n    if (inputVal != null) {\n      notes = inputVal;\n    } else {\n      notes = \"undefined\";\n    }\n    // let hashtags = \"\";\n    // if (inputHashtags != null) {\n    //   for (let k = 0; k < inputHashtags.length; k++) {\n    //     hashtags += inputHashtags[k] + \" \";\n    //     if (k == inputHashtags.length - 1) {\n    //       let endArr = [];\n    //       endArr.push(notes);\n    //       endArr.push(hashtags);\n    //       resolve(endArr);\n    //     }\n    //   }\n    // } else {\n    let endArr = [];\n    endArr.push(notes);\n    // endArr.push(hashtags);\n    resolve(endArr);\n    // }\n  });\n}\nexport async function getHashtags(inputHashtags) {\n  console.log(inputHashtags, \"INP HASH\");\n  return new Promise(resolve => {\n    let hashtags;\n    if (inputHashtags != null && inputHashtags != undefined) {\n      hashtags = inputHashtags;\n    } else {\n      hashtags = \"undefined\";\n    }\n    console.log(hashtags, \"END HASHS\");\n    resolve(hashtags);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}