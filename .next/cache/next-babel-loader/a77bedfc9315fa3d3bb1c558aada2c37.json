{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport initApollo from './init-apollo';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nexport default (App => {\n  var _class, _temp;\n\n  return _temp = _class = class Apollo extends React.Component {\n    static async getInitialProps(ctx) {\n      const {\n        Component,\n        router\n      } = ctx;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      } // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n\n      const apollo = initApollo();\n\n      if (!false) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(__jsx(App, _extends({}, appProps, {\n            Component: Component,\n            router: router,\n            apolloClient: apollo\n          })));\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error);\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apollo.cache.extract();\n      return _objectSpread(_objectSpread({}, appProps), {}, {\n        apolloState\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return __jsx(App, _extends({}, this.props, {\n        apolloClient: this.apolloClient\n      }));\n    }\n\n  }, _class.displayName = 'withApollo(App)', _temp;\n});","map":null,"metadata":{},"sourceType":"module"}