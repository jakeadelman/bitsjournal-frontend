{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport Chart from \"./ChartDemo\";\nimport { Alert } from \"reactstrap\";\nimport { TypeChooser } from \"react-stockcharts/lib/helper\";\nexport default class ChartComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    let startTime = new Date(this.props.trades[0].timestamp);\n    let endTime = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n    let diffMs = Math.abs(startTime - endTime);\n    var diffSecs = diffMs / 1000;\n    var diffMins = Math.round(diffSecs / 60); // minutes\n\n    try {\n      if (diffMins < 60) {\n        //   this.setState({ candleData: this.props.onemin });\n        let allExec = [];\n\n        for (let i = 0; i < this.props.onemin.length; i++) {\n          let trade = this.props.onemin[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end; // console.log(compare1, compare2);\n\n          let additionalTime = 1000 * 60 * 30;\n\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            allExec.unshift(newTrade);\n          }\n\n          if (i == this.props.onemin.length - 1) {\n            let timeframe = \"1m\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe\n            }); // console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n\n      if (diffMins >= 60 && diffMins < 60 * 10) {\n        //   this.setState({ candleData: this.props.fivemin });\n        let allExec = [];\n\n        for (let i = 0; i < this.props.fivemin.length; i++) {\n          let trade = this.props.fivemin[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end; // console.log(compare1, compare2);\n\n          let additionalTime = 1000 * 60 * 60 * 2;\n\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            allExec.unshift(newTrade);\n          }\n\n          if (i == this.props.fivemin.length - 1) {\n            let timeframe = \"5m\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe\n            });\n            console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n\n      let day = 60 * 24;\n\n      if (diffMins >= 60 * 10 && diffMins < day * 4) {\n        //   this.setState({ candleData: this.props.onehour });\n        let allExec = [];\n\n        for (let i = 0; i < this.props.onehour.length; i++) {\n          let trade = this.props.onehour[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          let additionalTime = 1000 * 60 * 60 * 20;\n\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            // console.log(compare1, compare2);\n            allExec.unshift(newTrade);\n          }\n\n          if (i == this.props.onehour.length - 1) {\n            let timeframe = \"1h\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe\n            });\n            console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n\n      if (diffMins >= day * 4) {\n        //   this.setState({ candleData: this.props.oneday });\n        let allExec = [];\n\n        for (let i = 0; i < this.props.oneday.length; i++) {\n          let trade = this.props.oneday[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          let additionalTime = 1000 * 60 * 60 * 24 * 10;\n\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            // console.log(compare1, compare2);\n            allExec.unshift(newTrade);\n          }\n\n          if (i == this.props.oneday.length - 1) {\n            let timeframe = \"1d\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe\n            });\n            console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    if (this.state == null || !this.state.newDat[0]) {\n      return __jsx(Alert, {\n        color: \"light\"\n      }, \"Can't render chart. We don't have small enough candlestick data going back to that date.\");\n    }\n\n    console.log(this.state.newDat);\n    return (// <TypeChooser>\n      //   {type => (\n      __jsx(Chart, {\n        type: \"hybrid\",\n        data: this.state.newDat,\n        trades: this.state.trades,\n        timeframe: this.state.timeframe\n      }) //   )}\n      // </TypeChooser>\n\n    );\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}