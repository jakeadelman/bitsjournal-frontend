{"ast":null,"code":"var _dec, _class, _temp, _dec2, _class3;\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Query } from \"react-apollo\";\nimport ReChart from \"./Tades/Trades\";\nimport Sidebar from \"../Menu/Menu\";\nimport gql from \"graphql-tag\";\nimport styled from \"styled-components\";\nimport { inject, observer } from \"mobx-react\";\nimport { ContainDiv, NextToDiv, NextToDivHeader, RowContainer, ContainDivHeader } from \"./Tades/Trades\";\nimport { equal } from \"fast-deep-equal\";\nimport ApiKeyForm from \"./AddApiForm\";\nimport TotalDat from \"./Dashboard\";\nimport TotalDat768 from \"./768px/DashboardTest\";\nimport { when, reaction } from \"mobx\";\nimport { getStateDate, makeDateDays, makeDateHrs } from \"../Helpers/Functions\";\nlet FetchQuery = (_dec = inject([\"store\"]), _dec(_class = observer(_class = (_temp = class FetchQuery extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clicked = () => {\n      store.isAuth = !store.isAuth;\n      console.log(store.isAuth);\n    };\n\n    this.state = {\n      startDate: \"\",\n      endDate: \"\",\n      date: \"\"\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"loaded fetch query component\");\n  }\n\n  render() {\n    let fetchTradeHistoryVariables = {\n      start: this.props.store.startDate,\n      end: this.props.store.endDate,\n      symbol: this.props.store.symbol\n    };\n    return __jsx(\"div\", null, __jsx(Comp, {\n      query: fetchTradeHistoryQuery,\n      vars: fetchTradeHistoryVariables\n    }));\n  }\n\n}, _temp)) || _class) || _class);\nlet Comp = (_dec2 = inject([\"store\"]), _dec2(_class3 = observer(_class3 = class Comp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.tempTagsReaction = reaction(() => this.props.store.hasTempTags, (notifications, reaction) => {\n      this.forceUpdate(console.log(\"FORCE UPDATE WAS CALLED\"));\n    });\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    this.tempTagsReaction();\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    console.log(window.innerWidth);\n    this.setState({\n      width: window.innerWidth\n    });\n  }\n\n  render() {\n    console.log(\"rerendered\");\n    return __jsx(Query, {\n      query: this.props.query,\n      variables: this.props.vars\n    }, ({\n      loading,\n      error,\n      data\n    }) => {\n      if (error) return __jsx(\"div\", null, \"no data loaded\");\n      if (loading) return __jsx(\"div\", null, \"Loading\");\n\n      if (data.checkApiKey == false) {\n        return __jsx(ApiKeyForm, null);\n      } else if (data.checkApiKey == true) {\n        this.props.store.resetHasTempTags();\n        this.props.store.clearTempNotes();\n        this.props.store.clearTempTags();\n        this.props.store.resetPnl();\n        this.props.store.hasSingleTrade = false;\n\n        if (this.state.width > 768) {\n          return __jsx(TotalDat, {\n            data: data\n          });\n        } else {\n          return __jsx(TotalDat768, {\n            data: data\n          });\n        }\n      }\n    });\n  }\n\n}) || _class3) || _class3);\nexport default FetchQuery;\nconst fetchTradeHistoryQuery = gql`\n  query fetchTradeHistory($start: String!, $end: String!, $symbol: String!) {\n    checkApiKey\n\n    fetchTradeHistory(start: $start, end: $end, symbol: $symbol) {\n      id\n      timestamp\n      side\n      price\n      orderQty\n      leavesQty\n      currentQty\n      avgEntryPrice\n      execGrossPnl\n      realizedPnl\n      commission\n      execType\n      orderType\n      trdStart\n      trdEnd\n      notes\n      hashtags\n    }\n\n    fetchOneMinuteCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchOneHourCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchOneDayCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchFiveMinuteCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/components/Dashboard/FetchQuery.js"],"names":["Query","ReChart","Sidebar","gql","styled","inject","observer","ContainDiv","NextToDiv","NextToDivHeader","RowContainer","ContainDivHeader","equal","ApiKeyForm","TotalDat","TotalDat768","when","reaction","getStateDate","makeDateDays","makeDateHrs","FetchQuery","React","Component","constructor","props","clicked","store","isAuth","console","log","state","startDate","endDate","date","componentDidMount","render","fetchTradeHistoryVariables","start","end","symbol","fetchTradeHistoryQuery","Comp","width","updateWindowDimensions","bind","tempTagsReaction","hasTempTags","notifications","forceUpdate","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","query","vars","loading","error","data","checkApiKey","resetHasTempTags","clearTempNotes","clearTempTags","resetPnl","hasSingleTrade"],"mappings":"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","sourcesContent":["import { Query } from \"react-apollo\";\nimport ReChart from \"./Tades/Trades\";\nimport Sidebar from \"../Menu/Menu\";\nimport gql from \"graphql-tag\";\nimport styled from \"styled-components\";\nimport { inject, observer } from \"mobx-react\";\nimport {\n  ContainDiv,\n  NextToDiv,\n  NextToDivHeader,\n  RowContainer,\n  ContainDivHeader,\n} from \"./Tades/Trades\";\nimport { equal } from \"fast-deep-equal\";\nimport ApiKeyForm from \"./AddApiForm\";\nimport TotalDat from \"./Dashboard\";\nimport TotalDat768 from \"./768px/DashboardTest\";\nimport { when, reaction } from \"mobx\";\nimport { getStateDate, makeDateDays, makeDateHrs } from \"../Helpers/Functions\";\n\n@inject([\"store\"])\n@observer\nclass FetchQuery extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { startDate: \"\", endDate: \"\", date: \"\" };\n  }\n\n  componentDidMount() {\n    console.log(\"loaded fetch query component\");\n  }\n\n  clicked = () => {\n    store.isAuth = !store.isAuth;\n    console.log(store.isAuth);\n  };\n\n  render() {\n    let fetchTradeHistoryVariables = {\n      start: this.props.store.startDate,\n      end: this.props.store.endDate,\n      symbol: this.props.store.symbol,\n    };\n\n    return (\n      <div>\n        <Comp\n          query={fetchTradeHistoryQuery}\n          vars={fetchTradeHistoryVariables}\n        />\n      </div>\n    );\n  }\n}\n\n@inject([\"store\"])\n@observer\nclass Comp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { width: 0 };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.tempTagsReaction = reaction(\n      () => this.props.store.hasTempTags,\n      (notifications, reaction) => {\n        this.forceUpdate(console.log(\"FORCE UPDATE WAS CALLED\"));\n      }\n    );\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    this.tempTagsReaction();\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    console.log(window.innerWidth);\n    this.setState({\n      width: window.innerWidth,\n    });\n  }\n\n  render() {\n    console.log(\"rerendered\");\n    return (\n      <Query query={this.props.query} variables={this.props.vars}>\n        {({ loading, error, data }) => {\n          if (error) return <div>no data loaded</div>;\n          if (loading) return <div>Loading</div>;\n          if (data.checkApiKey == false) {\n            return <ApiKeyForm />;\n          } else if (data.checkApiKey == true) {\n            this.props.store.resetHasTempTags();\n            this.props.store.clearTempNotes();\n            this.props.store.clearTempTags();\n            this.props.store.resetPnl();\n            this.props.store.hasSingleTrade = false;\n\n            if (this.state.width > 768) {\n              return <TotalDat data={data} />;\n            } else {\n              return <TotalDat768 data={data} />;\n            }\n          }\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default FetchQuery;\n\nconst fetchTradeHistoryQuery = gql`\n  query fetchTradeHistory($start: String!, $end: String!, $symbol: String!) {\n    checkApiKey\n\n    fetchTradeHistory(start: $start, end: $end, symbol: $symbol) {\n      id\n      timestamp\n      side\n      price\n      orderQty\n      leavesQty\n      currentQty\n      avgEntryPrice\n      execGrossPnl\n      realizedPnl\n      commission\n      execType\n      orderType\n      trdStart\n      trdEnd\n      notes\n      hashtags\n    }\n\n    fetchOneMinuteCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchOneHourCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchOneDayCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchFiveMinuteCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}