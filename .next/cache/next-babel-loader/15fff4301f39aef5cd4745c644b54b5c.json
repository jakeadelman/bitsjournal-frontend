{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport App, { Container } from \"next/app\";\nimport React from \"react\";\nimport withApolloClient from \"../lib/with-apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { Provider } from \"mobx-react\";\nimport { initializeStore, hydrate } from \"../stores/store\";\n\nclass MyApp extends App {\n  static async getInitialProps(appContext) {\n    // Get or Create the store with `undefined` as initialState\n    // This allows you to set a custom default initialState\n    const mobxStore = initializeStore(); // Provide the store to getInitialProps of pages\n\n    appContext.ctx.mobxStore = mobxStore;\n    let appProps = await App.getInitialProps(appContext);\n    return _objectSpread(_objectSpread({}, appProps), {}, {\n      initialMobxState: mobxStore\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    const isServer = !false;\n    this.mobxStore = isServer ? props.initialMobxState : initializeStore(props.initialMobxState);\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      apolloClient\n    } = this.props;\n    return __jsx(Container, null, __jsx(ApolloProvider, {\n      client: apolloClient\n    }, __jsx(Provider, {\n      store: this.mobxStore\n    }, __jsx(Component, pageProps))));\n  }\n\n}\n\nexport default withApolloClient(MyApp);","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/pages/_app.js"],"names":["App","Container","React","withApolloClient","ApolloProvider","Provider","initializeStore","hydrate","MyApp","getInitialProps","appContext","mobxStore","ctx","appProps","initialMobxState","constructor","props","isServer","render","Component","pageProps","apolloClient"],"mappings":";;;;;;;;AAAA,OAAOA,GAAP,IAAcC,SAAd,QAA+B,UAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,eAAT,EAA0BC,OAA1B,QAAyC,iBAAzC;;AAEA,MAAMC,KAAN,SAAoBR,GAApB,CAAwB;AACtB,eAAaS,eAAb,CAA6BC,UAA7B,EAAyC;AACvC;AACA;AACA,UAAMC,SAAS,GAAGL,eAAe,EAAjC,CAHuC,CAKvC;;AACAI,IAAAA,UAAU,CAACE,GAAX,CAAeD,SAAf,GAA2BA,SAA3B;AACA,QAAIE,QAAQ,GAAG,MAAMb,GAAG,CAACS,eAAJ,CAAoBC,UAApB,CAArB;AAEA,2CACKG,QADL;AAEEC,MAAAA,gBAAgB,EAAEH;AAFpB;AAID;;AAEDI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,UAAMC,QAAQ,GAAG,MAAjB;AACA,SAAKN,SAAL,GAAiBM,QAAQ,GACrBD,KAAK,CAACF,gBADe,GAErBR,eAAe,CAACU,KAAK,CAACF,gBAAP,CAFnB;AAGD;;AAEDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBC,MAAAA;AAAxB,QAAyC,KAAKL,KAApD;AACA,WACE,MAAC,SAAD,QACE,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEK;AAAxB,OACE,MAAC,QAAD;AAAU,MAAA,KAAK,EAAE,KAAKV;AAAtB,OACE,MAAC,SAAD,EAAeS,SAAf,CADF,CADF,CADF,CADF;AASD;;AAnCqB;;AAsCxB,eAAejB,gBAAgB,CAACK,KAAD,CAA/B","sourcesContent":["import App, { Container } from \"next/app\";\nimport React from \"react\";\nimport withApolloClient from \"../lib/with-apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { Provider } from \"mobx-react\";\nimport { initializeStore, hydrate } from \"../stores/store\";\n\nclass MyApp extends App {\n  static async getInitialProps(appContext) {\n    // Get or Create the store with `undefined` as initialState\n    // This allows you to set a custom default initialState\n    const mobxStore = initializeStore();\n\n    // Provide the store to getInitialProps of pages\n    appContext.ctx.mobxStore = mobxStore;\n    let appProps = await App.getInitialProps(appContext);\n\n    return {\n      ...appProps,\n      initialMobxState: mobxStore\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    const isServer = !process.browser;\n    this.mobxStore = isServer\n      ? props.initialMobxState\n      : initializeStore(props.initialMobxState);\n  }\n\n  render() {\n    const { Component, pageProps, apolloClient } = this.props;\n    return (\n      <Container>\n        <ApolloProvider client={apolloClient}>\n          <Provider store={this.mobxStore}>\n            <Component {...pageProps} />\n          </Provider>\n        </ApolloProvider>\n      </Container>\n    );\n  }\n}\n\nexport default withApolloClient(MyApp);\n"]},"metadata":{},"sourceType":"module"}