{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport { Alert } from \"reactstrap\"; // import \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport styled from \"styled-components\";\nimport FormWrapper from \"../form/FormWrapper\";\nimport Input from \"../form/Input\";\nimport Label from \"../form/Label\";\nimport Button from \"../shared/Button\";\n\nconst Cookie = require(\"js-cookie\");\n\nconst ApiKeyForm = () => {\n  const {\n    0: res,\n    1: setRes\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: notSubmitted,\n    1: setNotSubmitted\n  } = useState(true);\n\n  async function handleSubmit(event, client) {\n    event.preventDefault();\n    setNotSubmitted(false);\n    const form = event.target;\n    const formData = new window.FormData(form);\n    const key = formData.get(\"key\");\n    const secret = formData.get(\"secret\"); // console.log(email, password);\n\n    form.reset(); //check if api key is valid\n\n    let apiRes = client.mutate({\n      mutation: gql`\n        mutation addApiKey($key: String!, $secret: String!) {\n          addApiKey(key: $key, secret: $secret)\n        }\n      `,\n      variables: {\n        key,\n        secret\n      }\n    });\n    apiRes.then(apiRes => {\n      console.log(\"<<RES>>\");\n      console.log(apiRes.data.addApiKey);\n      console.log(typeof apiRes.data.addApiKey);\n      let isTrue = apiRes.data.addApiKey == true;\n      console.log(isTrue);\n      setRes(isTrue);\n      setLoading(false);\n    }).catch(apiRes => {\n      let isTrue = apiRes.data.addApiKey == true;\n      console.log(isTrue);\n      setRes(isTrue);\n      setLoading(false);\n    });\n  }\n\n  if (notSubmitted == true) {\n    return __jsx(ApolloConsumer, null, client => __jsx(\"div\", null, __jsx(\"div\", null, __jsx(Alert, {\n      color: \"info\"\n    }, \"Add a Bitmex api key to import your recent trades and to automatically populate your future trades into the platform.\"), __jsx(Alert, {\n      color: \"info\"\n    }, \"Note: We keep the keys encrypted in out database, however, make sure to leave \\\"withdrawals allowed\\\" UNCHECKED anyways when choosing key settings.\")), __jsx(FormWrapper, null, __jsx(StyledForm, {\n      onSubmit: event => handleSubmit(event, client)\n    }, __jsx(InputWrapper, null, __jsx(Label, null, \"key\"), __jsx(Input, {\n      placeholder: \"\",\n      name: \"key\",\n      type: \"text\",\n      required: true\n    })), __jsx(InputWrapper, null, __jsx(Label, null, \"secret\"), __jsx(Input, {\n      placeholder: \"\",\n      name: \"secret\",\n      type: \"text\",\n      required: true\n    })), __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        width: \"100%\"\n      }\n    }, __jsx(SubmitButton, {\n      type: \"submit\"\n    }, \"Submit\"))))));\n  }\n\n  if (loading == true) {\n    return __jsx(\"div\", null, \"loading\");\n  } else {\n    if (res == false) {\n      return __jsx(\"div\", null, \"error submitting, please reload page and try again\");\n    }\n\n    if (res == true) {\n      return __jsx(ApolloConsumer, null, client => __jsx(Populate, {\n        client: client\n      }));\n    }\n  }\n};\n\nconst Populate = ({\n  client\n}) => {\n  const {\n    0: res,\n    1: setRes\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    if (loading == true) {\n      console.log(\"IN POPULATE\");\n      let myClient = client;\n      let apiRes = myClient.mutate({\n        mutation: gql`\n          mutation {\n            populate\n          }\n        `\n      });\n      apiRes.then(reso => {\n        console.log(\"<<API RES>>\");\n        console.log(reso);\n        console.log(reso.data.populate);\n        setRes(reso.data.populate);\n        setLoading(false);\n      });\n    }\n  }, []);\n\n  const resetApi = async client => {\n    console.log(\"RESETTING\");\n    return new Promise(async resolve => {\n      let key = \"none\";\n      let secret = \"none\";\n      let myRes = client.mutate({\n        mutation: gql`\n          mutation addApiKey($key: String!, $secret: String!) {\n            addApiKey(key: $key, secret: $secret)\n          }\n        `,\n        variables: {\n          key,\n          secret\n        }\n      });\n      return await myRes;\n    });\n  };\n\n  if (loading == true) {\n    return __jsx(\"div\", null, \"loading\");\n  } else {\n    if (res == false) {\n      resetApi(client);\n      return __jsx(\"div\", null, \"api key not valid - reload and try again\");\n    } else {\n      location.reload();\n    }\n  }\n};\n\nexport default ApiKeyForm;\nconst StyledForm = styled.form.withConfig({\n  displayName: \"AddApiForm__StyledForm\",\n  componentId: \"z7z7vm-0\"\n})([\"display:flex;flex-direction:column;align-items:flex-start;\", \";\"], props => props.loading && \"filter: grayscale(0.5) blur(5px) opacity(0.6); pointer-events: none\");\nconst SubmitButton = styled(Button).withConfig({\n  displayName: \"AddApiForm__SubmitButton\",\n  componentId: \"z7z7vm-1\"\n})([\"align-self:flex-end;margin-right:0px;margin-left:auto;\"]);\nconst InputWrapper = styled.div.withConfig({\n  displayName: \"AddApiForm__InputWrapper\",\n  componentId: \"z7z7vm-2\"\n})([\"position:relative;margin-bottom:24px;width:100%;\"]);","map":null,"metadata":{},"sourceType":"module"}