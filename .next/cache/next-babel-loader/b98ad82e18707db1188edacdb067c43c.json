{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport Chart from \"./ChartDemo\";\nimport { Alert } from \"reactstrap\";\nimport { TypeChooser } from \"react-stockcharts/lib/helper\";\nexport default class ChartComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    let startTime = new Date(this.props.trades[0].timestamp);\n    let endTime = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n    let diffMs = Math.abs(startTime - endTime);\n    var diffSecs = diffMs / 1000;\n    var diffMins = Math.round(diffSecs / 60); // minutes\n\n    try {\n      if (diffMins < 60) {\n        //   this.setState({ candleData: this.props.onemin });\n        let allExec = [];\n\n        for (let i = 0; i < this.props.onemin.length; i++) {\n          let trade = this.props.onemin[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end; // console.log(compare1, compare2);\n\n          let additionalTime = 1000 * 60 * 30;\n\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            allExec.unshift(newTrade);\n          }\n\n          if (i == this.props.onemin.length - 1) {\n            let timeframe = \"1m\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe\n            }); // console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n\n      if (diffMins >= 60 && diffMins < 60 * 10) {\n        //   this.setState({ candleData: this.props.fivemin });\n        let allExec = [];\n\n        for (let i = 0; i < this.props.fivemin.length; i++) {\n          let trade = this.props.fivemin[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end; // console.log(compare1, compare2);\n\n          let additionalTime = 1000 * 60 * 60 * 2;\n\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            allExec.unshift(newTrade);\n          }\n\n          if (i == this.props.fivemin.length - 1) {\n            let timeframe = \"5m\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe\n            });\n            console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n\n      let day = 60 * 24;\n\n      if (diffMins >= 60 * 10 && diffMins < day * 4) {\n        //   this.setState({ candleData: this.props.onehour });\n        let allExec = [];\n\n        for (let i = 0; i < this.props.onehour.length; i++) {\n          let trade = this.props.onehour[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          let additionalTime = 1000 * 60 * 60 * 20;\n\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            // console.log(compare1, compare2);\n            allExec.unshift(newTrade);\n          }\n\n          if (i == this.props.onehour.length - 1) {\n            let timeframe = \"1h\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe\n            });\n            console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n\n      if (diffMins >= day * 4) {\n        //   this.setState({ candleData: this.props.oneday });\n        let allExec = [];\n\n        for (let i = 0; i < this.props.oneday.length; i++) {\n          let trade = this.props.oneday[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          let additionalTime = 1000 * 60 * 60 * 24 * 10;\n\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            // console.log(compare1, compare2);\n            allExec.unshift(newTrade);\n          }\n\n          if (i == this.props.oneday.length - 1) {\n            let timeframe = \"1d\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe\n            });\n            console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    if (this.state == null || !this.state.newDat[0]) {\n      return __jsx(Alert, {\n        color: \"light\"\n      }, \"Can't render chart. We don't have small enough candlestick data going back to that date.\");\n    }\n\n    console.log(this.state.newDat);\n    return (// <TypeChooser>\n      //   {type => (\n      __jsx(Chart, {\n        type: \"hybrid\",\n        data: this.state.newDat,\n        trades: this.state.trades,\n        timeframe: this.state.timeframe\n      }) //   )}\n      // </TypeChooser>\n\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/components/Dashboard/Chart/index.js"],"names":["React","render","Chart","Alert","TypeChooser","ChartComponent","Component","constructor","props","componentDidMount","startTime","Date","trades","timestamp","endTime","length","diffMs","Math","abs","diffSecs","diffMins","round","allExec","i","onemin","trade","newTrade","date","open","parseFloat","close","high","low","strt","end","compare1","compare2","additionalTime","unshift","timeframe","setState","newDat","fivemin","console","log","state","day","onehour","oneday","err"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport Chart from \"./ChartDemo\";\nimport { Alert } from \"reactstrap\";\n\nimport { TypeChooser } from \"react-stockcharts/lib/helper\";\n\nexport default class ChartComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    let startTime = new Date(this.props.trades[0].timestamp);\n    let endTime = new Date(\n      this.props.trades[this.props.trades.length - 1].timestamp\n    );\n    let diffMs = Math.abs(startTime - endTime);\n    var diffSecs = diffMs / 1000;\n    var diffMins = Math.round(diffSecs / 60); // minutes\n\n    try {\n      if (diffMins < 60) {\n        //   this.setState({ candleData: this.props.onemin });\n        let allExec = [];\n        for (let i = 0; i < this.props.onemin.length; i++) {\n          let trade = this.props.onemin[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(\n            this.props.trades[this.props.trades.length - 1].timestamp\n          );\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          // console.log(compare1, compare2);\n          let additionalTime = 1000 * 60 * 30;\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            allExec.unshift(newTrade);\n          }\n          if (i == this.props.onemin.length - 1) {\n            let timeframe = \"1m\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe,\n            });\n            // console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n      if (diffMins >= 60 && diffMins < 60 * 10) {\n        //   this.setState({ candleData: this.props.fivemin });\n        let allExec = [];\n        for (let i = 0; i < this.props.fivemin.length; i++) {\n          let trade = this.props.fivemin[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(\n            this.props.trades[this.props.trades.length - 1].timestamp\n          );\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          // console.log(compare1, compare2);\n          let additionalTime = 1000 * 60 * 60 * 2;\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            allExec.unshift(newTrade);\n          }\n          if (i == this.props.fivemin.length - 1) {\n            let timeframe = \"5m\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe,\n            });\n            console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n      let day = 60 * 24;\n      if (diffMins >= 60 * 10 && diffMins < day * 4) {\n        //   this.setState({ candleData: this.props.onehour });\n        let allExec = [];\n        for (let i = 0; i < this.props.onehour.length; i++) {\n          let trade = this.props.onehour[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(\n            this.props.trades[this.props.trades.length - 1].timestamp\n          );\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          let additionalTime = 1000 * 60 * 60 * 20;\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            // console.log(compare1, compare2);\n            allExec.unshift(newTrade);\n          }\n          if (i == this.props.onehour.length - 1) {\n            let timeframe = \"1h\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe,\n            });\n            console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n      if (diffMins >= day * 4) {\n        //   this.setState({ candleData: this.props.oneday });\n        let allExec = [];\n        for (let i = 0; i < this.props.oneday.length; i++) {\n          let trade = this.props.oneday[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(\n            this.props.trades[this.props.trades.length - 1].timestamp\n          );\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          let additionalTime = 1000 * 60 * 60 * 24 * 10;\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            // console.log(compare1, compare2);\n            allExec.unshift(newTrade);\n          }\n          if (i == this.props.oneday.length - 1) {\n            let timeframe = \"1d\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe,\n            });\n            console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  render() {\n    if (this.state == null || !this.state.newDat[0]) {\n      return (\n        <Alert color=\"light\">\n          Can't render chart. We don't have small enough candlestick data going\n          back to that date.\n        </Alert>\n      );\n    }\n    console.log(this.state.newDat);\n    return (\n      // <TypeChooser>\n      //   {type => (\n      <Chart\n        type={\"hybrid\"}\n        data={this.state.newDat}\n        trades={this.state.trades}\n        timeframe={this.state.timeframe}\n      />\n      //   )}\n      // </TypeChooser>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}