{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport Chart from \"./ChartDemo\";\nimport { Alert } from \"reactstrap\";\nimport { TypeChooser } from \"react-stockcharts/lib/helper\";\n\nvar ChartComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChartComponent, _React$Component);\n\n  var _super = _createSuper(ChartComponent);\n\n  function ChartComponent(props) {\n    _classCallCheck(this, ChartComponent);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(ChartComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var startTime = new Date(this.props.trades[0].timestamp);\n      var endTime = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n      var diffMs = Math.abs(startTime - endTime);\n      var diffSecs = diffMs / 1000;\n      var diffMins = Math.round(diffSecs / 60); // minutes\n\n      try {\n        if (diffMins < 60) {\n          //   this.setState({ candleData: this.props.onemin });\n          var allExec = [];\n\n          for (var i = 0; i < this.props.onemin.length; i++) {\n            var trade = this.props.onemin[i];\n            var newTrade = {};\n            newTrade.date = new Date(trade.timestamp);\n            newTrade.open = parseFloat(trade.open);\n            newTrade.close = parseFloat(trade.close);\n            newTrade.high = parseFloat(trade.high);\n            newTrade.low = parseFloat(trade.low);\n            var strt = new Date(this.props.trades[0].timestamp);\n            var end = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n            var compare1 = newTrade.date - strt;\n            var compare2 = newTrade.date - end; // console.log(compare1, compare2);\n\n            var additionalTime = 1000 * 60 * 30;\n\n            if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n              allExec.unshift(newTrade);\n            }\n\n            if (i == this.props.onemin.length - 1) {\n              var timeframe = \"1m\";\n              this.setState({\n                trades: this.props.trades,\n                newDat: allExec,\n                timeframe: timeframe\n              }); // console.log(this.state, \"THIS STATE \" + timeframe);\n            }\n          }\n        }\n\n        if (diffMins >= 60 && diffMins < 60 * 10) {\n          //   this.setState({ candleData: this.props.fivemin });\n          var _allExec = [];\n\n          for (var _i = 0; _i < this.props.fivemin.length; _i++) {\n            var _trade = this.props.fivemin[_i];\n            var _newTrade = {};\n            _newTrade.date = new Date(_trade.timestamp);\n            _newTrade.open = parseFloat(_trade.open);\n            _newTrade.close = parseFloat(_trade.close);\n            _newTrade.high = parseFloat(_trade.high);\n            _newTrade.low = parseFloat(_trade.low);\n\n            var _strt = new Date(this.props.trades[0].timestamp);\n\n            var _end = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n\n            var _compare = _newTrade.date - _strt;\n\n            var _compare2 = _newTrade.date - _end; // console.log(compare1, compare2);\n\n\n            var _additionalTime = 1000 * 60 * 60 * 2;\n\n            if (_compare > _additionalTime * -1 && _compare2 < _additionalTime) {\n              _allExec.unshift(_newTrade);\n            }\n\n            if (_i == this.props.fivemin.length - 1) {\n              var _timeframe = \"5m\";\n              this.setState({\n                trades: this.props.trades,\n                newDat: _allExec,\n                timeframe: _timeframe\n              });\n              console.log(this.state, \"THIS STATE \" + _timeframe);\n            }\n          }\n        }\n\n        var day = 60 * 24;\n\n        if (diffMins >= 60 * 10 && diffMins < day * 4) {\n          //   this.setState({ candleData: this.props.onehour });\n          var _allExec2 = [];\n\n          for (var _i2 = 0; _i2 < this.props.onehour.length; _i2++) {\n            var _trade2 = this.props.onehour[_i2];\n            var _newTrade2 = {};\n            _newTrade2.date = new Date(_trade2.timestamp);\n            _newTrade2.open = parseFloat(_trade2.open);\n            _newTrade2.close = parseFloat(_trade2.close);\n            _newTrade2.high = parseFloat(_trade2.high);\n            _newTrade2.low = parseFloat(_trade2.low);\n\n            var _strt2 = new Date(this.props.trades[0].timestamp);\n\n            var _end2 = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n\n            var _compare3 = _newTrade2.date - _strt2;\n\n            var _compare4 = _newTrade2.date - _end2;\n\n            var _additionalTime2 = 1000 * 60 * 60 * 20;\n\n            if (_compare3 > _additionalTime2 * -1 && _compare4 < _additionalTime2) {\n              // console.log(compare1, compare2);\n              _allExec2.unshift(_newTrade2);\n            }\n\n            if (_i2 == this.props.onehour.length - 1) {\n              var _timeframe2 = \"1h\";\n              this.setState({\n                trades: this.props.trades,\n                newDat: _allExec2,\n                timeframe: _timeframe2\n              });\n              console.log(this.state, \"THIS STATE \" + _timeframe2);\n            }\n          }\n        }\n\n        if (diffMins >= day * 4) {\n          //   this.setState({ candleData: this.props.oneday });\n          var _allExec3 = [];\n\n          for (var _i3 = 0; _i3 < this.props.oneday.length; _i3++) {\n            var _trade3 = this.props.oneday[_i3];\n            var _newTrade3 = {};\n            _newTrade3.date = new Date(_trade3.timestamp);\n            _newTrade3.open = parseFloat(_trade3.open);\n            _newTrade3.close = parseFloat(_trade3.close);\n            _newTrade3.high = parseFloat(_trade3.high);\n            _newTrade3.low = parseFloat(_trade3.low);\n\n            var _strt3 = new Date(this.props.trades[0].timestamp);\n\n            var _end3 = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n\n            var _compare5 = _newTrade3.date - _strt3;\n\n            var _compare6 = _newTrade3.date - _end3;\n\n            var _additionalTime3 = 1000 * 60 * 60 * 24 * 10;\n\n            if (_compare5 > _additionalTime3 * -1 && _compare6 < _additionalTime3) {\n              // console.log(compare1, compare2);\n              _allExec3.unshift(_newTrade3);\n            }\n\n            if (_i3 == this.props.oneday.length - 1) {\n              var _timeframe3 = \"1d\";\n              this.setState({\n                trades: this.props.trades,\n                newDat: _allExec3,\n                timeframe: _timeframe3\n              });\n              console.log(this.state, \"THIS STATE \" + _timeframe3);\n            }\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state == null || !this.state.newDat[0]) {\n        return __jsx(Alert, {\n          color: \"light\"\n        }, \"Can't render chart. We don't have small enough candlestick data going back to that date.\");\n      }\n\n      console.log(this.state.newDat);\n      return (// <TypeChooser>\n        //   {type => (\n        __jsx(Chart, {\n          type: \"hybrid\",\n          data: this.state.newDat,\n          trades: this.state.trades,\n          timeframe: this.state.timeframe\n        }) //   )}\n        // </TypeChooser>\n\n      );\n    }\n  }]);\n\n  return ChartComponent;\n}(React.Component);\n\nexport { ChartComponent as default };","map":null,"metadata":{},"sourceType":"module"}