{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n          mutation addApiKey($key: String!, $secret: String!) {\\n            addApiKey(key: $key, secret: $secret)\\n          }\\n        \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n          mutation {\\n            populate\\n          }\\n        \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        mutation addApiKey($key: String!, $secret: String!) {\\n          addApiKey(key: $key, secret: $secret)\\n        }\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport { Alert } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport styled from \"styled-components\";\nimport FormWrapper from \"../form/FormWrapper\";\nimport Input from \"../form/Input\";\nimport Label from \"../form/Label\";\nimport Button from \"../shared/Button\";\n\nvar Cookie = require(\"js-cookie\");\n\nvar ApiKeyForm = function ApiKeyForm() {\n  _s();\n\n  var _useState = useState(false),\n      res = _useState[0],\n      setRes = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(true),\n      notSubmitted = _useState3[0],\n      setNotSubmitted = _useState3[1];\n\n  function handleSubmit(_x, _x2) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event, client) {\n      var form, formData, key, secret, apiRes;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              setNotSubmitted(false);\n              form = event.target;\n              formData = new window.FormData(form);\n              key = formData.get(\"key\");\n              secret = formData.get(\"secret\"); // console.log(email, password);\n\n              form.reset(); //check if api key is valid\n\n              apiRes = client.mutate({\n                mutation: gql(_templateObject()),\n                variables: {\n                  key: key,\n                  secret: secret\n                }\n              });\n              apiRes.then(function (apiRes) {\n                console.log(\"<<RES>>\");\n                console.log(apiRes.data.addApiKey);\n                console.log(typeof apiRes.data.addApiKey);\n                var isTrue = apiRes.data.addApiKey == true;\n                console.log(isTrue);\n                setRes(isTrue);\n                setLoading(false);\n              })[\"catch\"](function (apiRes) {\n                var isTrue = apiRes.data.addApiKey == true;\n                console.log(isTrue);\n                setRes(isTrue);\n                setLoading(false);\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  if (notSubmitted == true) {\n    return __jsx(ApolloConsumer, null, function (client) {\n      return __jsx(\"div\", null, __jsx(\"div\", null, __jsx(Alert, {\n        color: \"info\"\n      }, \"Add a Bitmex api key to import your recent trades and to automatically populate your future trades into the platform.\"), __jsx(Alert, {\n        color: \"info\"\n      }, \"Note: We keep the keys encrypted in out database, however, make sure to leave \\\"withdrawals allowed\\\" UNCHECKED anyways when choosing key settings.\")), __jsx(FormWrapper, null, __jsx(StyledForm, {\n        onSubmit: function onSubmit(event) {\n          return handleSubmit(event, client);\n        }\n      }, __jsx(InputWrapper, null, __jsx(Label, null, \"key\"), __jsx(Input, {\n        placeholder: \"\",\n        name: \"key\",\n        type: \"text\",\n        required: true\n      })), __jsx(InputWrapper, null, __jsx(Label, null, \"secret\"), __jsx(Input, {\n        placeholder: \"\",\n        name: \"secret\",\n        type: \"text\",\n        required: true\n      })), __jsx(\"div\", {\n        style: {\n          display: \"flex\",\n          width: \"100%\"\n        }\n      }, __jsx(SubmitButton, {\n        type: \"submit\"\n      }, \"Submit\")))));\n    });\n  }\n\n  if (loading == true) {\n    return __jsx(\"div\", null, \"loading\");\n  } else {\n    if (res == false) {\n      return __jsx(\"div\", null, \"error submitting, please reload page and try again\");\n    }\n\n    if (res == true) {\n      return __jsx(ApolloConsumer, null, function (client) {\n        return __jsx(Populate, {\n          client: client\n        });\n      });\n    }\n  }\n};\n\n_s(ApiKeyForm, \"3/FVuYqRAwXo7f+nfpN/5NM+xB4=\");\n\n_c = ApiKeyForm;\n\nvar Populate = function Populate(_ref) {\n  _s2();\n\n  var client = _ref.client;\n\n  var _useState4 = useState(false),\n      res = _useState4[0],\n      setRes = _useState4[1];\n\n  var _useState5 = useState(true),\n      loading = _useState5[0],\n      setLoading = _useState5[1];\n\n  useEffect(function () {\n    if (loading == true) {\n      console.log(\"IN POPULATE\");\n      var myClient = client;\n      var apiRes = myClient.mutate({\n        mutation: gql(_templateObject2())\n      });\n      apiRes.then(function (reso) {\n        console.log(\"<<API RES>>\");\n        console.log(reso);\n        console.log(reso.data.populate);\n        setRes(reso.data.populate);\n        setLoading(false);\n      });\n    }\n  }, []);\n\n  var resetApi = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(client) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log(\"RESETTING\");\n              return _context3.abrupt(\"return\", new Promise( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve) {\n                  var key, secret, myRes;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          key = \"none\";\n                          secret = \"none\";\n                          myRes = client.mutate({\n                            mutation: gql(_templateObject3()),\n                            variables: {\n                              key: key,\n                              secret: secret\n                            }\n                          });\n                          _context2.next = 5;\n                          return myRes;\n\n                        case 5:\n                          return _context2.abrupt(\"return\", _context2.sent);\n\n                        case 6:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x4) {\n                  return _ref3.apply(this, arguments);\n                };\n              }()));\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function resetApi(_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  if (loading == true) {\n    return __jsx(\"div\", null, \"loading\");\n  } else {\n    if (res == false) {\n      resetApi(client);\n      return __jsx(\"div\", null, \"api key not valid - reload and try again\");\n    } else {\n      location.reload();\n    }\n  }\n};\n\n_s2(Populate, \"o+iTKL6FZuSJhmSgs+sVHgW0Kw8=\");\n\n_c2 = Populate;\nexport default ApiKeyForm;\nvar StyledForm = styled.form.withConfig({\n  displayName: \"AddApiForm__StyledForm\",\n  componentId: \"z7z7vm-0\"\n})([\"display:flex;flex-direction:column;align-items:flex-start;\", \";\"], function (props) {\n  return props.loading && \"filter: grayscale(0.5) blur(5px) opacity(0.6); pointer-events: none\";\n});\n_c3 = StyledForm;\nvar SubmitButton = styled(Button).withConfig({\n  displayName: \"AddApiForm__SubmitButton\",\n  componentId: \"z7z7vm-1\"\n})([\"align-self:flex-end;margin-right:0px;margin-left:auto;\"]);\n_c4 = SubmitButton;\nvar InputWrapper = styled.div.withConfig({\n  displayName: \"AddApiForm__InputWrapper\",\n  componentId: \"z7z7vm-2\"\n})([\"position:relative;margin-bottom:24px;width:100%;\"]);\n_c5 = InputWrapper;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ApiKeyForm\");\n$RefreshReg$(_c2, \"Populate\");\n$RefreshReg$(_c3, \"StyledForm\");\n$RefreshReg$(_c4, \"SubmitButton\");\n$RefreshReg$(_c5, \"InputWrapper\");","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/components/Dashboard/AddApiForm.js"],"names":["React","useContext","useState","useEffect","ApolloConsumer","gql","Router","Alert","styled","FormWrapper","Input","Label","Button","Cookie","require","ApiKeyForm","res","setRes","loading","setLoading","notSubmitted","setNotSubmitted","handleSubmit","event","client","preventDefault","form","target","formData","window","FormData","key","get","secret","reset","apiRes","mutate","mutation","variables","then","console","log","data","addApiKey","isTrue","display","width","Populate","myClient","reso","populate","resetApi","Promise","resolve","myRes","location","reload","StyledForm","props","SubmitButton","InputWrapper","div"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport { Alert } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport styled from \"styled-components\";\nimport FormWrapper from \"../form/FormWrapper\";\nimport Input from \"../form/Input\";\nimport Label from \"../form/Label\";\nimport Button from \"../shared/Button\";\nconst Cookie = require(\"js-cookie\");\n\nconst ApiKeyForm = () => {\n  const [res, setRes] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [notSubmitted, setNotSubmitted] = useState(true);\n\n  async function handleSubmit(event, client) {\n    event.preventDefault();\n    setNotSubmitted(false);\n    const form = event.target;\n    const formData = new window.FormData(form);\n    const key = formData.get(\"key\");\n    const secret = formData.get(\"secret\");\n    // console.log(email, password);\n    form.reset();\n\n    //check if api key is valid\n\n    let apiRes = client.mutate({\n      mutation: gql`\n        mutation addApiKey($key: String!, $secret: String!) {\n          addApiKey(key: $key, secret: $secret)\n        }\n      `,\n      variables: { key, secret },\n    });\n    apiRes\n      .then((apiRes) => {\n        console.log(\"<<RES>>\");\n        console.log(apiRes.data.addApiKey);\n        console.log(typeof apiRes.data.addApiKey);\n        let isTrue = apiRes.data.addApiKey == true;\n        console.log(isTrue);\n        setRes(isTrue);\n        setLoading(false);\n      })\n      .catch((apiRes) => {\n        let isTrue = apiRes.data.addApiKey == true;\n        console.log(isTrue);\n        setRes(isTrue);\n        setLoading(false);\n      });\n  }\n  if (notSubmitted == true) {\n    return (\n      <ApolloConsumer>\n        {(client) => (\n          <div>\n            <div>\n              <Alert color=\"info\">\n                Add a Bitmex api key to import your recent trades and to\n                automatically populate your future trades into the platform.\n              </Alert>\n              <Alert color=\"info\">\n                Note: We keep the keys encrypted in out database, however, make\n                sure to leave \"withdrawals allowed\" UNCHECKED anyways when\n                choosing key settings.\n              </Alert>\n            </div>\n            <FormWrapper>\n              <StyledForm onSubmit={(event) => handleSubmit(event, client)}>\n                <InputWrapper>\n                  <Label>key</Label>\n                  <Input placeholder=\"\" name=\"key\" type=\"text\" required />\n                </InputWrapper>\n                <InputWrapper>\n                  <Label>secret</Label>\n                  <Input placeholder=\"\" name=\"secret\" type=\"text\" required />\n                </InputWrapper>\n                <div style={{ display: \"flex\", width: \"100%\" }}>\n                  <SubmitButton type=\"submit\">Submit</SubmitButton>\n                </div>\n              </StyledForm>\n            </FormWrapper>\n          </div>\n        )}\n      </ApolloConsumer>\n    );\n  }\n\n  if (loading == true) {\n    return <div>loading</div>;\n  } else {\n    if (res == false) {\n      return <div>error submitting, please reload page and try again</div>;\n    }\n    if (res == true) {\n      return (\n        <ApolloConsumer>\n          {(client) => <Populate client={client} />}\n        </ApolloConsumer>\n      );\n    }\n  }\n};\n\nconst Populate = ({ client }) => {\n  const [res, setRes] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    if (loading == true) {\n      console.log(\"IN POPULATE\");\n      let myClient = client;\n      let apiRes = myClient.mutate({\n        mutation: gql`\n          mutation {\n            populate\n          }\n        `,\n      });\n      apiRes.then((reso) => {\n        console.log(\"<<API RES>>\");\n        console.log(reso);\n        console.log(reso.data.populate);\n        setRes(reso.data.populate);\n        setLoading(false);\n      });\n    }\n  }, []);\n\n  const resetApi = async (client) => {\n    console.log(\"RESETTING\");\n    return new Promise(async (resolve) => {\n      let key = \"none\";\n      let secret = \"none\";\n\n      let myRes = client.mutate({\n        mutation: gql`\n          mutation addApiKey($key: String!, $secret: String!) {\n            addApiKey(key: $key, secret: $secret)\n          }\n        `,\n        variables: { key, secret },\n      });\n      return await myRes;\n    });\n  };\n\n  if (loading == true) {\n    return <div>loading</div>;\n  } else {\n    if (res == false) {\n      resetApi(client);\n      return <div>api key not valid - reload and try again</div>;\n    } else {\n      location.reload();\n    }\n  }\n};\n\nexport default ApiKeyForm;\n\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  ${(props) =>\n    props.loading &&\n    \"filter: grayscale(0.5) blur(5px) opacity(0.6); pointer-events: none\"};\n`;\n\nconst SubmitButton = styled(Button)`\n  align-self: flex-end;\n  margin-right: 0px;\n  margin-left: auto;\n`;\n\nconst InputWrapper = styled.div`\n  position: relative;\n  margin-bottom: 24px;\n  width: 100%;\n`;\n"]},"metadata":{},"sourceType":"module"}