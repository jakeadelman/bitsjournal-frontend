{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nvar _dec, _class, _temp;\n\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { inject, observer } from \"mobx-react\"; // import \"react-datepicker/dist/react-datepicker.css\";\n// import \"./datepicker-additional.css\";\n\nimport { reaction } from \"mobx\";\nvar Example = (_dec = inject([\"store\"]), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$Component) {\n  _inherits(Example, _React$Component);\n\n  var _super = _createSuper(Example);\n\n  function Example(props) {\n    var _this;\n\n    _classCallCheck(this, Example);\n\n    _this = _super.call(this, props);\n\n    _this.handleChange = function (date) {\n      _this.setState({\n        date: date\n      });\n\n      console.log(date, \"THIS IS DATE\");\n    };\n\n    _this.state = {\n      date: new Date()\n    };\n    return _this;\n  }\n\n  _createClass(Example, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {}\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.dateReaction = reaction(function () {\n        return _this2.props.store.startDate;\n      }, function (notifications, reaction) {\n        if (_this2.props.store.startDate !== null) {\n          if (_this2.props.start == true) {\n            _this2.setState({\n              date: new Date(_this2.props.store.startDate)\n            });\n          } else {\n            _this2.setState({\n              date: new Date(_this2.props.store.endDate)\n            });\n          }\n        }\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      console.log(\"just updated\");\n\n      if (this.props.set == true) {\n        console.log(\"not equal\");\n\n        if (this.props.start == true) {\n          console.log(\"was true\");\n          var firstDate = this.state.date.toISOString();\n          var multiDate = firstDate.split(\"T\");\n          this.props.store.startDate = multiDate[0] + \"T00:00:00.000Z\";\n          this.props.store.date = \"Custom\";\n        }\n\n        if (this.props.start == false) {\n          console.log(\"was false\");\n\n          var _firstDate = this.state.date.toISOString();\n\n          var _multiDate = _firstDate.split(\"T\");\n\n          this.props.store.endDate = _multiDate[0] + \"T24:00:00.000Z\";\n          console.log(this.props.store.endDate);\n          this.props.store.date = \"Custom\";\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(DatePicker, {\n        selected: this.state.date,\n        onChange: this.handleChange\n      });\n    }\n  }]);\n\n  return Example;\n}(React.Component), _temp)) || _class) || _class);\nexport { Example as default };","map":null,"metadata":{},"sourceType":"module"}