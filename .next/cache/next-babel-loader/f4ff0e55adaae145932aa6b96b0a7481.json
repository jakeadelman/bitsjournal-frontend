{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport function getNotes(_x) {\n  return _getNotes.apply(this, arguments);\n}\n\nfunction _getNotes() {\n  _getNotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(inputVal) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve) {\n              var notes;\n\n              if (inputVal != null) {\n                notes = inputVal;\n              } else {\n                notes = \"undefined\";\n              } // let hashtags = \"\";\n              // if (inputHashtags != null) {\n              //   for (let k = 0; k < inputHashtags.length; k++) {\n              //     hashtags += inputHashtags[k] + \" \";\n              //     if (k == inputHashtags.length - 1) {\n              //       let endArr = [];\n              //       endArr.push(notes);\n              //       endArr.push(hashtags);\n              //       resolve(endArr);\n              //     }\n              //   }\n              // } else {\n\n\n              var endArr = [];\n              endArr.push(notes); // endArr.push(hashtags);\n\n              resolve(endArr); // }\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getNotes.apply(this, arguments);\n}\n\nexport function getHashtags(_x2) {\n  return _getHashtags.apply(this, arguments);\n}\n\nfunction _getHashtags() {\n  _getHashtags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(inputHashtags) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(inputHashtags, \"INP HASH\");\n            return _context2.abrupt(\"return\", new Promise(function (resolve) {\n              var hashtags;\n\n              if (inputHashtags != null && inputHashtags != undefined) {\n                hashtags = inputHashtags;\n              } else {\n                hashtags = \"undefined\";\n              }\n\n              console.log(hashtags, \"END HASHS\");\n              resolve(hashtags);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getHashtags.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/components/Dashboard/Notes/notesHelpers.js"],"names":["getNotes","inputVal","Promise","resolve","notes","endArr","push","getHashtags","inputHashtags","console","log","hashtags","undefined"],"mappings":";;AAAA,gBAAsBA,QAAtB;AAAA;AAAA;;;uEAAO,iBAAwBC,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,6CACE,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5B,kBAAIC,KAAJ;;AACA,kBAAIH,QAAQ,IAAI,IAAhB,EAAsB;AACpBG,gBAAAA,KAAK,GAAGH,QAAR;AACD,eAFD,MAEO;AACLG,gBAAAA,KAAK,GAAG,WAAR;AACD,eAN2B,CAO5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,kBAAIC,MAAM,GAAG,EAAb;AACAA,cAAAA,MAAM,CAACC,IAAP,CAAYF,KAAZ,EApB4B,CAqB5B;;AACAD,cAAAA,OAAO,CAACE,MAAD,CAAP,CAtB4B,CAuB5B;AACD,aAxBM,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA2BP,gBAAsBE,WAAtB;AAAA;AAAA;;;0EAAO,kBAA2BC,aAA3B;AAAA;AAAA;AAAA;AAAA;AACLC,YAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ,EAA2B,UAA3B;AADK,8CAEE,IAAIN,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5B,kBAAIQ,QAAJ;;AACA,kBAAIH,aAAa,IAAI,IAAjB,IAAyBA,aAAa,IAAII,SAA9C,EAAyD;AACvDD,gBAAAA,QAAQ,GAAGH,aAAX;AACD,eAFD,MAEO;AACLG,gBAAAA,QAAQ,GAAG,WAAX;AACD;;AACDF,cAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,EAAsB,WAAtB;AACAR,cAAAA,OAAO,CAACQ,QAAD,CAAP;AACD,aATM,CAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["export async function getNotes(inputVal) {\n  return new Promise(resolve => {\n    let notes;\n    if (inputVal != null) {\n      notes = inputVal;\n    } else {\n      notes = \"undefined\";\n    }\n    // let hashtags = \"\";\n    // if (inputHashtags != null) {\n    //   for (let k = 0; k < inputHashtags.length; k++) {\n    //     hashtags += inputHashtags[k] + \" \";\n    //     if (k == inputHashtags.length - 1) {\n    //       let endArr = [];\n    //       endArr.push(notes);\n    //       endArr.push(hashtags);\n    //       resolve(endArr);\n    //     }\n    //   }\n    // } else {\n    let endArr = [];\n    endArr.push(notes);\n    // endArr.push(hashtags);\n    resolve(endArr);\n    // }\n  });\n}\nexport async function getHashtags(inputHashtags) {\n  console.log(inputHashtags, \"INP HASH\");\n  return new Promise(resolve => {\n    let hashtags;\n    if (inputHashtags != null && inputHashtags != undefined) {\n      hashtags = inputHashtags;\n    } else {\n      hashtags = \"undefined\";\n    }\n    console.log(hashtags, \"END HASHS\");\n    resolve(hashtags);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}