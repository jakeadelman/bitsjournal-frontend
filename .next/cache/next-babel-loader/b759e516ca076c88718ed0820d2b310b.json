{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLink } from \"apollo-boost\";\nimport fetch from \"isomorphic-unfetch\";\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!true) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState) {\n  var uri;\n\n  if (false) {\n    uri = \"https://bitsjournal-backend.com\";\n  } else {\n    uri = \"http://localhost:4000/graphql\"; // Server URL (must be absolute)\n  } // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n\n  return new ApolloClient({\n    connectToDevTools: true,\n    ssrMode: !true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: uri,\n      credentials: \"include\" // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!true) {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/lib/init-apollo.js"],"names":["ApolloClient","InMemoryCache","HttpLink","fetch","apolloClient","global","create","initialState","uri","connectToDevTools","ssrMode","link","credentials","cache","restore","initApollo"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,QAAsD,cAAtD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAIC,YAAY,GAAG,IAAnB,C,CAEA;;AACA,IAAI,KAAJ,EAAsB;AACpBC,EAAAA,MAAM,CAACF,KAAP,GAAeA,KAAf;AACD;;AAED,SAASG,MAAT,CAAgBC,YAAhB,EAA8B;AAC5B,MAAIC,GAAJ;;AACA,aAA0C;AACxCA,IAAAA,GAAG,GAAG,iCAAN;AACD,GAFD,MAEO;AACLA,IAAAA,GAAG,GAAG,+BAAN,CADK,CACkC;AACxC,GAN2B,CAQ5B;;;AACA,SAAO,IAAIR,YAAJ,CAAiB;AACtBS,IAAAA,iBAAiB,MADK;AAEtBC,IAAAA,OAAO,EAAE,KAFa;AAEK;AAC3BC,IAAAA,IAAI,EAAE,IAAIT,QAAJ,CAAa;AACjBM,MAAAA,GAAG,EAAEA,GADY;AAEjBI,MAAAA,WAAW,EAAE,SAFI,CAEO;;AAFP,KAAb,CAHgB;AAOtBC,IAAAA,KAAK,EAAE,IAAIZ,aAAJ,GAAoBa,OAApB,CAA4BP,YAAY,IAAI,EAA5C;AAPe,GAAjB,CAAP;AASD;;AAED,eAAe,SAASQ,UAAT,CAAoBR,YAApB,EAAkC;AAC/C;AACA;AACA,MAAI,KAAJ,EAAsB;AACpB,WAAOD,MAAM,CAACC,YAAD,CAAb;AACD,GAL8C,CAO/C;;;AACA,MAAI,CAACH,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGE,MAAM,CAACC,YAAD,CAArB;AACD;;AAED,SAAOH,YAAP;AACD","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from \"apollo-boost\";\nimport fetch from \"isomorphic-unfetch\";\n\nlet apolloClient = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!process.browser) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState) {\n  let uri;\n  if (process.env.NODE_ENV == \"production\") {\n    uri = \"https://bitsjournal-backend.com\";\n  } else {\n    uri = \"http://localhost:4000/graphql\"; // Server URL (must be absolute)\n  }\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: uri,\n      credentials: \"include\", // Additional fetch() options like `credentials` or `headers`\n    }),\n    cache: new InMemoryCache().restore(initialState || {}),\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}\n"]},"metadata":{},"sourceType":"module"}