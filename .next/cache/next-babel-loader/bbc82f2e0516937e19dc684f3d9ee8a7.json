{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport { Alert } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport styled from \"styled-components\";\nimport FormWrapper from \"../form/FormWrapper\";\nimport Input from \"../form/Input\";\nimport Label from \"../form/Label\";\nimport Button from \"../shared/Button\";\n\nconst Cookie = require(\"js-cookie\");\n\nconst ApiKeyForm = () => {\n  const {\n    0: res,\n    1: setRes\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: notSubmitted,\n    1: setNotSubmitted\n  } = useState(true);\n\n  async function handleSubmit(event, client) {\n    event.preventDefault();\n    setNotSubmitted(false);\n    const form = event.target;\n    const formData = new window.FormData(form);\n    const key = formData.get(\"key\");\n    const secret = formData.get(\"secret\"); // console.log(email, password);\n\n    form.reset(); //check if api key is valid\n\n    let apiRes = client.mutate({\n      mutation: gql`\n        mutation addApiKey($key: String!, $secret: String!) {\n          addApiKey(key: $key, secret: $secret)\n        }\n      `,\n      variables: {\n        key,\n        secret\n      }\n    });\n    apiRes.then(apiRes => {\n      console.log(\"<<RES>>\");\n      console.log(apiRes.data.addApiKey);\n      console.log(typeof apiRes.data.addApiKey);\n      let isTrue = apiRes.data.addApiKey == true;\n      console.log(isTrue);\n      setRes(isTrue);\n      setLoading(false);\n    }).catch(apiRes => {\n      let isTrue = apiRes.data.addApiKey == true;\n      console.log(isTrue);\n      setRes(isTrue);\n      setLoading(false);\n    });\n  }\n\n  if (notSubmitted == true) {\n    return __jsx(ApolloConsumer, null, client => __jsx(\"div\", null, __jsx(\"div\", null, __jsx(Alert, {\n      color: \"info\"\n    }, \"Add a Bitmex api key to import your recent trades and to automatically populate your future trades into the platform.\"), __jsx(Alert, {\n      color: \"info\"\n    }, \"Note: We keep the keys encrypted in out database, however, make sure to leave \\\"withdrawals allowed\\\" UNCHECKED anyways when choosing key settings.\")), __jsx(FormWrapper, null, __jsx(StyledForm, {\n      onSubmit: event => handleSubmit(event, client)\n    }, __jsx(InputWrapper, null, __jsx(Label, null, \"key\"), __jsx(Input, {\n      placeholder: \"\",\n      name: \"key\",\n      type: \"text\",\n      required: true\n    })), __jsx(InputWrapper, null, __jsx(Label, null, \"secret\"), __jsx(Input, {\n      placeholder: \"\",\n      name: \"secret\",\n      type: \"text\",\n      required: true\n    })), __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        width: \"100%\"\n      }\n    }, __jsx(SubmitButton, {\n      type: \"submit\"\n    }, \"Submit\"))))));\n  }\n\n  if (loading == true) {\n    return __jsx(\"div\", null, \"loading\");\n  } else {\n    if (res == false) {\n      return __jsx(\"div\", null, \"error submitting, please reload page and try again\");\n    }\n\n    if (res == true) {\n      return __jsx(ApolloConsumer, null, client => __jsx(Populate, {\n        client: client\n      }));\n    }\n  }\n};\n\nconst Populate = ({\n  client\n}) => {\n  const {\n    0: res,\n    1: setRes\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    if (loading == true) {\n      console.log(\"IN POPULATE\");\n      let myClient = client;\n      let apiRes = myClient.mutate({\n        mutation: gql`\n          mutation {\n            populate\n          }\n        `\n      });\n      apiRes.then(reso => {\n        console.log(\"<<API RES>>\");\n        console.log(reso);\n        console.log(reso.data.populate);\n        setRes(reso.data.populate);\n        setLoading(false);\n      });\n    }\n  }, []);\n\n  const resetApi = async client => {\n    console.log(\"RESETTING\");\n    return new Promise(async resolve => {\n      let key = \"none\";\n      let secret = \"none\";\n      let myRes = client.mutate({\n        mutation: gql`\n          mutation addApiKey($key: String!, $secret: String!) {\n            addApiKey(key: $key, secret: $secret)\n          }\n        `,\n        variables: {\n          key,\n          secret\n        }\n      });\n      return await myRes;\n    });\n  };\n\n  if (loading == true) {\n    return __jsx(\"div\", null, \"loading\");\n  } else {\n    if (res == false) {\n      resetApi(client);\n      return __jsx(\"div\", null, \"api key not valid - reload and try again\");\n    } else {\n      location.reload();\n    }\n  }\n};\n\nexport default ApiKeyForm;\nconst StyledForm = styled.form.withConfig({\n  displayName: \"AddApiForm__StyledForm\",\n  componentId: \"z7z7vm-0\"\n})([\"display:flex;flex-direction:column;align-items:flex-start;\", \";\"], props => props.loading && \"filter: grayscale(0.5) blur(5px) opacity(0.6); pointer-events: none\");\nconst SubmitButton = styled(Button).withConfig({\n  displayName: \"AddApiForm__SubmitButton\",\n  componentId: \"z7z7vm-1\"\n})([\"align-self:flex-end;margin-right:0px;margin-left:auto;\"]);\nconst InputWrapper = styled.div.withConfig({\n  displayName: \"AddApiForm__InputWrapper\",\n  componentId: \"z7z7vm-2\"\n})([\"position:relative;margin-bottom:24px;width:100%;\"]);","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/components/Dashboard/AddApiForm.js"],"names":["React","useContext","useState","useEffect","ApolloConsumer","gql","Router","Alert","styled","FormWrapper","Input","Label","Button","Cookie","require","ApiKeyForm","res","setRes","loading","setLoading","notSubmitted","setNotSubmitted","handleSubmit","event","client","preventDefault","form","target","formData","window","FormData","key","get","secret","reset","apiRes","mutate","mutation","variables","then","console","log","data","addApiKey","isTrue","catch","display","width","Populate","myClient","reso","populate","resetApi","Promise","resolve","myRes","location","reload","StyledForm","props","SubmitButton","InputWrapper","div"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport { Alert } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport styled from \"styled-components\";\nimport FormWrapper from \"../form/FormWrapper\";\nimport Input from \"../form/Input\";\nimport Label from \"../form/Label\";\nimport Button from \"../shared/Button\";\nconst Cookie = require(\"js-cookie\");\n\nconst ApiKeyForm = () => {\n  const [res, setRes] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [notSubmitted, setNotSubmitted] = useState(true);\n\n  async function handleSubmit(event, client) {\n    event.preventDefault();\n    setNotSubmitted(false);\n    const form = event.target;\n    const formData = new window.FormData(form);\n    const key = formData.get(\"key\");\n    const secret = formData.get(\"secret\");\n    // console.log(email, password);\n    form.reset();\n\n    //check if api key is valid\n\n    let apiRes = client.mutate({\n      mutation: gql`\n        mutation addApiKey($key: String!, $secret: String!) {\n          addApiKey(key: $key, secret: $secret)\n        }\n      `,\n      variables: { key, secret },\n    });\n    apiRes\n      .then((apiRes) => {\n        console.log(\"<<RES>>\");\n        console.log(apiRes.data.addApiKey);\n        console.log(typeof apiRes.data.addApiKey);\n        let isTrue = apiRes.data.addApiKey == true;\n        console.log(isTrue);\n        setRes(isTrue);\n        setLoading(false);\n      })\n      .catch((apiRes) => {\n        let isTrue = apiRes.data.addApiKey == true;\n        console.log(isTrue);\n        setRes(isTrue);\n        setLoading(false);\n      });\n  }\n  if (notSubmitted == true) {\n    return (\n      <ApolloConsumer>\n        {(client) => (\n          <div>\n            <div>\n              <Alert color=\"info\">\n                Add a Bitmex api key to import your recent trades and to\n                automatically populate your future trades into the platform.\n              </Alert>\n              <Alert color=\"info\">\n                Note: We keep the keys encrypted in out database, however, make\n                sure to leave \"withdrawals allowed\" UNCHECKED anyways when\n                choosing key settings.\n              </Alert>\n            </div>\n            <FormWrapper>\n              <StyledForm onSubmit={(event) => handleSubmit(event, client)}>\n                <InputWrapper>\n                  <Label>key</Label>\n                  <Input placeholder=\"\" name=\"key\" type=\"text\" required />\n                </InputWrapper>\n                <InputWrapper>\n                  <Label>secret</Label>\n                  <Input placeholder=\"\" name=\"secret\" type=\"text\" required />\n                </InputWrapper>\n                <div style={{ display: \"flex\", width: \"100%\" }}>\n                  <SubmitButton type=\"submit\">Submit</SubmitButton>\n                </div>\n              </StyledForm>\n            </FormWrapper>\n          </div>\n        )}\n      </ApolloConsumer>\n    );\n  }\n\n  if (loading == true) {\n    return <div>loading</div>;\n  } else {\n    if (res == false) {\n      return <div>error submitting, please reload page and try again</div>;\n    }\n    if (res == true) {\n      return (\n        <ApolloConsumer>\n          {(client) => <Populate client={client} />}\n        </ApolloConsumer>\n      );\n    }\n  }\n};\n\nconst Populate = ({ client }) => {\n  const [res, setRes] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    if (loading == true) {\n      console.log(\"IN POPULATE\");\n      let myClient = client;\n      let apiRes = myClient.mutate({\n        mutation: gql`\n          mutation {\n            populate\n          }\n        `,\n      });\n      apiRes.then((reso) => {\n        console.log(\"<<API RES>>\");\n        console.log(reso);\n        console.log(reso.data.populate);\n        setRes(reso.data.populate);\n        setLoading(false);\n      });\n    }\n  }, []);\n\n  const resetApi = async (client) => {\n    console.log(\"RESETTING\");\n    return new Promise(async (resolve) => {\n      let key = \"none\";\n      let secret = \"none\";\n\n      let myRes = client.mutate({\n        mutation: gql`\n          mutation addApiKey($key: String!, $secret: String!) {\n            addApiKey(key: $key, secret: $secret)\n          }\n        `,\n        variables: { key, secret },\n      });\n      return await myRes;\n    });\n  };\n\n  if (loading == true) {\n    return <div>loading</div>;\n  } else {\n    if (res == false) {\n      resetApi(client);\n      return <div>api key not valid - reload and try again</div>;\n    } else {\n      location.reload();\n    }\n  }\n};\n\nexport default ApiKeyForm;\n\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  ${(props) =>\n    props.loading &&\n    \"filter: grayscale(0.5) blur(5px) opacity(0.6); pointer-events: none\"};\n`;\n\nconst SubmitButton = styled(Button)`\n  align-self: flex-end;\n  margin-right: 0px;\n  margin-left: auto;\n`;\n\nconst InputWrapper = styled.div`\n  position: relative;\n  margin-bottom: 24px;\n  width: 100%;\n`;\n"]},"metadata":{},"sourceType":"module"}