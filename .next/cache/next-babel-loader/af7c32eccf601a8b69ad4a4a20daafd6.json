{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useState } from \"react\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport { Alert } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"; // import { observer } from \"mobx-react-lite\";\n// import { UserStoreContext } from \"../stores/UserStore.ts\";\n\nimport styled from \"styled-components\";\nimport FormWrapper from \"./FormWrapper\";\nimport Input from \"../form/Input\";\nimport Label from \"./Label\";\nimport Button from \"../shared/Button\";\n\nconst Cookie = require(\"js-cookie\");\n\nconst LoginForm = () => {\n  // const userStore = useContext(UserStoreContext);\n  async function handleSubmit(event, client) {\n    event.preventDefault();\n    const form = event.target;\n    const formData = new window.FormData(form);\n    const email = formData.get(\"email\");\n    const password = formData.get(\"password\");\n    form.reset();\n    let res = client.mutate({\n      mutation: gql`\n        mutation login($email: String!, $password: String!) {\n          login(email: $email, password: $password)\n        }\n      `,\n      variables: {\n        email,\n        password\n      }\n    });\n    console.log(\"LOGGING IN\");\n    let r = await res;\n    r = r.data.login; //check if login credentials are correct\n\n    let isTrue = r == \"true\";\n\n    if (isTrue == true) {\n      Cookie.set(\"isAuth\", \"true\"); // userStore.isAuth = true;\n\n      Router.push(\"/dashboard\");\n    } else {\n      setWrongCredentials(true);\n      return;\n    }\n  }\n\n  const {\n    0: wrongCredentials,\n    1: setWrongCredentials\n  } = useState(false);\n  return __jsx(ApolloConsumer, null, client => __jsx(FormWrapper, null, __jsx(StyledForm, {\n    onSubmit: event => handleSubmit(event, client)\n  }, __jsx(InputWrapper, null, __jsx(Label, null, \"email\"), __jsx(Input, {\n    placeholder: \"\",\n    name: \"email\",\n    type: \"text\",\n    required: true\n  })), __jsx(InputWrapper, null, __jsx(Label, null, \"password\"), __jsx(Input, {\n    placeholder: \"\",\n    name: \"password\",\n    type: \"text\",\n    required: true\n  })), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      width: \"100%\"\n    }\n  }, __jsx(SubmitButton, {\n    type: \"submit\"\n  }, \"Submit\")), wrongCredentials == true ? __jsx(\"div\", {\n    className: \"login-alert\"\n  }, __jsx(Alert, {\n    color: \"secondary\",\n    isOpen: wrongCredentials == true ? true : false\n  }, \"Wrong login credentials\")) : null)));\n};\n\nexport default LoginForm;\nconst StyledForm = styled.form.withConfig({\n  displayName: \"LoginForm__StyledForm\",\n  componentId: \"zc9mcq-0\"\n})([\"display:flex;flex-direction:column;align-items:flex-start;\", \";\"], props => props.loading && \"filter: grayscale(0.5) blur(5px) opacity(0.6); pointer-events: none\");\nconst SubmitButton = styled(Button).withConfig({\n  displayName: \"LoginForm__SubmitButton\",\n  componentId: \"zc9mcq-1\"\n})([\"align-self:flex-end;margin-right:0px;margin-left:auto;\"]);\nconst InputWrapper = styled.div.withConfig({\n  displayName: \"LoginForm__InputWrapper\",\n  componentId: \"zc9mcq-2\"\n})([\"position:relative;margin-bottom:24px;width:100%;\"]);","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/components/form/LoginForm.js"],"names":["React","useContext","useState","ApolloConsumer","gql","Router","Alert","styled","FormWrapper","Input","Label","Button","Cookie","require","LoginForm","handleSubmit","event","client","preventDefault","form","target","formData","window","FormData","email","get","password","reset","res","mutate","mutation","variables","console","log","r","data","login","isTrue","set","push","setWrongCredentials","wrongCredentials","display","width","StyledForm","props","loading","SubmitButton","InputWrapper","div"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport { Alert } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// import { observer } from \"mobx-react-lite\";\n// import { UserStoreContext } from \"../stores/UserStore.ts\";\nimport styled from \"styled-components\";\nimport FormWrapper from \"./FormWrapper\";\nimport Input from \"../form/Input\";\nimport Label from \"./Label\";\nimport Button from \"../shared/Button\";\nconst Cookie = require(\"js-cookie\");\n\nconst LoginForm = () => {\n  // const userStore = useContext(UserStoreContext);\n\n  async function handleSubmit(event, client) {\n    event.preventDefault();\n    const form = event.target;\n    const formData = new window.FormData(form);\n    const email = formData.get(\"email\");\n    const password = formData.get(\"password\");\n    form.reset();\n\n    let res = client.mutate({\n      mutation: gql`\n        mutation login($email: String!, $password: String!) {\n          login(email: $email, password: $password)\n        }\n      `,\n      variables: { email, password },\n    });\n    console.log(\"LOGGING IN\");\n\n    let r = await res;\n    r = r.data.login;\n    //check if login credentials are correct\n    let isTrue = r == \"true\";\n    if (isTrue == true) {\n      Cookie.set(\"isAuth\", \"true\");\n\n      // userStore.isAuth = true;\n      Router.push(\"/dashboard\");\n    } else {\n      setWrongCredentials(true);\n      return;\n    }\n  }\n\n  const [wrongCredentials, setWrongCredentials] = useState(false);\n\n  return (\n    <ApolloConsumer>\n      {(client) => (\n        <FormWrapper>\n          <StyledForm onSubmit={(event) => handleSubmit(event, client)}>\n            <InputWrapper>\n              <Label>email</Label>\n              <Input placeholder=\"\" name=\"email\" type=\"text\" required />\n            </InputWrapper>\n            <InputWrapper>\n              <Label>password</Label>\n              <Input placeholder=\"\" name=\"password\" type=\"text\" required />\n            </InputWrapper>\n            <div style={{ display: \"flex\", width: \"100%\" }}>\n              <SubmitButton type=\"submit\">Submit</SubmitButton>\n            </div>\n            {wrongCredentials == true ? (\n              <div className=\"login-alert\">\n                <Alert\n                  color=\"secondary\"\n                  isOpen={wrongCredentials == true ? true : false}\n                >\n                  Wrong login credentials\n                </Alert>\n              </div>\n            ) : null}\n          </StyledForm>\n        </FormWrapper>\n      )}\n    </ApolloConsumer>\n  );\n};\n\nexport default LoginForm;\n\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  ${(props) =>\n    props.loading &&\n    \"filter: grayscale(0.5) blur(5px) opacity(0.6); pointer-events: none\"};\n`;\n\nconst SubmitButton = styled(Button)`\n  align-self: flex-end;\n  margin-right: 0px;\n  margin-left: auto;\n`;\n\nconst InputWrapper = styled.div`\n  position: relative;\n  margin-bottom: 24px;\n  width: 100%;\n`;\n"]},"metadata":{},"sourceType":"module"}