{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport function calcTrades(_x) {\n  return _calcTrades.apply(this, arguments);\n}\n\nfunction _calcTrades() {\n  _calcTrades = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(inputData) {\n    var _ret, _ret3;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(inputData[0].side == \"Buy\" && inputData[0].execType == \"Trade\")) {\n              _context.next = 4;\n              break;\n            }\n\n            _ret = function () {\n              var avgBuyPrice = 0;\n              var avgSellPrice = 0;\n              var totBuyContracts = 0;\n              var totSellContracts = 0;\n              var buyNum = 0;\n              var sellNum = 0;\n              var totBuyContractsMult = 0;\n              var totSellContractsMult = 0;\n              var realQty = 0;\n              var totCommission = 0;\n\n              for (var i = 0; i < inputData.length; i++) {\n                // realQty = inputData[i].orderQty - inputData[i].leavesQty;\n                if (inputData[i].side == \"Buy\" && inputData[i].leavesQty == 0) {\n                  buyNum += 1;\n                  totBuyContracts += inputData[i].orderQty;\n                  totBuyContractsMult += inputData[i].orderQty * parseFloat(inputData[i].price);\n                }\n\n                if (inputData[i].side == \"Sell\" && inputData[i].leavesQty == 0) {\n                  sellNum += 1;\n                  totSellContracts += inputData[i].orderQty;\n                  totSellContractsMult += inputData[i].orderQty * parseFloat(inputData[i].price);\n                }\n\n                if (inputData[i].orderType == \"Limit\" && inputData[i].execType !== \"Funding\") {\n                  totCommission += realQty * 0.0025 / inputData[i].price;\n                }\n\n                if (inputData[i].orderType == \"Market\") {\n                  totCommission -= realQty * 0.0075 / inputData[i].price;\n                }\n\n                if (inputData[i].orderType.includes(\"Stop\")) {\n                  totCommission -= realQty * 0.0075 / inputData[i].price;\n                }\n\n                if (i == inputData.length - 1) {\n                  var _ret2 = function () {\n                    avgBuyPrice = totBuyContractsMult / totBuyContracts;\n                    avgSellPrice = totSellContractsMult / totSellContracts;\n                    var avgExit = void 0;\n                    var avgEntry = void 0;\n\n                    if (avgBuyPrice != null) {\n                      avgEntry = avgBuyPrice;\n                    } else {\n                      avgEntry = 0;\n                    }\n\n                    if (avgSellPrice != null) {\n                      avgExit = avgSellPrice;\n                    } else {\n                      avgExit = 0;\n                    } // this.state.cumQty = totBuyContracts;\n\n\n                    var thePnl = (1 / avgBuyPrice - 1 / avgSellPrice) * totSellContracts;\n\n                    if (thePnl != null) {\n                      var myPnl = thePnl + totCommission;\n                      return {\n                        v: {\n                          v: new Promise(function (resolve) {\n                            var end = {};\n                            end[\"pnl\"] = myPnl;\n                            end[\"avgEntryPrice\"] = avgEntry;\n                            end[\"avgExitPrice\"] = avgExit;\n                            end[\"cumQty\"] = totBuyContracts;\n                            resolve(end);\n                          })\n                        }\n                      }; //   store.addPnl(myPnl);\n                    } else {\n                      return {\n                        v: {\n                          v: new Promise(function (resolve) {\n                            var end = {};\n                            end[\"pnl\"] = 0;\n                            end[\"avgEntryPrice\"] = avgEntry;\n                            end[\"avgExitPrice\"] = avgExit;\n                            end[\"cumQty\"] = totBuyContracts;\n                            resolve(end);\n                          })\n                        }\n                      };\n                    }\n                  }();\n\n                  if (typeof _ret2 === \"object\") return _ret2.v;\n                }\n              }\n            }();\n\n            if (!(typeof _ret === \"object\")) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _ret.v);\n\n          case 4:\n            if (!(inputData[0].side == \"Sell\" && inputData[0].execType == \"Trade\")) {\n              _context.next = 8;\n              break;\n            }\n\n            _ret3 = function () {\n              var totBuyContracts = 0;\n              var totSellContracts = 0;\n              var buyNum = 0;\n              var sellNum = 0;\n              var totBuyContractsMult = 0;\n              var totSellContractsMult = 0;\n              var realQty = 0;\n              var totCommission = 0;\n\n              for (var i = 0; i < inputData.length; i++) {\n                // realQty = inputData[i].orderQty - inputData[i].leavesQty;\n                if (inputData[i].side == \"Buy\" && inputData[i].leavesQty == 0) {\n                  // totBuyPrice += parseFloat(inputData[i].price);\n                  buyNum += 1;\n                  totBuyContracts += inputData[i].orderQty;\n                  totBuyContractsMult += inputData[i].orderQty * parseFloat(inputData[i].price);\n\n                  if (inputData[0].orderQty == 40000) {\n                    console.log(\"BUY SIDE\", inputData[i], realQty, totSellContracts, totBuyContracts, totSellContractsMult);\n                  }\n                }\n\n                if (inputData[i].side == \"Sell\" && inputData[i].leavesQty == 0) {\n                  sellNum += 1;\n\n                  if (i == 0) {\n                    var difference = inputData[i].orderQty + inputData[i].currentQty;\n                    var newRealQty = inputData[i].orderQty - difference;\n                    totSellContracts += newRealQty;\n                    totSellContractsMult += newRealQty * parseFloat(inputData[i].price);\n                  } else {\n                    totSellContracts += inputData[i].orderQty;\n                    totSellContractsMult += inputData[i].orderQty * parseFloat(inputData[i].price);\n                  }\n\n                  if (inputData[0].orderQty == 40000) {\n                    console.log(\"SELL SIDE\", inputData[i], realQty, totSellContracts, totBuyContracts, totSellContractsMult);\n                  }\n                }\n\n                if (inputData[i].orderType == \"Limit\" && inputData[i].execType !== \"Funding\") {\n                  totCommission += realQty * 0.0025 / inputData[i].price;\n                }\n\n                if (inputData[i].orderType == \"Market\") {\n                  totCommission -= realQty * 0.0075 / inputData[i].price;\n                }\n\n                if (inputData[i].orderType.includes(\"Stop\")) {\n                  totCommission -= realQty * 0.0075 / inputData[i].price;\n                }\n\n                if (i == inputData.length - 1) {\n                  var _ret4 = function () {\n                    var avgBuyPrice = totBuyContractsMult / totBuyContracts;\n                    var avgSellPrice = totSellContractsMult / totSellContracts;\n                    var pnl = (1 / avgBuyPrice - 1 / avgSellPrice) * totBuyContracts;\n\n                    if (inputData[0].orderQty == 40000) {\n                      console.log(pnl, avgBuyPrice, avgSellPrice, totBuyContracts);\n                    }\n\n                    var avgEntry = void 0;\n                    var avgExit = void 0;\n\n                    if (avgBuyPrice != null) {\n                      avgExit = avgBuyPrice;\n                    } else {\n                      avgExit = 0;\n                    }\n\n                    if (avgSellPrice != null) {\n                      avgEntry = avgSellPrice;\n                    } else {\n                      avgEntry = 0;\n                    }\n\n                    if (pnl != null) {\n                      var myPnl = pnl + totCommission;\n                      return {\n                        v: {\n                          v: new Promise(function (resolve) {\n                            var end = {};\n                            end[\"pnl\"] = myPnl;\n                            end[\"avgEntryPrice\"] = avgEntry;\n                            end[\"avgExitPrice\"] = avgExit;\n                            end[\"cumQty\"] = totSellContracts;\n\n                            if (inputData[0].orderQty == 40000) {\n                              console.log(end);\n                            }\n\n                            resolve(end);\n                          })\n                        }\n                      };\n                    } else {\n                      return {\n                        v: {\n                          v: new Promise(function (resolve) {\n                            var end = {};\n                            end[\"pnl\"] = 0;\n                            end[\"avgEntryPrice\"] = avgEntry;\n                            end[\"avgExitPrice\"] = avgExit;\n                            end[\"cumQty\"] = totSellContracts;\n                            resolve(end);\n                          })\n                        }\n                      };\n                    }\n                  }();\n\n                  if (typeof _ret4 === \"object\") return _ret4.v;\n                }\n              }\n            }();\n\n            if (!(typeof _ret3 === \"object\")) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _ret3.v);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _calcTrades.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/components/Dashboard/Tades/calcTrades.js"],"names":["calcTrades","inputData","side","execType","avgBuyPrice","avgSellPrice","totBuyContracts","totSellContracts","buyNum","sellNum","totBuyContractsMult","totSellContractsMult","realQty","totCommission","i","length","leavesQty","orderQty","parseFloat","price","orderType","includes","avgExit","avgEntry","thePnl","myPnl","Promise","resolve","end","console","log","difference","currentQty","newRealQty","pnl"],"mappings":"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","sourcesContent":["export async function calcTrades(inputData) {\n  // inputData = this.props.slic;\n  if (inputData[0].side == \"Buy\" && inputData[0].execType == \"Trade\") {\n    let avgBuyPrice = 0;\n    let avgSellPrice = 0;\n    let totBuyContracts = 0;\n    let totSellContracts = 0;\n    let buyNum = 0;\n    let sellNum = 0;\n    let totBuyContractsMult = 0;\n    let totSellContractsMult = 0;\n    let realQty = 0;\n    let totCommission = 0;\n    for (let i = 0; i < inputData.length; i++) {\n      // realQty = inputData[i].orderQty - inputData[i].leavesQty;\n      if (inputData[i].side == \"Buy\" && inputData[i].leavesQty == 0) {\n        buyNum += 1;\n        totBuyContracts += inputData[i].orderQty;\n        totBuyContractsMult +=\n          inputData[i].orderQty * parseFloat(inputData[i].price);\n      }\n      if (inputData[i].side == \"Sell\" && inputData[i].leavesQty == 0) {\n        sellNum += 1;\n        totSellContracts += inputData[i].orderQty;\n        totSellContractsMult +=\n          inputData[i].orderQty * parseFloat(inputData[i].price);\n      }\n      if (\n        inputData[i].orderType == \"Limit\" &&\n        inputData[i].execType !== \"Funding\"\n      ) {\n        totCommission += (realQty * 0.0025) / inputData[i].price;\n      }\n      if (inputData[i].orderType == \"Market\") {\n        totCommission -= (realQty * 0.0075) / inputData[i].price;\n      }\n      if (inputData[i].orderType.includes(\"Stop\")) {\n        totCommission -= (realQty * 0.0075) / inputData[i].price;\n      }\n      if (i == inputData.length - 1) {\n        avgBuyPrice = totBuyContractsMult / totBuyContracts;\n        avgSellPrice = totSellContractsMult / totSellContracts;\n        let avgExit;\n        let avgEntry;\n        if (avgBuyPrice != null) {\n          avgEntry = avgBuyPrice;\n        } else {\n          avgEntry = 0;\n        }\n        if (avgSellPrice != null) {\n          avgExit = avgSellPrice;\n        } else {\n          avgExit = 0;\n        }\n        // this.state.cumQty = totBuyContracts;\n        let thePnl = (1 / avgBuyPrice - 1 / avgSellPrice) * totSellContracts;\n        if (thePnl != null) {\n          let myPnl = thePnl + totCommission;\n          return new Promise((resolve) => {\n            let end = {};\n            end[\"pnl\"] = myPnl;\n            end[\"avgEntryPrice\"] = avgEntry;\n            end[\"avgExitPrice\"] = avgExit;\n            end[\"cumQty\"] = totBuyContracts;\n            resolve(end);\n          });\n          //   store.addPnl(myPnl);\n        } else {\n          return new Promise((resolve) => {\n            let end = {};\n            end[\"pnl\"] = 0;\n            end[\"avgEntryPrice\"] = avgEntry;\n            end[\"avgExitPrice\"] = avgExit;\n            end[\"cumQty\"] = totBuyContracts;\n            resolve(end);\n          });\n        }\n      }\n    }\n  }\n  if (inputData[0].side == \"Sell\" && inputData[0].execType == \"Trade\") {\n    let totBuyContracts = 0;\n    let totSellContracts = 0;\n    let buyNum = 0;\n    let sellNum = 0;\n    let totBuyContractsMult = 0;\n    let totSellContractsMult = 0;\n    let realQty = 0;\n    let totCommission = 0;\n    for (let i = 0; i < inputData.length; i++) {\n      // realQty = inputData[i].orderQty - inputData[i].leavesQty;\n      if (inputData[i].side == \"Buy\" && inputData[i].leavesQty == 0) {\n        // totBuyPrice += parseFloat(inputData[i].price);\n        buyNum += 1;\n        totBuyContracts += inputData[i].orderQty;\n        totBuyContractsMult +=\n          inputData[i].orderQty * parseFloat(inputData[i].price);\n        if (inputData[0].orderQty == 40000) {\n          console.log(\n            \"BUY SIDE\",\n            inputData[i],\n            realQty,\n            totSellContracts,\n            totBuyContracts,\n            totSellContractsMult\n          );\n        }\n      }\n      if (inputData[i].side == \"Sell\" && inputData[i].leavesQty == 0) {\n        sellNum += 1;\n        if (i == 0) {\n          let difference = inputData[i].orderQty + inputData[i].currentQty;\n          let newRealQty = inputData[i].orderQty - difference;\n          totSellContracts += newRealQty;\n          totSellContractsMult += newRealQty * parseFloat(inputData[i].price);\n        } else {\n          totSellContracts += inputData[i].orderQty;\n          totSellContractsMult +=\n            inputData[i].orderQty * parseFloat(inputData[i].price);\n        }\n        if (inputData[0].orderQty == 40000) {\n          console.log(\n            \"SELL SIDE\",\n            inputData[i],\n            realQty,\n            totSellContracts,\n            totBuyContracts,\n            totSellContractsMult\n          );\n        }\n      }\n      if (\n        inputData[i].orderType == \"Limit\" &&\n        inputData[i].execType !== \"Funding\"\n      ) {\n        totCommission += (realQty * 0.0025) / inputData[i].price;\n      }\n      if (inputData[i].orderType == \"Market\") {\n        totCommission -= (realQty * 0.0075) / inputData[i].price;\n      }\n      if (inputData[i].orderType.includes(\"Stop\")) {\n        totCommission -= (realQty * 0.0075) / inputData[i].price;\n      }\n      if (i == inputData.length - 1) {\n        let avgBuyPrice = totBuyContractsMult / totBuyContracts;\n        let avgSellPrice = totSellContractsMult / totSellContracts;\n        let pnl = (1 / avgBuyPrice - 1 / avgSellPrice) * totBuyContracts;\n        if (inputData[0].orderQty == 40000) {\n          console.log(pnl, avgBuyPrice, avgSellPrice, totBuyContracts);\n        }\n        let avgEntry;\n        let avgExit;\n        if (avgBuyPrice != null) {\n          avgExit = avgBuyPrice;\n        } else {\n          avgExit = 0;\n        }\n        if (avgSellPrice != null) {\n          avgEntry = avgSellPrice;\n        } else {\n          avgEntry = 0;\n        }\n\n        if (pnl != null) {\n          let myPnl = pnl + totCommission;\n          return new Promise((resolve) => {\n            let end = {};\n            end[\"pnl\"] = myPnl;\n            end[\"avgEntryPrice\"] = avgEntry;\n            end[\"avgExitPrice\"] = avgExit;\n            end[\"cumQty\"] = totSellContracts;\n            if (inputData[0].orderQty == 40000) {\n              console.log(end);\n            }\n            resolve(end);\n          });\n        } else {\n          return new Promise((resolve) => {\n            let end = {};\n            end[\"pnl\"] = 0;\n            end[\"avgEntryPrice\"] = avgEntry;\n            end[\"avgExitPrice\"] = avgExit;\n            end[\"cumQty\"] = totSellContracts;\n            resolve(end);\n          });\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}