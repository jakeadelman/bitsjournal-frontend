{"ast":null,"code":"var _dec, _class, _temp, _dec2, _class3;\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Query } from \"react-apollo\";\nimport ReChart from \"./Tades/Trades\";\nimport Sidebar from \"../Menu/Menu\";\nimport gql from \"graphql-tag\";\nimport styled from \"styled-components\";\nimport { inject, observer } from \"mobx-react\";\nimport { ContainDiv, NextToDiv, NextToDivHeader, RowContainer, ContainDivHeader } from \"./Tades/Trades\";\nimport { equal } from \"fast-deep-equal\";\nimport ApiKeyForm from \"./AddApiForm\";\nimport TotalDat from \"./Dashboard\";\nimport TotalDat768 from \"./768px/DashboardTest\";\nimport { when, reaction } from \"mobx\";\nimport { getStateDate, makeDateDays, makeDateHrs } from \"../Helpers/Functions\";\nlet FetchQuery = (_dec = inject([\"store\"]), _dec(_class = observer(_class = (_temp = class FetchQuery extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clicked = () => {\n      store.isAuth = !store.isAuth;\n      console.log(store.isAuth);\n    };\n\n    this.state = {\n      startDate: \"\",\n      endDate: \"\",\n      date: \"\"\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"loaded fetch query component\");\n  }\n\n  render() {\n    let fetchTradeHistoryVariables = {\n      start: this.props.store.startDate,\n      end: this.props.store.endDate,\n      symbol: this.props.store.symbol\n    };\n    return __jsx(\"div\", null, __jsx(Comp, {\n      query: fetchTradeHistoryQuery,\n      vars: fetchTradeHistoryVariables\n    }));\n  }\n\n}, _temp)) || _class) || _class);\nlet Comp = (_dec2 = inject([\"store\"]), _dec2(_class3 = observer(_class3 = class Comp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.tempTagsReaction = reaction(() => this.props.store.hasTempTags, (notifications, reaction) => {\n      this.forceUpdate(console.log(\"FORCE UPDATE WAS CALLED\"));\n    });\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    this.tempTagsReaction();\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    console.log(window.innerWidth);\n    this.setState({\n      width: window.innerWidth\n    });\n  }\n\n  render() {\n    console.log(\"rerendered\");\n    return __jsx(Query, {\n      query: this.props.query,\n      variables: this.props.vars\n    }, ({\n      loading,\n      error,\n      data\n    }) => {\n      if (error) return __jsx(\"div\", null, \"no data loaded\");\n      if (loading) return __jsx(\"div\", null, \"Loading\");\n\n      if (data.checkApiKey == false) {\n        return __jsx(ApiKeyForm, null);\n      } else if (data.checkApiKey == true) {\n        this.props.store.resetHasTempTags();\n        this.props.store.clearTempNotes();\n        this.props.store.clearTempTags();\n        this.props.store.resetPnl();\n        this.props.store.hasSingleTrade = false;\n\n        if (this.state.width > 768) {\n          return __jsx(TotalDat, {\n            data: data\n          });\n        } else {\n          return __jsx(TotalDat768, {\n            data: data\n          });\n        }\n      }\n    });\n  }\n\n}) || _class3) || _class3);\nexport default FetchQuery;\nconst fetchTradeHistoryQuery = gql`\n  query fetchTradeHistory($start: String!, $end: String!, $symbol: String!) {\n    checkApiKey\n\n    fetchTradeHistory(start: $start, end: $end, symbol: $symbol) {\n      id\n      timestamp\n      side\n      price\n      orderQty\n      leavesQty\n      currentQty\n      avgEntryPrice\n      execGrossPnl\n      realizedPnl\n      commission\n      execType\n      orderType\n      trdStart\n      trdEnd\n      notes\n      hashtags\n    }\n\n    fetchOneMinuteCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchOneHourCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchOneDayCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchFiveMinuteCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n  }\n`;","map":null,"metadata":{},"sourceType":"module"}