{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLink } from \"apollo-boost\";\nimport fetch from \"isomorphic-unfetch\";\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!true) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: true,\n    ssrMode: !true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: \"http://localhost:4000/graphql\",\n      // Server URL (must be absolute)\n      // uri: \"https://bitsjournal-backend.com\",\n      credentials: \"include\" // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!true) {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}","map":null,"metadata":{},"sourceType":"module"}