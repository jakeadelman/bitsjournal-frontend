{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport Chart from \"./ChartDemo\";\nimport { Alert } from \"reactstrap\";\nimport { TypeChooser } from \"react-stockcharts/lib/helper\";\n\nvar ChartComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChartComponent, _React$Component);\n\n  var _super = _createSuper(ChartComponent);\n\n  function ChartComponent(props) {\n    _classCallCheck(this, ChartComponent);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(ChartComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var startTime = new Date(this.props.trades[0].timestamp);\n      var endTime = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n      var diffMs = Math.abs(startTime - endTime);\n      var diffSecs = diffMs / 1000;\n      var diffMins = Math.round(diffSecs / 60); // minutes\n\n      try {\n        if (diffMins < 60) {\n          //   this.setState({ candleData: this.props.onemin });\n          var allExec = [];\n\n          for (var i = 0; i < this.props.onemin.length; i++) {\n            var trade = this.props.onemin[i];\n            var newTrade = {};\n            newTrade.date = new Date(trade.timestamp);\n            newTrade.open = parseFloat(trade.open);\n            newTrade.close = parseFloat(trade.close);\n            newTrade.high = parseFloat(trade.high);\n            newTrade.low = parseFloat(trade.low);\n            var strt = new Date(this.props.trades[0].timestamp);\n            var end = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n            var compare1 = newTrade.date - strt;\n            var compare2 = newTrade.date - end; // console.log(compare1, compare2);\n\n            var additionalTime = 1000 * 60 * 30;\n\n            if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n              allExec.unshift(newTrade);\n            }\n\n            if (i == this.props.onemin.length - 1) {\n              var timeframe = \"1m\";\n              this.setState({\n                trades: this.props.trades,\n                newDat: allExec,\n                timeframe: timeframe\n              }); // console.log(this.state, \"THIS STATE \" + timeframe);\n            }\n          }\n        }\n\n        if (diffMins >= 60 && diffMins < 60 * 10) {\n          //   this.setState({ candleData: this.props.fivemin });\n          var _allExec = [];\n\n          for (var _i = 0; _i < this.props.fivemin.length; _i++) {\n            var _trade = this.props.fivemin[_i];\n            var _newTrade = {};\n            _newTrade.date = new Date(_trade.timestamp);\n            _newTrade.open = parseFloat(_trade.open);\n            _newTrade.close = parseFloat(_trade.close);\n            _newTrade.high = parseFloat(_trade.high);\n            _newTrade.low = parseFloat(_trade.low);\n\n            var _strt = new Date(this.props.trades[0].timestamp);\n\n            var _end = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n\n            var _compare = _newTrade.date - _strt;\n\n            var _compare2 = _newTrade.date - _end; // console.log(compare1, compare2);\n\n\n            var _additionalTime = 1000 * 60 * 60 * 2;\n\n            if (_compare > _additionalTime * -1 && _compare2 < _additionalTime) {\n              _allExec.unshift(_newTrade);\n            }\n\n            if (_i == this.props.fivemin.length - 1) {\n              var _timeframe = \"5m\";\n              this.setState({\n                trades: this.props.trades,\n                newDat: _allExec,\n                timeframe: _timeframe\n              });\n              console.log(this.state, \"THIS STATE \" + _timeframe);\n            }\n          }\n        }\n\n        var day = 60 * 24;\n\n        if (diffMins >= 60 * 10 && diffMins < day * 4) {\n          //   this.setState({ candleData: this.props.onehour });\n          var _allExec2 = [];\n\n          for (var _i2 = 0; _i2 < this.props.onehour.length; _i2++) {\n            var _trade2 = this.props.onehour[_i2];\n            var _newTrade2 = {};\n            _newTrade2.date = new Date(_trade2.timestamp);\n            _newTrade2.open = parseFloat(_trade2.open);\n            _newTrade2.close = parseFloat(_trade2.close);\n            _newTrade2.high = parseFloat(_trade2.high);\n            _newTrade2.low = parseFloat(_trade2.low);\n\n            var _strt2 = new Date(this.props.trades[0].timestamp);\n\n            var _end2 = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n\n            var _compare3 = _newTrade2.date - _strt2;\n\n            var _compare4 = _newTrade2.date - _end2;\n\n            var _additionalTime2 = 1000 * 60 * 60 * 20;\n\n            if (_compare3 > _additionalTime2 * -1 && _compare4 < _additionalTime2) {\n              // console.log(compare1, compare2);\n              _allExec2.unshift(_newTrade2);\n            }\n\n            if (_i2 == this.props.onehour.length - 1) {\n              var _timeframe2 = \"1h\";\n              this.setState({\n                trades: this.props.trades,\n                newDat: _allExec2,\n                timeframe: _timeframe2\n              });\n              console.log(this.state, \"THIS STATE \" + _timeframe2);\n            }\n          }\n        }\n\n        if (diffMins >= day * 4) {\n          //   this.setState({ candleData: this.props.oneday });\n          var _allExec3 = [];\n\n          for (var _i3 = 0; _i3 < this.props.oneday.length; _i3++) {\n            var _trade3 = this.props.oneday[_i3];\n            var _newTrade3 = {};\n            _newTrade3.date = new Date(_trade3.timestamp);\n            _newTrade3.open = parseFloat(_trade3.open);\n            _newTrade3.close = parseFloat(_trade3.close);\n            _newTrade3.high = parseFloat(_trade3.high);\n            _newTrade3.low = parseFloat(_trade3.low);\n\n            var _strt3 = new Date(this.props.trades[0].timestamp);\n\n            var _end3 = new Date(this.props.trades[this.props.trades.length - 1].timestamp);\n\n            var _compare5 = _newTrade3.date - _strt3;\n\n            var _compare6 = _newTrade3.date - _end3;\n\n            var _additionalTime3 = 1000 * 60 * 60 * 24 * 10;\n\n            if (_compare5 > _additionalTime3 * -1 && _compare6 < _additionalTime3) {\n              // console.log(compare1, compare2);\n              _allExec3.unshift(_newTrade3);\n            }\n\n            if (_i3 == this.props.oneday.length - 1) {\n              var _timeframe3 = \"1d\";\n              this.setState({\n                trades: this.props.trades,\n                newDat: _allExec3,\n                timeframe: _timeframe3\n              });\n              console.log(this.state, \"THIS STATE \" + _timeframe3);\n            }\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state == null || !this.state.newDat[0]) {\n        return __jsx(Alert, {\n          color: \"light\"\n        }, \"Can't render chart. We don't have small enough candlestick data going back to that date.\");\n      }\n\n      console.log(this.state.newDat);\n      return (// <TypeChooser>\n        //   {type => (\n        __jsx(Chart, {\n          type: \"hybrid\",\n          data: this.state.newDat,\n          trades: this.state.trades,\n          timeframe: this.state.timeframe\n        }) //   )}\n        // </TypeChooser>\n\n      );\n    }\n  }]);\n\n  return ChartComponent;\n}(React.Component);\n\nexport { ChartComponent as default };","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/components/Dashboard/Chart/index.js"],"names":["React","render","Chart","Alert","TypeChooser","ChartComponent","props","startTime","Date","trades","timestamp","endTime","length","diffMs","Math","abs","diffSecs","diffMins","round","allExec","i","onemin","trade","newTrade","date","open","parseFloat","close","high","low","strt","end","compare1","compare2","additionalTime","unshift","timeframe","setState","newDat","fivemin","console","log","state","day","onehour","oneday","err","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport Chart from \"./ChartDemo\";\nimport { Alert } from \"reactstrap\";\n\nimport { TypeChooser } from \"react-stockcharts/lib/helper\";\n\nexport default class ChartComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    let startTime = new Date(this.props.trades[0].timestamp);\n    let endTime = new Date(\n      this.props.trades[this.props.trades.length - 1].timestamp\n    );\n    let diffMs = Math.abs(startTime - endTime);\n    var diffSecs = diffMs / 1000;\n    var diffMins = Math.round(diffSecs / 60); // minutes\n\n    try {\n      if (diffMins < 60) {\n        //   this.setState({ candleData: this.props.onemin });\n        let allExec = [];\n        for (let i = 0; i < this.props.onemin.length; i++) {\n          let trade = this.props.onemin[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(\n            this.props.trades[this.props.trades.length - 1].timestamp\n          );\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          // console.log(compare1, compare2);\n          let additionalTime = 1000 * 60 * 30;\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            allExec.unshift(newTrade);\n          }\n          if (i == this.props.onemin.length - 1) {\n            let timeframe = \"1m\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe,\n            });\n            // console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n      if (diffMins >= 60 && diffMins < 60 * 10) {\n        //   this.setState({ candleData: this.props.fivemin });\n        let allExec = [];\n        for (let i = 0; i < this.props.fivemin.length; i++) {\n          let trade = this.props.fivemin[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(\n            this.props.trades[this.props.trades.length - 1].timestamp\n          );\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          // console.log(compare1, compare2);\n          let additionalTime = 1000 * 60 * 60 * 2;\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            allExec.unshift(newTrade);\n          }\n          if (i == this.props.fivemin.length - 1) {\n            let timeframe = \"5m\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe,\n            });\n            console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n      let day = 60 * 24;\n      if (diffMins >= 60 * 10 && diffMins < day * 4) {\n        //   this.setState({ candleData: this.props.onehour });\n        let allExec = [];\n        for (let i = 0; i < this.props.onehour.length; i++) {\n          let trade = this.props.onehour[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(\n            this.props.trades[this.props.trades.length - 1].timestamp\n          );\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          let additionalTime = 1000 * 60 * 60 * 20;\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            // console.log(compare1, compare2);\n            allExec.unshift(newTrade);\n          }\n          if (i == this.props.onehour.length - 1) {\n            let timeframe = \"1h\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe,\n            });\n            console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n      if (diffMins >= day * 4) {\n        //   this.setState({ candleData: this.props.oneday });\n        let allExec = [];\n        for (let i = 0; i < this.props.oneday.length; i++) {\n          let trade = this.props.oneday[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(\n            this.props.trades[this.props.trades.length - 1].timestamp\n          );\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          let additionalTime = 1000 * 60 * 60 * 24 * 10;\n          if (compare1 > additionalTime * -1 && compare2 < additionalTime) {\n            // console.log(compare1, compare2);\n            allExec.unshift(newTrade);\n          }\n          if (i == this.props.oneday.length - 1) {\n            let timeframe = \"1d\";\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: timeframe,\n            });\n            console.log(this.state, \"THIS STATE \" + timeframe);\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  render() {\n    if (this.state == null || !this.state.newDat[0]) {\n      return (\n        <Alert color=\"light\">\n          Can't render chart. We don't have small enough candlestick data going\n          back to that date.\n        </Alert>\n      );\n    }\n    console.log(this.state.newDat);\n    return (\n      // <TypeChooser>\n      //   {type => (\n      <Chart\n        type={\"hybrid\"}\n        data={this.state.newDat}\n        trades={this.state.trades}\n        timeframe={this.state.timeframe}\n      />\n      //   )}\n      // </TypeChooser>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}