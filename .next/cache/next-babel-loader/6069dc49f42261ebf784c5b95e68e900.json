{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nvar _dec, _class, _temp, _dec2, _class3;\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query fetchTradeHistory($start: String!, $end: String!, $symbol: String!) {\\n    checkApiKey\\n\\n    fetchTradeHistory(start: $start, end: $end, symbol: $symbol) {\\n      id\\n      timestamp\\n      side\\n      price\\n      orderQty\\n      leavesQty\\n      currentQty\\n      avgEntryPrice\\n      execGrossPnl\\n      realizedPnl\\n      commission\\n      execType\\n      orderType\\n      trdStart\\n      trdEnd\\n      notes\\n      hashtags\\n    }\\n\\n    fetchOneMinuteCandleHistory(start: $start, end: $end) {\\n      id\\n      timestamp\\n      symbol\\n      timeframe\\n      open\\n      high\\n      low\\n      close\\n      trades\\n      volume\\n      vwap\\n      lastSize\\n      homeNotional\\n      foreignNotional\\n    }\\n\\n    fetchOneHourCandleHistory(start: $start, end: $end) {\\n      id\\n      timestamp\\n      symbol\\n      timeframe\\n      open\\n      high\\n      low\\n      close\\n      trades\\n      volume\\n      vwap\\n      lastSize\\n      homeNotional\\n      foreignNotional\\n    }\\n\\n    fetchOneDayCandleHistory(start: $start, end: $end) {\\n      id\\n      timestamp\\n      symbol\\n      timeframe\\n      open\\n      high\\n      low\\n      close\\n      trades\\n      volume\\n      vwap\\n      lastSize\\n      homeNotional\\n      foreignNotional\\n    }\\n\\n    fetchFiveMinuteCandleHistory(start: $start, end: $end) {\\n      id\\n      timestamp\\n      symbol\\n      timeframe\\n      open\\n      high\\n      low\\n      close\\n      trades\\n      volume\\n      vwap\\n      lastSize\\n      homeNotional\\n      foreignNotional\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Query } from \"react-apollo\";\nimport ReChart from \"./Tades/Trades\";\nimport Sidebar from \"../Menu/Menu\";\nimport gql from \"graphql-tag\";\nimport styled from \"styled-components\";\nimport { inject, observer } from \"mobx-react\";\nimport { ContainDiv, NextToDiv, NextToDivHeader, RowContainer, ContainDivHeader } from \"./Tades/Trades\";\nimport { equal } from \"fast-deep-equal\";\nimport ApiKeyForm from \"./AddApiForm\";\nimport TotalDat from \"./Dashboard\";\nimport TotalDat768 from \"./768px/DashboardTest\";\nimport { when, reaction } from \"mobx\";\nimport { getStateDate, makeDateDays, makeDateHrs } from \"../Helpers/Functions\";\nvar FetchQuery = (_dec = inject([\"store\"]), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$Component) {\n  _inherits(FetchQuery, _React$Component);\n\n  var _super = _createSuper(FetchQuery);\n\n  function FetchQuery(props) {\n    var _this;\n\n    _classCallCheck(this, FetchQuery);\n\n    _this = _super.call(this, props);\n\n    _this.clicked = function () {\n      store.isAuth = !store.isAuth;\n      console.log(store.isAuth);\n    };\n\n    _this.state = {\n      startDate: \"\",\n      endDate: \"\",\n      date: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(FetchQuery, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"loaded fetch query component\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var fetchTradeHistoryVariables = {\n        start: this.props.store.startDate,\n        end: this.props.store.endDate,\n        symbol: this.props.store.symbol\n      };\n      return __jsx(\"div\", null, __jsx(Comp, {\n        query: fetchTradeHistoryQuery,\n        vars: fetchTradeHistoryVariables\n      }));\n    }\n  }]);\n\n  return FetchQuery;\n}(React.Component), _temp)) || _class) || _class);\nvar Comp = (_dec2 = inject([\"store\"]), _dec2(_class3 = observer(_class3 = /*#__PURE__*/function (_React$Component2) {\n  _inherits(Comp, _React$Component2);\n\n  var _super2 = _createSuper(Comp);\n\n  function Comp(props) {\n    var _this2;\n\n    _classCallCheck(this, Comp);\n\n    _this2 = _super2.call(this, props);\n    _this2.state = {\n      width: 0\n    };\n    _this2.updateWindowDimensions = _this2.updateWindowDimensions.bind(_assertThisInitialized(_this2));\n    return _this2;\n  }\n\n  _createClass(Comp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      this.tempTagsReaction = reaction(function () {\n        return _this3.props.store.hasTempTags;\n      }, function (notifications, reaction) {\n        _this3.forceUpdate(console.log(\"FORCE UPDATE WAS CALLED\"));\n      });\n      this.updateWindowDimensions();\n      window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.tempTagsReaction();\n      window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"updateWindowDimensions\",\n    value: function updateWindowDimensions() {\n      console.log(window.innerWidth);\n      this.setState({\n        width: window.innerWidth\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      console.log(\"rerendered\");\n      return __jsx(Query, {\n        query: this.props.query,\n        variables: this.props.vars\n      }, function (_ref) {\n        var loading = _ref.loading,\n            error = _ref.error,\n            data = _ref.data;\n        if (error) return __jsx(\"div\", null, \"no data loaded\");\n        if (loading) return __jsx(\"div\", null, \"Loading\");\n\n        if (data.checkApiKey == false) {\n          return __jsx(ApiKeyForm, null);\n        } else if (data.checkApiKey == true) {\n          _this4.props.store.resetHasTempTags();\n\n          _this4.props.store.clearTempNotes();\n\n          _this4.props.store.clearTempTags();\n\n          _this4.props.store.resetPnl();\n\n          _this4.props.store.hasSingleTrade = false;\n\n          if (_this4.state.width > 768) {\n            return __jsx(TotalDat, {\n              data: data\n            });\n          } else {\n            return __jsx(TotalDat768, {\n              data: data\n            });\n          }\n        }\n      });\n    }\n  }]);\n\n  return Comp;\n}(React.Component)) || _class3) || _class3);\nexport default FetchQuery;\nvar fetchTradeHistoryQuery = gql(_templateObject());","map":null,"metadata":{},"sourceType":"module"}