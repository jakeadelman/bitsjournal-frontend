{"ast":null,"code":"var _dec, _class2;\n\nvar __jsx = React.createElement;\nimport styled from \"styled-components\";\nimport { ContainDiv, NextToDiv, NextToDivHeader, RowContainer, ContainDivHeader } from \"./Tades/Trades\";\nimport ReChart from \"./Tades/Trades\";\nimport Sidebar, { SymbolChooser, Pnl } from \"../Menu/Menu\";\nimport { getNewDat } from \"./shared/helpers\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { useState } from \"react\";\nimport Notes from \"./Notes/NotesTest\";\nimport Tabs from \"./Tabs\";\nimport { Nav, NavItem, Dropdown, DropdownItem, DropdownToggle, DropdownMenu, NavLink } from \"reactstrap\";\nimport { inject, observer } from \"mobx-react\";\nimport { when, reaction } from \"mobx\";\nimport { wideFont } from \"../shared/helpers\";\n\nlet _class = (_dec = inject(\"store\"), _dec(_class2 = observer(_class2 = class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      globalHash: [],\n      globalHashActive: [\"all\"],\n      data: null,\n      filteredData: null,\n      isSingle: false,\n      isSingleNotes: false\n    };\n    this.getGlobalHashtags = this.getGlobalHashtags.bind(this);\n    this.hashtagClicked = this.hashtagClicked.bind(this);\n    this.hashtagClickedBack = this.hashtagClickedBack.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({\n      data: this.props.data\n    });\n    this.getGlobalHashtags(this.props.data);\n  }\n\n  componentDidMount() {\n    this.singleTradeReaction = reaction(() => this.props.store.hasSingleTrade, (notifications, reaction) => {\n      console.log(\"HAS SINGLE\", this.props.store.hasSingleTrade);\n\n      if (this.props.store.hasSingleTrade == false) {\n        this.setState({\n          isSingle: false\n        });\n        console.log(\"setting back\");\n      } else {\n        this.setState({\n          isSingle: true,\n          singleTrade: this.props.store.singleTrade[0]\n        });\n        console.log(this.state, \"STATEE\");\n        console.log(\"setting back\");\n      }\n    });\n    this.singleNotesReaction = reaction(() => this.props.store.isSingleNotes, (notifications, reaction) => {\n      if (this.props.store.isSingleNotes == false) {\n        this.setState({\n          isSingleNotes: false\n        });\n      } else {\n        this.setState({\n          isSingleNotes: true\n        });\n      }\n    });\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({\n      width: window.innerWidth\n    });\n  }\n\n  async getGlobalHashtags(data) {\n    for (let i = 0; i < data.fetchTradeHistory.length; i++) {\n      let thisTradeHash = data.fetchTradeHistory[i].hashtags.split(\",\");\n\n      if (thisTradeHash != \"undefined\") {\n        for (let j = 0; j < thisTradeHash.length; j++) {\n          if (thisTradeHash[j] != \"undefined\") {\n            let newGlobalHash = this.state.globalHash;\n            newGlobalHash.push(thisTradeHash[j]);\n            this.setState({\n              globalHash: newGlobalHash\n            });\n          }\n        }\n      }\n    }\n  }\n\n  async hashtagClickedBack(value) {\n    if (value == \"all\") {\n      console.log(\"DO NOTHING\");\n    } else {\n      let newHashActive = [];\n      let newHash = this.state.globalHash;\n\n      for (let i = 0; i < this.state.globalHashActive.length; i++) {\n        if (value !== this.state.globalHashActive[i]) {\n          newHashActive.push(this.state.globalHashActive[i]);\n        } else {\n          newHash.push(this.state.globalHashActive[i]);\n        }\n\n        if (i == this.state.globalHashActive.length - 1) {\n          if (newHashActive[0] == undefined) {\n            let newHash2 = [];\n\n            for (let j = 0; j < newHash.length; j++) {\n              if (newHash[j] != \"all\") {\n                newHash2.push(newHash[j]);\n              }\n\n              if (j == newHash.length - 1) {\n                this.setState({\n                  globalHash: newHash2,\n                  globalHashActive: [\"all\"],\n                  filteredData: null\n                });\n              }\n            }\n          } else {\n            let newHash2 = [];\n\n            for (let j = 0; j < newHash.length; j++) {\n              if (newHash[j] != \"all\") {\n                newHash2.push(newHash[j]);\n              }\n\n              if (j == newHash.length - 1) {\n                getNewDat(this.state.data, newHashActive).then(res => {\n                  this.setState({\n                    globalHash: newHash2,\n                    globalHashActive: newHashActive,\n                    filteredData: res\n                  });\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  async hashtagClicked(value) {\n    if (value == \"all\") {\n      let newGlobalHash = this.state.globalHash;\n      let newGlobalHash2 = [];\n\n      for (let i = 0; i < this.state.globalHashActive.length; i++) {\n        newGlobalHash.push(this.state.globalHashActive[i]);\n\n        if (i == this.state.globalHashActive.length - 1) {\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (newGlobalHash[j] != \"all\") {\n              newGlobalHash2.push(newGlobalHash[j]);\n            }\n\n            if (j == newGlobalHash.length - 1) {\n              this.setState({\n                globalHash: newGlobalHash2,\n                globalHashActive: [\"all\"],\n                filteredData: null\n              });\n              return;\n            }\n          }\n        }\n      }\n    }\n\n    if (this.state.globalHashActive[0] == undefined) {\n      let newArray = [];\n      newArray.push(value);\n      this.setState({\n        globalHashActive: newArray\n      });\n      const index = this.state.globalHash.indexOf(value);\n\n      if (index > -1) {\n        let newGlobalHash = this.state.globalHash;\n        newGlobalHash.splice(index, 1);\n        this.setState({\n          globalHash: newGlobalHash\n        });\n      }\n\n      return;\n    }\n\n    for (let i = 0; i < this.state.globalHashActive.length; i++) {\n      if (this.state.globalHashActive[i] == \"all\") {\n        this.state.globalHashActive = [];\n        const index = this.state.globalHash.indexOf(value);\n\n        if (index > -1) {\n          let newGlobalHash = this.state.globalHash;\n          newGlobalHash.splice(index, 1);\n          let torf = false;\n\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (\"all\" == newGlobalHash[j]) {\n              torf = true;\n            }\n\n            if (j == newGlobalHash.length - 1 && torf == false) {\n              newGlobalHash.push(\"all\");\n            }\n          }\n\n          let newGlobalHashActive = this.state.globalHashActive;\n          newGlobalHashActive.push(value);\n          getNewDat(this.state.data, newGlobalHashActive).then(newDat => {\n            this.setState({\n              globalHashActive: newGlobalHashActive,\n              globalHash: newGlobalHash,\n              filteredData: newDat\n            });\n            return;\n          });\n        }\n      }\n\n      if (value == this.state.globalHashActive[i]) {\n        return;\n      }\n\n      if (i == this.state.globalHashActive.length - 1) {\n        const index = this.state.globalHash.indexOf(value);\n\n        if (index > -1) {\n          let newGlobalHash = this.state.globalHash;\n          newGlobalHash.splice(index, 1); // newGlobalHash.push(\"all\");\n\n          let torf = false;\n\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (\"all\" == newGlobalHash[j]) {\n              torf = true;\n            }\n\n            if (j == newGlobalHash.length - 1 && torf == false) {\n              newGlobalHash.push(\"all\");\n            }\n          }\n\n          let newGlobalHashActive = this.state.globalHashActive;\n          newGlobalHashActive.push(value);\n          getNewDat(this.state.data, newGlobalHashActive).then(newDat => {\n            this.setState({\n              globalHashActive: newGlobalHashActive,\n              globalHash: newGlobalHash,\n              filteredData: newDat\n            });\n            return;\n          });\n        }\n      }\n    }\n  }\n\n  render() {\n    if (this.state.data != null) {\n      if (this.state.isSingle == false) {\n        console.log(\"IS SINGLE IS FALSE\");\n        return __jsx(Wrapper, null, __jsx(ChartWrapper, null, __jsx(TopBarParent, null, __jsx(TopBarChildBigLeft, null, this.state.globalHashActive.map(hash => {\n          return __jsx(TopHashtagIndividualActive, {\n            onClick: () => this.hashtagClickedBack(hash)\n          }, \"#\", hash);\n        }), this.state.globalHash.map(hash => {\n          return __jsx(TopHashtagIndividual, {\n            onClick: () => this.hashtagClicked(hash)\n          }, \"#\", hash);\n        })), __jsx(TopBarChildSmall, null, __jsx(TopHashtagIndividualActivePnl, null, __jsx(Pnl, null))), __jsx(TopBarChildBigRight, null, __jsx(TopHashtagIndividualActiveRight, null, __jsx(SymbolChooser, null)))), __jsx(WholeGrid, null, this.state.isSingleNotes == false ? __jsx(ContainDivHeader, null, __jsx(NextToDivHeader, null, \"Start\"), __jsx(NextToDivHeader, null, \"End\"), __jsx(NextToDivHeader, null, \"L/S\"), __jsx(NextToDivHeader, null, \"Entry\"), __jsx(NextToDivHeader, null, \"Exit\"), __jsx(NextToDivHeader, null, \"Qty\"), __jsx(NextToDivHeader, null, \"RPNL\")) : null, __jsx(ReChart, {\n          data: this.state.data,\n          filteredData: this.state.filteredData,\n          initData: this.props.data\n        }))));\n      } else {\n        console.log(\"IS SINGLE IS TRUE\");\n        return __jsx(Wrapper, null, __jsx(ChartWrapper, null, __jsx(TopBarParent, null, __jsx(TopBarChildBigLeft, null, __jsx(Tabs, null)), __jsx(TopBarChildSmall, null, __jsx(TopHashtagIndividualActivePnl, null, __jsx(Pnl, null))), __jsx(TopBarChildBigRight, null, __jsx(RightTabs, null, __jsx(Notes, {\n          firstTrade: this.state.singleTrade\n        })))), __jsx(WholeGrid, null, this.state.isSingleNotes == false ? __jsx(ContainDivHeader, null, __jsx(NextToDivHeader, null, \"Start\"), __jsx(NextToDivHeader, null, \"End\"), __jsx(NextToDivHeader, null, \"L/S\"), __jsx(NextToDivHeader, null, \"Entry\"), __jsx(NextToDivHeader, null, \"Exit\"), __jsx(NextToDivHeader, null, \"Qty\"), __jsx(NextToDivHeader, null, \"RPNL\")) : null, __jsx(ReChart, {\n          data: this.state.data,\n          filteredData: this.state.filteredData,\n          initData: this.props.data\n        }))));\n      }\n    }\n  }\n\n}) || _class2) || _class2);\n\nexport { _class as default };\nconst SingleTabInner = styled.div.withConfig({\n  displayName: \"Dashboard__SingleTabInner\",\n  componentId: \"ij5648-0\"\n})([\"margin:auto;\"]);\nconst SingleTab = styled.div.withConfig({\n  displayName: \"Dashboard__SingleTab\",\n  componentId: \"ij5648-1\"\n})([\"color:\", \";background-color:\", \";margin:auto 10px;border-radius:2px;padding:5px;:hover{cursor:pointer;}\"], props => props.isActive ? \"#fff\" : \"#000\", props => props.isActive ? \"#000\" : \"#fff\");\nconst WrapTabs = styled.div.withConfig({\n  displayName: \"Dashboard__WrapTabs\",\n  componentId: \"ij5648-2\"\n})([\"display:flex;flex-direction:row;font-size:15px;\"]);\nconst WholeGrid = styled.div.withConfig({\n  displayName: \"Dashboard__WholeGrid\",\n  componentId: \"ij5648-3\"\n})([\"\"]); // border: 1px solid #f2f2f2;\n\nconst TopBarParent = styled.div.withConfig({\n  displayName: \"Dashboard__TopBarParent\",\n  componentId: \"ij5648-4\"\n})([\"display:flex;flex-direction:row;flex-wrap:wrap;margin-bottom:14px;\"]); // flex: 1 1 45%; /*grow | shrink | basis */\n\nconst TopBarChildBigLeft = styled.div.withConfig({\n  displayName: \"Dashboard__TopBarChildBigLeft\",\n  componentId: \"ij5648-5\"\n})([\"width:45%;display:flex;flex-direction:row;overflow:auto;\"]);\nconst TopBarChildBigRight = styled.div.withConfig({\n  displayName: \"Dashboard__TopBarChildBigRight\",\n  componentId: \"ij5648-6\"\n})([\"width:45%;display:flex;flex-direction:row;overflow:auto;\"]);\nconst TopBarChildSmall = styled.div.withConfig({\n  displayName: \"Dashboard__TopBarChildSmall\",\n  componentId: \"ij5648-7\"\n})([\"display:flex;flex-direction:row;width:10%;\"]);\nconst TopHashtagIndividual = styled.div.withConfig({\n  displayName: \"Dashboard__TopHashtagIndividual\",\n  componentId: \"ij5648-8\"\n})([\"background:#f8f8ff;color:#000;padding:8px;margin:0 10px;border-radius:2px;\", \":hover{cursor:pointer;}margin-left:0;white-space:nowrap;\"], wideFont);\nconst TopHashtagIndividualActive = styled.div.withConfig({\n  displayName: \"Dashboard__TopHashtagIndividualActive\",\n  componentId: \"ij5648-9\"\n})([\"background:#212528;color:#fff;padding:8px;margin:0 10px;border-radius:2px;\", \":hover{cursor:pointer;}margin-left:0;white-space:nowrap;\"], wideFont);\nconst TopHashtagIndividualActiveRight = styled.div.withConfig({\n  displayName: \"Dashboard__TopHashtagIndividualActiveRight\",\n  componentId: \"ij5648-10\"\n})([\"background:#212528;color:#fff;padding:8px;margin:0 10px;border-radius:2px;\", \" margin:0 auto;:hover{cursor:pointer;}margin-right:0;\"], wideFont);\nconst RightTabs = styled.div.withConfig({\n  displayName: \"Dashboard__RightTabs\",\n  componentId: \"ij5648-11\"\n})([\"color:#fff;margin:0 10px;border-radius:2px;\", \" margin:0 auto;:hover{cursor:pointer;}margin-right:0;\"], wideFont);\nconst TopHashtagIndividualActivePnl = styled.div.withConfig({\n  displayName: \"Dashboard__TopHashtagIndividualActivePnl\",\n  componentId: \"ij5648-12\"\n})([\"color:#fff;padding:0px;margin:0 10px;border-radius:2px;\", \":hover{cursor:pointer;}margin:auto;\"], wideFont);\nconst ChartWrapper = styled.div.withConfig({\n  displayName: \"Dashboard__ChartWrapper\",\n  componentId: \"ij5648-13\"\n})([\"background:white;padding:5px;width:100%;padding:10px;@media (max-width:768px){margin:0 5vw;}\"]);\nconst Wrapper = styled.div.withConfig({\n  displayName: \"Dashboard__Wrapper\",\n  componentId: \"ij5648-14\"\n})([\"display:flex;margin-top:5px;\"]);","map":null,"metadata":{},"sourceType":"module"}