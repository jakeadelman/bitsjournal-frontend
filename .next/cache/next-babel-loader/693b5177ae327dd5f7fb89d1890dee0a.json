{"ast":null,"code":"export async function calcTrades(inputData) {\n  // inputData = this.props.slic;\n  if (inputData[0].side == \"Buy\" && inputData[0].execType == \"Trade\") {\n    let avgBuyPrice = 0;\n    let avgSellPrice = 0;\n    let totBuyContracts = 0;\n    let totSellContracts = 0;\n    let buyNum = 0;\n    let sellNum = 0;\n    let totBuyContractsMult = 0;\n    let totSellContractsMult = 0;\n    let realQty = 0;\n    let totCommission = 0;\n\n    for (let i = 0; i < inputData.length; i++) {\n      // realQty = inputData[i].orderQty - inputData[i].leavesQty;\n      if (inputData[i].side == \"Buy\" && inputData[i].leavesQty == 0) {\n        buyNum += 1;\n        totBuyContracts += inputData[i].orderQty;\n        totBuyContractsMult += inputData[i].orderQty * parseFloat(inputData[i].price);\n      }\n\n      if (inputData[i].side == \"Sell\" && inputData[i].leavesQty == 0) {\n        sellNum += 1;\n        totSellContracts += inputData[i].orderQty;\n        totSellContractsMult += inputData[i].orderQty * parseFloat(inputData[i].price);\n      }\n\n      if (inputData[i].orderType == \"Limit\" && inputData[i].execType !== \"Funding\") {\n        totCommission += realQty * 0.0025 / inputData[i].price;\n      }\n\n      if (inputData[i].orderType == \"Market\") {\n        totCommission -= realQty * 0.0075 / inputData[i].price;\n      }\n\n      if (inputData[i].orderType.includes(\"Stop\")) {\n        totCommission -= realQty * 0.0075 / inputData[i].price;\n      }\n\n      if (i == inputData.length - 1) {\n        avgBuyPrice = totBuyContractsMult / totBuyContracts;\n        avgSellPrice = totSellContractsMult / totSellContracts;\n        let avgExit;\n        let avgEntry;\n\n        if (avgBuyPrice != null) {\n          avgEntry = avgBuyPrice;\n        } else {\n          avgEntry = 0;\n        }\n\n        if (avgSellPrice != null) {\n          avgExit = avgSellPrice;\n        } else {\n          avgExit = 0;\n        } // this.state.cumQty = totBuyContracts;\n\n\n        let thePnl = (1 / avgBuyPrice - 1 / avgSellPrice) * totSellContracts;\n\n        if (thePnl != null) {\n          let myPnl = thePnl + totCommission;\n          return new Promise(resolve => {\n            let end = {};\n            end[\"pnl\"] = myPnl;\n            end[\"avgEntryPrice\"] = avgEntry;\n            end[\"avgExitPrice\"] = avgExit;\n            end[\"cumQty\"] = totBuyContracts;\n            resolve(end);\n          }); //   store.addPnl(myPnl);\n        } else {\n          return new Promise(resolve => {\n            let end = {};\n            end[\"pnl\"] = 0;\n            end[\"avgEntryPrice\"] = avgEntry;\n            end[\"avgExitPrice\"] = avgExit;\n            end[\"cumQty\"] = totBuyContracts;\n            resolve(end);\n          });\n        }\n      }\n    }\n  }\n\n  if (inputData[0].side == \"Sell\" && inputData[0].execType == \"Trade\") {\n    let totBuyContracts = 0;\n    let totSellContracts = 0;\n    let buyNum = 0;\n    let sellNum = 0;\n    let totBuyContractsMult = 0;\n    let totSellContractsMult = 0;\n    let realQty = 0;\n    let totCommission = 0;\n\n    for (let i = 0; i < inputData.length; i++) {\n      // realQty = inputData[i].orderQty - inputData[i].leavesQty;\n      if (inputData[i].side == \"Buy\" && inputData[i].leavesQty == 0) {\n        // totBuyPrice += parseFloat(inputData[i].price);\n        buyNum += 1;\n        totBuyContracts += inputData[i].orderQty;\n        totBuyContractsMult += inputData[i].orderQty * parseFloat(inputData[i].price);\n\n        if (inputData[0].orderQty == 40000) {\n          console.log(\"BUY SIDE\", inputData[i], realQty, totSellContracts, totBuyContracts, totSellContractsMult);\n        }\n      }\n\n      if (inputData[i].side == \"Sell\" && inputData[i].leavesQty == 0) {\n        sellNum += 1;\n\n        if (i == 0) {\n          let difference = inputData[i].orderQty + inputData[i].currentQty;\n          let newRealQty = inputData[i].orderQty - difference;\n          totSellContracts += newRealQty;\n          totSellContractsMult += newRealQty * parseFloat(inputData[i].price);\n        } else {\n          totSellContracts += inputData[i].orderQty;\n          totSellContractsMult += inputData[i].orderQty * parseFloat(inputData[i].price);\n        }\n\n        if (inputData[0].orderQty == 40000) {\n          console.log(\"SELL SIDE\", inputData[i], realQty, totSellContracts, totBuyContracts, totSellContractsMult);\n        }\n      }\n\n      if (inputData[i].orderType == \"Limit\" && inputData[i].execType !== \"Funding\") {\n        totCommission += realQty * 0.0025 / inputData[i].price;\n      }\n\n      if (inputData[i].orderType == \"Market\") {\n        totCommission -= realQty * 0.0075 / inputData[i].price;\n      }\n\n      if (inputData[i].orderType.includes(\"Stop\")) {\n        totCommission -= realQty * 0.0075 / inputData[i].price;\n      }\n\n      if (i == inputData.length - 1) {\n        let avgBuyPrice = totBuyContractsMult / totBuyContracts;\n        let avgSellPrice = totSellContractsMult / totSellContracts;\n        let pnl = (1 / avgBuyPrice - 1 / avgSellPrice) * totBuyContracts;\n\n        if (inputData[0].orderQty == 40000) {\n          console.log(pnl, avgBuyPrice, avgSellPrice, totBuyContracts);\n        }\n\n        let avgEntry;\n        let avgExit;\n\n        if (avgBuyPrice != null) {\n          avgExit = avgBuyPrice;\n        } else {\n          avgExit = 0;\n        }\n\n        if (avgSellPrice != null) {\n          avgEntry = avgSellPrice;\n        } else {\n          avgEntry = 0;\n        }\n\n        if (pnl != null) {\n          let myPnl = pnl + totCommission;\n          return new Promise(resolve => {\n            let end = {};\n            end[\"pnl\"] = myPnl;\n            end[\"avgEntryPrice\"] = avgEntry;\n            end[\"avgExitPrice\"] = avgExit;\n            end[\"cumQty\"] = totSellContracts;\n\n            if (inputData[0].orderQty == 40000) {\n              console.log(end);\n            }\n\n            resolve(end);\n          });\n        } else {\n          return new Promise(resolve => {\n            let end = {};\n            end[\"pnl\"] = 0;\n            end[\"avgEntryPrice\"] = avgEntry;\n            end[\"avgExitPrice\"] = avgExit;\n            end[\"cumQty\"] = totSellContracts;\n            resolve(end);\n          });\n        }\n      }\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}