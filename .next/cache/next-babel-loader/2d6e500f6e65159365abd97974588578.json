{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nvar _dec, _class, _temp;\n\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { inject, observer } from \"mobx-react\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./datepicker-additional.css\";\nimport { reaction } from \"mobx\";\nvar Example = (_dec = inject([\"store\"]), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$Component) {\n  _inherits(Example, _React$Component);\n\n  var _super = _createSuper(Example);\n\n  function Example(props) {\n    var _this;\n\n    _classCallCheck(this, Example);\n\n    _this = _super.call(this, props);\n\n    _this.handleChange = function (date) {\n      _this.setState({\n        date: date\n      });\n\n      console.log(date, \"THIS IS DATE\");\n    };\n\n    _this.state = {\n      date: new Date()\n    };\n    return _this;\n  }\n\n  _createClass(Example, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {}\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.dateReaction = reaction(function () {\n        return _this2.props.store.startDate;\n      }, function (notifications, reaction) {\n        if (_this2.props.store.startDate !== null) {\n          if (_this2.props.start == true) {\n            _this2.setState({\n              date: new Date(_this2.props.store.startDate)\n            });\n          } else {\n            _this2.setState({\n              date: new Date(_this2.props.store.endDate)\n            });\n          }\n        }\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      console.log(\"just updated\");\n\n      if (this.props.set == true) {\n        console.log(\"not equal\");\n\n        if (this.props.start == true) {\n          console.log(\"was true\");\n          var firstDate = this.state.date.toISOString();\n          var multiDate = firstDate.split(\"T\");\n          this.props.store.startDate = multiDate[0] + \"T00:00:00.000Z\";\n          this.props.store.date = \"Custom\";\n        }\n\n        if (this.props.start == false) {\n          console.log(\"was false\");\n\n          var _firstDate = this.state.date.toISOString();\n\n          var _multiDate = _firstDate.split(\"T\");\n\n          this.props.store.endDate = _multiDate[0] + \"T24:00:00.000Z\";\n          console.log(this.props.store.endDate);\n          this.props.store.date = \"Custom\";\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(DatePicker, {\n        selected: this.state.date,\n        onChange: this.handleChange\n      });\n    }\n  }]);\n\n  return Example;\n}(React.Component), _temp)) || _class) || _class);\nexport { Example as default };","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/components/Menu/Datepicker.js"],"names":["React","DatePicker","inject","observer","reaction","Example","props","handleChange","date","setState","console","log","state","Date","dateReaction","store","startDate","notifications","start","endDate","prevProps","set","firstDate","toISOString","multiDate","split","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { inject, observer } from \"mobx-react\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./datepicker-additional.css\";\nimport { reaction } from \"mobx\";\n\n@inject([\"store\"])\n@observer\nexport default class Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n    };\n  }\n\n  componentWillMount() {}\n\n  componentDidMount() {\n    this.dateReaction = reaction(\n      () => this.props.store.startDate,\n      (notifications, reaction) => {\n        if (this.props.store.startDate !== null) {\n          if (this.props.start == true) {\n            this.setState({ date: new Date(this.props.store.startDate) });\n          } else {\n            this.setState({ date: new Date(this.props.store.endDate) });\n          }\n        }\n      }\n    );\n  }\n\n  handleChange = (date) => {\n    this.setState({ date: date });\n    console.log(date, \"THIS IS DATE\");\n  };\n\n  componentDidUpdate(prevProps) {\n    console.log(\"just updated\");\n    if (this.props.set == true) {\n      console.log(\"not equal\");\n      if (this.props.start == true) {\n        console.log(\"was true\");\n        let firstDate = this.state.date.toISOString();\n        let multiDate = firstDate.split(\"T\");\n        this.props.store.startDate = multiDate[0] + \"T00:00:00.000Z\";\n        this.props.store.date = \"Custom\";\n      }\n      if (this.props.start == false) {\n        console.log(\"was false\");\n        let firstDate = this.state.date.toISOString();\n        let multiDate = firstDate.split(\"T\");\n        this.props.store.endDate = multiDate[0] + \"T24:00:00.000Z\";\n        console.log(this.props.store.endDate);\n        this.props.store.date = \"Custom\";\n      }\n    }\n  }\n\n  render() {\n    return (\n      <DatePicker selected={this.state.date} onChange={this.handleChange} />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}