{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { format } from \"d3-format\";\nimport { timeFormat } from \"d3-time-format\";\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\nimport { CandlestickSeries, LineSeries } from \"react-stockcharts/lib/series\";\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\nimport { CrossHairCursor, EdgeIndicator, CurrentCoordinate, MouseCoordinateX, MouseCoordinateY } from \"react-stockcharts/lib/coordinates\";\nimport { timeCompare, getYRangeNums, findYValBuy, findYValSell } from \"./helpers\";\nimport { LabelAnnotation, Label, Annotate } from \"react-stockcharts/lib/annotation\";\nimport { discontinuousTimeScaleProvider } from \"react-stockcharts/lib/scale\";\nimport { OHLCTooltip, MovingAverageTooltip } from \"react-stockcharts/lib/tooltip\";\nimport { ema } from \"react-stockcharts/lib/indicator\";\nimport { fitWidth } from \"react-stockcharts/lib/helper\";\nimport { last } from \"react-stockcharts/lib/utils\";\n\nclass CandleStickChartWithAnnotation extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    let yRangeNums = getYRangeNums(this.props.data);\n    this.setState({\n      yRangeNums: yRangeNums\n    });\n  }\n\n  render() {\n    const margin = {\n      left: 20,\n      right: 50,\n      top: 30,\n      bottom: 30\n    };\n    const height = 400;\n    const {\n      type,\n      width,\n      ratio,\n      data: initialData\n    } = this.props;\n    const [yAxisLabelX, yAxisLabelY] = [width - margin.left - 40, (height - margin.top - margin.bottom) / 2];\n    const xScaleProvider = discontinuousTimeScaleProvider.inputDateAccessor(d => d.date);\n    const {\n      data,\n      xScale,\n      xAccessor,\n      displayXAccessor\n    } = xScaleProvider(initialData);\n    const start = xAccessor(last(data));\n    const end = xAccessor(data[Math.max(0, data.length - 150)]);\n    const xExtents = [start, end];\n\n    if (this.state == null) {\n      return __jsx(\"div\", null, \"Loading...\");\n    } // try {\n\n\n    return __jsx(ChartCanvas, {\n      height: height,\n      ratio: ratio,\n      width: width,\n      margin: margin,\n      type: type,\n      data: data,\n      xScale: xScale,\n      seriesName: \"BTC\",\n      xAccessor: xAccessor,\n      displayXAccessor: displayXAccessor,\n      xExtents: xExtents\n    }, __jsx(Chart, {\n      id: 1,\n      yExtents: [d => [d.high, d.low]],\n      padding: {\n        top: 80,\n        bottom: 80\n      }\n    }, __jsx(XAxis, {\n      axisAt: \"bottom\",\n      orient: \"bottom\"\n    }), __jsx(MouseCoordinateX, {\n      at: \"bottom\",\n      orient: \"bottom\",\n      displayFormat: timeFormat(\"%Y-%m-%d\")\n    }), __jsx(MouseCoordinateY, {\n      at: \"right\",\n      orient: \"right\",\n      displayFormat: format(\".2f\")\n    }), __jsx(YAxis, {\n      axisAt: \"right\",\n      orient: \"right\",\n      ticks: 5\n    }), __jsx(CandlestickSeries, null), __jsx(OHLCTooltip, {\n      origin: [-10, 0]\n    }), this.props.trades.map(each => {\n      // console.log(\n      //   \"mapping total length\" + this.props.trades.length.toString(),\n      //   each\n      // );\n      let datu = new Date(each.timestamp); // console.log(datu, this.props.timeframe);\n\n      if (each.side == \"Buy\") {\n        const annotationPropsUp = {\n          fontFamily: \"Glyphicons Halflings\",\n          fontSize: 15,\n          fill: \"#018001\",\n          // fill: rgba(1, 128, 1, 0.5),\n          opacity: 0.8,\n          text: \"▲\",\n          y: ({\n            yScale\n          }) => {\n            return yScale.range()[0] + 20; // return findYValBuy(\n            //   this.state.yRangeNums[0],\n            //   this.state.yRangeNums[1],\n            //   each.price\n            // );\n          },\n          onClick: console.log.bind(console),\n          tooltip: d => timeFormat(\"%B\")(d.date) // onMouseOver: console.log.bind(console),\n\n        };\n        return __jsx(Annotate, {\n          with: LabelAnnotation,\n          when: d => timeCompare(d, datu, this.props.timeframe),\n          usingProps: annotationPropsUp\n        });\n      } else if (each.side == \"Sell\") {\n        const annotationPropsDown = {\n          fontFamily: \"Glyphicons Halflings\",\n          fontSize: 15,\n          fill: \"#FF0000\",\n          opacity: 0.8,\n          text: \"▼\",\n          y: ({\n            yScale\n          }) => {\n            return yScale.range()[1] - 20; // return findYValSell(\n            //   this.state.yRangeNums[0],\n            //   this.state.yRangeNums[1],\n            //   each.price\n            // );\n          },\n          onClick: console.log.bind(console),\n          tooltip: d => timeFormat(\"%B\")(d.date) // onMouseOver: console.log.bind(console),\n\n        };\n        return __jsx(Annotate, {\n          with: LabelAnnotation,\n          when: d => timeCompare(d, datu, this.props.timeframe),\n          usingProps: annotationPropsDown\n        });\n      } else {\n        return;\n      }\n    })), __jsx(CrossHairCursor, {\n      strokeDasharray: \"LongDashDot\"\n    })); // } catch (err) {\n    //   return <div>no chart</div>;\n    // }\n  }\n\n}\n\nCandleStickChartWithAnnotation.defaultProps = {\n  type: \"svg\"\n};\nCandleStickChartWithAnnotation = fitWidth(CandleStickChartWithAnnotation);\nexport default CandleStickChartWithAnnotation;","map":null,"metadata":{},"sourceType":"module"}