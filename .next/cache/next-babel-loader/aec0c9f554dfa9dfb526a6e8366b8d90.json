{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { format } from \"d3-format\";\nimport { timeFormat } from \"d3-time-format\";\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\nimport { CandlestickSeries, LineSeries } from \"react-stockcharts/lib/series\";\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\nimport { CrossHairCursor, EdgeIndicator, CurrentCoordinate, MouseCoordinateX, MouseCoordinateY } from \"react-stockcharts/lib/coordinates\";\nimport { timeCompare, getYRangeNums, findYValBuy, findYValSell } from \"./helpers\";\nimport { LabelAnnotation, Label, Annotate } from \"react-stockcharts/lib/annotation\";\nimport { discontinuousTimeScaleProvider } from \"react-stockcharts/lib/scale\";\nimport { OHLCTooltip, MovingAverageTooltip } from \"react-stockcharts/lib/tooltip\";\nimport { ema } from \"react-stockcharts/lib/indicator\";\nimport { fitWidth } from \"react-stockcharts/lib/helper\";\nimport { last } from \"react-stockcharts/lib/utils\";\n\nvar CandleStickChartWithAnnotation = /*#__PURE__*/function (_React$Component) {\n  _inherits(CandleStickChartWithAnnotation, _React$Component);\n\n  var _super = _createSuper(CandleStickChartWithAnnotation);\n\n  function CandleStickChartWithAnnotation(props) {\n    _classCallCheck(this, CandleStickChartWithAnnotation);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(CandleStickChartWithAnnotation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var yRangeNums = getYRangeNums(this.props.data);\n      this.setState({\n        yRangeNums: yRangeNums\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var margin = {\n        left: 20,\n        right: 50,\n        top: 30,\n        bottom: 30\n      };\n      var height = 400;\n      var _this$props = this.props,\n          type = _this$props.type,\n          width = _this$props.width,\n          ratio = _this$props.ratio,\n          initialData = _this$props.data;\n      var yAxisLabelX = width - margin.left - 40,\n          yAxisLabelY = (height - margin.top - margin.bottom) / 2;\n      var xScaleProvider = discontinuousTimeScaleProvider.inputDateAccessor(function (d) {\n        return d.date;\n      });\n\n      var _xScaleProvider = xScaleProvider(initialData),\n          data = _xScaleProvider.data,\n          xScale = _xScaleProvider.xScale,\n          xAccessor = _xScaleProvider.xAccessor,\n          displayXAccessor = _xScaleProvider.displayXAccessor;\n\n      var start = xAccessor(last(data));\n      var end = xAccessor(data[Math.max(0, data.length - 150)]);\n      var xExtents = [start, end];\n\n      if (this.state == null) {\n        return __jsx(\"div\", null, \"Loading...\");\n      } // try {\n\n\n      return __jsx(ChartCanvas, {\n        height: height,\n        ratio: ratio,\n        width: width,\n        margin: margin,\n        type: type,\n        data: data,\n        xScale: xScale,\n        seriesName: \"BTC\",\n        xAccessor: xAccessor,\n        displayXAccessor: displayXAccessor,\n        xExtents: xExtents\n      }, __jsx(Chart, {\n        id: 1,\n        yExtents: [function (d) {\n          return [d.high, d.low];\n        }],\n        padding: {\n          top: 80,\n          bottom: 80\n        }\n      }, __jsx(XAxis, {\n        axisAt: \"bottom\",\n        orient: \"bottom\"\n      }), __jsx(MouseCoordinateX, {\n        at: \"bottom\",\n        orient: \"bottom\",\n        displayFormat: timeFormat(\"%Y-%m-%d\")\n      }), __jsx(MouseCoordinateY, {\n        at: \"right\",\n        orient: \"right\",\n        displayFormat: format(\".2f\")\n      }), __jsx(YAxis, {\n        axisAt: \"right\",\n        orient: \"right\",\n        ticks: 5\n      }), __jsx(CandlestickSeries, null), __jsx(OHLCTooltip, {\n        origin: [-10, 0]\n      }), this.props.trades.map(function (each) {\n        // console.log(\n        //   \"mapping total length\" + this.props.trades.length.toString(),\n        //   each\n        // );\n        var datu = new Date(each.timestamp); // console.log(datu, this.props.timeframe);\n\n        if (each.side == \"Buy\") {\n          var annotationPropsUp = {\n            fontFamily: \"Glyphicons Halflings\",\n            fontSize: 15,\n            fill: \"#018001\",\n            // fill: rgba(1, 128, 1, 0.5),\n            opacity: 0.8,\n            text: \"▲\",\n            y: function y(_ref) {\n              var yScale = _ref.yScale;\n              return yScale.range()[0] + 20; // return findYValBuy(\n              //   this.state.yRangeNums[0],\n              //   this.state.yRangeNums[1],\n              //   each.price\n              // );\n            },\n            onClick: console.log.bind(console),\n            tooltip: function tooltip(d) {\n              return timeFormat(\"%B\")(d.date);\n            } // onMouseOver: console.log.bind(console),\n\n          };\n          return __jsx(Annotate, {\n            \"with\": LabelAnnotation,\n            when: function when(d) {\n              return timeCompare(d, datu, _this.props.timeframe);\n            },\n            usingProps: annotationPropsUp\n          });\n        } else if (each.side == \"Sell\") {\n          var annotationPropsDown = {\n            fontFamily: \"Glyphicons Halflings\",\n            fontSize: 15,\n            fill: \"#FF0000\",\n            opacity: 0.8,\n            text: \"▼\",\n            y: function y(_ref2) {\n              var yScale = _ref2.yScale;\n              return yScale.range()[1] - 20; // return findYValSell(\n              //   this.state.yRangeNums[0],\n              //   this.state.yRangeNums[1],\n              //   each.price\n              // );\n            },\n            onClick: console.log.bind(console),\n            tooltip: function tooltip(d) {\n              return timeFormat(\"%B\")(d.date);\n            } // onMouseOver: console.log.bind(console),\n\n          };\n          return __jsx(Annotate, {\n            \"with\": LabelAnnotation,\n            when: function when(d) {\n              return timeCompare(d, datu, _this.props.timeframe);\n            },\n            usingProps: annotationPropsDown\n          });\n        } else {\n          return;\n        }\n      })), __jsx(CrossHairCursor, {\n        strokeDasharray: \"LongDashDot\"\n      })); // } catch (err) {\n      //   return <div>no chart</div>;\n      // }\n    }\n  }]);\n\n  return CandleStickChartWithAnnotation;\n}(React.Component);\n\nCandleStickChartWithAnnotation.defaultProps = {\n  type: \"svg\"\n};\nCandleStickChartWithAnnotation = fitWidth(CandleStickChartWithAnnotation);\nexport default CandleStickChartWithAnnotation;","map":null,"metadata":{},"sourceType":"module"}