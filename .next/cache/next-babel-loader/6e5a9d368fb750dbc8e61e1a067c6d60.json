{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport App, { Container } from \"next/app\";\nimport React from \"react\";\nimport withApolloClient from \"../lib/with-apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { Provider } from \"mobx-react\";\nimport { initializeStore, hydrate } from \"../stores/store\";\nimport \"../components/Header/header.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../styles.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"../components/Menu/datepicker-additional.css\";\n\nclass MyApp extends App {\n  static async getInitialProps(appContext) {\n    // Get or Create the store with `undefined` as initialState\n    // This allows you to set a custom default initialState\n    const mobxStore = initializeStore(); // Provide the store to getInitialProps of pages\n\n    appContext.ctx.mobxStore = mobxStore;\n    let appProps = await App.getInitialProps(appContext);\n    return _objectSpread(_objectSpread({}, appProps), {}, {\n      initialMobxState: mobxStore\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    const isServer = !false;\n    this.mobxStore = isServer ? props.initialMobxState : initializeStore(props.initialMobxState);\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      apolloClient\n    } = this.props;\n    return __jsx(Container, null, __jsx(ApolloProvider, {\n      client: apolloClient\n    }, __jsx(Provider, {\n      store: this.mobxStore\n    }, __jsx(Component, pageProps))));\n  }\n\n}\n\nexport default withApolloClient(MyApp);","map":null,"metadata":{},"sourceType":"module"}