{"ast":null,"code":"var _dec, _class;\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport theme from \"../theme\";\nimport FetchQuery from \"./FetchQuery\";\nimport Router from \"next/router\";\nimport { inject, observer } from \"mobx-react\";\nimport { Store, hydrate } from \"../../stores/store\";\nimport { getStateDate } from \"../Helpers/Functions\";\n\nconst Cookie = require(\"js-cookie\");\n\nlet DashInitialTerms = (_dec = inject(\"store\"), _dec(_class = observer(_class = class DashInitialTerms extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      start: null\n    };\n  }\n\n  componentDidMount() {\n    let cook = Cookie.get(\"isAuth\") == \"true\";\n\n    if (!cook) {\n      Router.push(\"/\");\n    } else if (!!cook) {\n      this.setState({\n        isAuth: cook\n      });\n    }\n\n    if (this.props.store.startDate == null) {\n      let dates = getStateDate(\"This Week\");\n      this.props.store.startDate = dates.start;\n      this.props.store.endDate = dates.end;\n      this.setState({\n        start: true\n      });\n    }\n  }\n\n  render() {\n    if (this.state.start !== null) {\n      return __jsx(ThemeProvider, {\n        theme: theme(false)\n      }, __jsx(\"div\", {\n        style: {\n          width: \"100%\"\n        }\n      }, __jsx(FetchQuery, null)));\n    } else {\n      return __jsx(\"div\", null, \"loading\");\n    }\n  }\n\n}) || _class) || _class);\nexport { DashInitialTerms as default };","map":{"version":3,"sources":["/Users/manx/projects-2/bitsjournal/frontend/components/Dashboard/FetchQueryContainer.js"],"names":["React","styled","ThemeProvider","theme","FetchQuery","Router","inject","observer","Store","hydrate","getStateDate","Cookie","require","DashInitialTerms","Component","constructor","props","state","start","componentDidMount","cook","get","push","setState","isAuth","store","startDate","dates","endDate","end","render","width"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,IAAiBC,aAAjB,QAAsC,mBAAtC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC;AACA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,oBAA/B;AACA,SAASC,YAAT,QAA6B,sBAA7B;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;IAIqBC,gB,WAFpBP,MAAM,CAAC,OAAD,C,gBACNC,Q,UADD,MAEqBM,gBAFrB,SAE8Cb,KAAK,CAACc,SAFpD,CAE8D;AAC5DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,IAAI,GAAGT,MAAM,CAACU,GAAP,CAAW,QAAX,KAAwB,MAAnC;;AACA,QAAI,CAACD,IAAL,EAAW;AACTf,MAAAA,MAAM,CAACiB,IAAP,CAAY,GAAZ;AACD,KAFD,MAEO,IAAI,CAAC,CAACF,IAAN,EAAY;AACjB,WAAKG,QAAL,CAAc;AAAEC,QAAAA,MAAM,EAAEJ;AAAV,OAAd;AACD;;AACD,QAAI,KAAKJ,KAAL,CAAWS,KAAX,CAAiBC,SAAjB,IAA8B,IAAlC,EAAwC;AACtC,UAAIC,KAAK,GAAGjB,YAAY,CAAC,WAAD,CAAxB;AACA,WAAKM,KAAL,CAAWS,KAAX,CAAiBC,SAAjB,GAA6BC,KAAK,CAACT,KAAnC;AACA,WAAKF,KAAL,CAAWS,KAAX,CAAiBG,OAAjB,GAA2BD,KAAK,CAACE,GAAjC;AACA,WAAKN,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAAE;AAAT,OAAd;AACD;AACF;;AAEDY,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKb,KAAL,CAAWC,KAAX,KAAqB,IAAzB,EAA+B;AAC7B,aACE,MAAC,aAAD;AAAe,QAAA,KAAK,EAAEf,KAAK,CAAC,KAAD;AAA3B,SACE;AAAK,QAAA,KAAK,EAAE;AAAE4B,UAAAA,KAAK,EAAE;AAAT;AAAZ,SACE,MAAC,UAAD,OADF,CADF,CADF;AAOD,KARD,MAQO;AACL,aAAO,6BAAP;AACD;AACF;;AAnC2D,C;SAAzClB,gB","sourcesContent":["import React from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport theme from \"../theme\";\nimport FetchQuery from \"./FetchQuery\";\nimport Router from \"next/router\";\nimport { inject, observer } from \"mobx-react\";\nimport { Store, hydrate } from \"../../stores/store\";\nimport { getStateDate } from \"../Helpers/Functions\";\n\nconst Cookie = require(\"js-cookie\");\n\n@inject(\"store\")\n@observer\nexport default class DashInitialTerms extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      start: null,\n    };\n  }\n\n  componentDidMount() {\n    let cook = Cookie.get(\"isAuth\") == \"true\";\n    if (!cook) {\n      Router.push(\"/\");\n    } else if (!!cook) {\n      this.setState({ isAuth: cook });\n    }\n    if (this.props.store.startDate == null) {\n      let dates = getStateDate(\"This Week\");\n      this.props.store.startDate = dates.start;\n      this.props.store.endDate = dates.end;\n      this.setState({ start: true });\n    }\n  }\n\n  render() {\n    if (this.state.start !== null) {\n      return (\n        <ThemeProvider theme={theme(false)}>\n          <div style={{ width: \"100%\" }}>\n            <FetchQuery />\n          </div>\n        </ThemeProvider>\n      );\n    } else {\n      return <div>loading</div>;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}