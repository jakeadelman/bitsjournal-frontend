{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.3d9e28d7772e0f0d8955.hot-update.js","sources":["webpack:///./components/Charts/ReChart.js"],"sourcesContent":["import React, { PureComponent, Component } from \"react\";\nimport {\n  LineChart,\n  AreaChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend\n} from \"recharts\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { wideFont } from \"../shared/helpers\";\nimport theme from \"../theme\";\nimport { formatDateMonthOnly } from \"../Helpers/Functions.js\";\n\nexport default class Example extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { width: 0, height: 0, data: [], fullTrades: [] };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.data.fetchTradeHistory.map(dat => {\n      this.state.data.unshift(dat);\n    });\n    console.log(this.state);\n\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n\n    this.state.data.map((dat, i) => {\n      if (dat.trdStart == true) {\n        let sliced = this.state.data.slice(i, this.state.data.length);\n        console.log(sliced);\n        for (let i = 0; i < sliced.length; i++) {\n          if (sliced[i].trdEnd == true) {\n            let newsliced = sliced.slice(0, i + 1);\n            this.state.fullTrades.push(newsliced);\n\n            break;\n          }\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    if (window.innerWidth < 768) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.9\n      });\n    } else if (window.innerWidth < 1024) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.9 - 179\n      });\n    } else if (window.innerWidth >= 1024) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.8 - 179\n      });\n    }\n  }\n\n  render() {\n    return (\n      <ThemeProvider theme={theme(false)}>\n        <div style={{ minWidth: this.state.chartWidth }}>\n          {this.state.fullTrades.map((slic, i) => {\n            return <MakeCol slic={slic} />;\n          })}\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n\nclass MakeCol extends Component {\n  state = {\n    data: [],\n    pnl: 0,\n    avgEntryPrice: 0,\n    avgExitPrice: 0,\n    clicked: false\n  };\n  constructor(props) {\n    super(props);\n  }\n  // componentDidMount() {\n  //   console.log(this.state);\n  // }\n  componentDidMount() {\n    console.log(this.state);\n  }\n\n  componentWillMount() {\n    this.state.data = this.props.slic;\n    if (this.state.data[0].side == \"Buy\") {\n      let avgBuyPrice = 0;\n      let avgSellPrice = 0;\n      let totBuyContracts = 0;\n      let totSellContracts = 0;\n      let buyNum = 0;\n      let sellNum = 0;\n      let totBuyContractsMult = 0;\n      let totSellContractsMult = 0;\n      for (let i = 0; i < this.state.data.length; i++) {\n        if (this.state.data[i].side == \"Buy\") {\n          // totBuyPrice += parseFloat(this.state.data[i].price);\n          buyNum += 1;\n          totBuyContracts += this.state.data[i].orderQty;\n          totBuyContractsMult +=\n            this.state.data[i].orderQty * parseFloat(this.state.data[i].price);\n        }\n        if (this.state.data[i].side == \"Sell\") {\n          sellNum += 1;\n          totSellContracts += this.state.data[i].orderQty;\n          totSellContractsMult +=\n            this.state.data[i].orderQty * parseFloat(this.state.data[i].price);\n        }\n        if (i == this.state.data.length - 1) {\n          avgBuyPrice = totBuyContractsMult / totBuyContracts;\n          avgSellPrice = totSellContractsMult / totSellContracts;\n          this.state.avgEntryPrice = avgBuyPrice;\n          this.state.avgExitPrice = avgSellPrice;\n          this.state.pnl =\n            (1 / avgBuyPrice - 1 / avgSellPrice) * totSellContracts;\n        }\n      }\n    }\n    if (this.state.data[0].side == \"Sell\") {\n      // let avgBuyPrice = 0;\n      // let avgSellPrice = 0;\n      let totBuyContracts = 0;\n      let totSellContracts = 0;\n      let buyNum = 0;\n      let sellNum = 0;\n      let totBuyContractsMult = 0;\n      let totSellContractsMult = 0;\n      for (let i = 0; i < this.state.data.length; i++) {\n        if (this.state.data[i].side == \"Buy\") {\n          // totBuyPrice += parseFloat(this.state.data[i].price);\n          buyNum += 1;\n          totBuyContracts += this.state.data[i].orderQty;\n          totBuyContractsMult +=\n            this.state.data[i].orderQty * parseFloat(this.state.data[i].price);\n        }\n        if (this.state.data[i].side == \"Sell\") {\n          sellNum += 1;\n          totSellContracts += this.state.data[i].orderQty;\n          totSellContractsMult +=\n            this.state.data[i].orderQty * parseFloat(this.state.data[i].price);\n        }\n        if (i == this.state.data.length - 1) {\n          console.log(totBuyContracts, totBuyContractsMult);\n          console.log(totSellContracts, totSellContractsMult);\n          let avgBuyPrice = totBuyContractsMult / totBuyContracts;\n          let avgSellPrice = totSellContractsMult / totSellContracts;\n          let pnl = (1 / avgBuyPrice - 1 / avgSellPrice) * totBuyContracts;\n          // console.log(pnl, totBuyContractsMult, totBuyContracts);\n          this.state.avgEntryPrice = avgBuyPrice;\n          this.state.avgExitPrice = avgSellPrice;\n          this.state.pnl = pnl;\n        }\n      }\n    }\n  }\n\n  clicked() {\n    console.log(this.state);\n    if (this.state.clicked == false) {\n      this.setState({ clicked: true });\n    } else {\n      this.setState({ clicked: false });\n    }\n  }\n\n  render() {\n    if (this.state.clicked == false) {\n      return (\n        <ContainDiv onClick={this.clicked.bind(this)}>\n          <NextToDiv>\n            {formatDateMonthOnly(this.state.data[0].timestamp)}\n          </NextToDiv>\n          <NextToDiv>\n            {formatDateMonthOnly(\n              this.state.data[this.state.data.length - 1].timestamp\n            )}\n          </NextToDiv>\n          <IsShort side={this.state.data[0].side} />\n          <NextToDiv>${this.state.avgEntryPrice.toFixed(1)}</NextToDiv>\n          <NextToDiv>${this.state.avgExitPrice.toFixed(1)}</NextToDiv>\n          <NextToDiv>{this.state.pnl.toFixed(4) + \"xbt\"}</NextToDiv>\n        </ContainDiv>\n      );\n    } else {\n      return (\n        <div>\n          <ContainDivClicked onClick={this.clicked.bind(this)}>\n            <NextToDiv>\n              {formatDateMonthOnly(this.state.data[0].timestamp)}\n            </NextToDiv>\n            <NextToDiv>\n              {formatDateMonthOnly(\n                this.state.data[this.state.data.length - 1].timestamp\n              )}\n            </NextToDiv>\n            <IsShort side={this.state.data[0].side} />\n            <NextToDiv>${this.state.avgEntryPrice.toFixed(1)}</NextToDiv>\n            <NextToDiv>${this.state.avgExitPrice.toFixed(1)}</NextToDiv>\n            <NextToDiv>{this.state.pnl.toFixed(4) + \"xbt\"}</NextToDiv>\n          </ContainDivClicked>\n          <ContainDivBlack>\n            <NextToDivBlack>Side</NextToDivBlack>\n            <NextToDivBlack>Price</NextToDivBlack>\n            <NextToDivBlack>Order Qty</NextToDivBlack>\n            <NextToDivBlack>Commission</NextToDivBlack>\n          </ContainDivBlack>\n\n          {this.state.data.map(dat => {\n            return (\n              <ContainDivBlack onClick={this.clicked.bind(this)}>\n                <NextToDivBlack>{dat.side}</NextToDivBlack>\n                <NextToDivBlack>${dat.price.toString()}</NextToDivBlack>\n                <NextToDivBlack>{dat.orderQty.toString()}</NextToDivBlack>\n                <NextToDivBlack>{dat.commission}</NextToDivBlack>\n              </ContainDivBlack>\n            );\n          })}\n        </div>\n      );\n    }\n  }\n}\n\nclass IsShort extends Component {\n  render() {\n    if (this.props.side == \"Sell\") {\n      return <NextToDiv>Short</NextToDiv>;\n    } else {\n      return <NextToDiv>Long</NextToDiv>;\n    }\n  }\n}\n\nexport const ContainDiv = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  height: 52px;\n\n  border-bottom: 1px solid #d3d3d3;\n  &:hover {\n    border-left: 1px solid black;\n    cursor: pointer;\n  }\n`;\nexport const ContainDivClicked = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  height: 52px;\n\n  border-bottom: 1px solid #d3d3d3;\n\n  border-left: 5px solid black;\n  cursor: pointer;\n`;\nexport const ContainDivBlack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  height: 42px;\n  background: #f8f8ff;\n\n  border-bottom: 1px solid #f2f2f2;\n`;\nexport const ContainDivHeader = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  height: 52px;\n  border-bottom: 1px solid #d3d3d3;\n`;\n\nexport const NextToDiv = styled.div`\n  display: inline-block;\n  width: 30%;\n  padding: 10px;\n  padding-left: 12px;\n`;\n\nexport const NextToDivBlack = styled.div`\n  display: inline-block;\n  width: 30%;\n  padding: 5px;\n  padding-left: 12px;\n`;\nexport const NextToDivHeader = styled.div`\n  display: inline-block;\n  width: 30%;\n  color: #78838e;\n  font-weight: 600;\n  display: inline-block;\n  text-transform: uppercase;\n  padding: 10px;\n  padding-left: 12px;\n`;\n\n// const renderLegend = props => {\n//   const { payload } = props;\n//   // console.log(payload);\n\n//   return (\n//     <StyledUl>\n//       {payload.map((entry, index) => (\n//         <li key={`item-${index}`} style={{ display: \"flex\", margin: \"auto\" }}>\n//           <Sv color={entry.color} />\n//           <div style={{ marginLeft: \"7px\" }}>{entry.value}</div>\n//         </li>\n//       ))}\n//     </StyledUl>\n//   );\n// };\n\n// const StyledUl = styled.ul`\n//   display: flex;\n//   font-size: 16px;\n//   text-decoration: none;\n//   margin-left: 60px;\n//   list-style: none;\n//   text-align: center;\n//   color: ${props => props.theme.normalText};\n// `;\n\n// const Sv = ({ color }) => (\n//   <svg width=\"10\" height=\"10\" style={{ marginTop: \"8px\" }}>\n//     <rect width=\"10\" height=\"10\" fill={color} />\n//   </svg>\n// );\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAIA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAIA;;;;AApEA;AACA;AADA;AACA;AAsEA;;;;;AAQA;AAAA;AACA;AADA;AACA;AAAA;AADA;AANA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AAEA;AACA;AACA;AACA;;;AADA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AASA;AAAA;AAMA;AACA;AAEA;AAAA;AASA;AAAA;AAaA;AACA;AAAA;AAOA;AAGA;AACA;;;;AA3JA;AACA;AA6JA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAPA;AACA;AASA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}