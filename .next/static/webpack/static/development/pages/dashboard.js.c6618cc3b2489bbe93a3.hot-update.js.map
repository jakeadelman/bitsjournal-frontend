{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.c6618cc3b2489bbe93a3.hot-update.js","sources":["webpack:///./components/Dashboard/DashInitialTerms.js"],"sourcesContent":["import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport DashMain from \"./DashMain\";\nimport App from \"../App\";\nimport Header from \"../Header2\";\nimport AddTerm from \"./AddTerm\";\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport theme from \"../theme\";\nimport AreaChart from \"../Charts/AreaChart\";\nimport AxisChart from \"../Charts/AxisChart\";\nimport NewChart from \"../Charts/NewChart\";\nimport ScreenSize from \"./Window\";\nimport windowSize from \"react-window-size\";\nimport BtcChart from \"../Charts/BtcChart\";\nimport Currency from \"../Charts/Currency\";\nimport ReChart from \"../Charts/ReChart\";\n// import SentimentModule from \"./SentimentModule\";\n\nclass DashInitialTerms extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allTerms: []\n    };\n    this.toggleTerm = this.toggleTerm.bind(this);\n    this.mapTerms = this.mapTerms.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  toggleTerm(term) {\n    this.setState({ term: term });\n    console.log(this.state);\n  }\n\n  mapTerms(allterms) {\n    allterms.map(term => {\n      this.state.allTerms.push(term.term);\n    });\n  }\n\n  handleClick(e) {\n    // console.log(e.target.value);\n    this.setState({ term: e.target.value });\n    console.log(this.state);\n  }\n\n  render() {\n    let marg = {\n      left: 20,\n      right: 20,\n      top: 20,\n      bottom: 20\n    };\n    return (\n      <Query query={fetchTweetsQuery}>\n        {({ loading, error, data }) => {\n          if (error) return <div>no data loaded</div>;\n          if (loading) return <div>Loading</div>;\n\n          if (!this.state.allTerms[0]) {\n            this.toggleTerm(data.fetchTerms[0].term);\n            this.mapTerms(data.fetchTerms);\n            return <div>loading</div>;\n          }\n          return (\n            <Wrapper>\n              <ReChart />\n              <div style={{ width: \"100px\" }}>This is a random div</div>\n            </Wrapper>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\n// .outer-sent {\n//   display: inline-block;\n//   float: left;\n// }\n\nexport const fetchTweetsQuery = gql`\n  query fetchTerms {\n    fetchTerms {\n      id\n      term\n    }\n  }\n`;\n\nexport default DashInitialTerms;\n\n// export default () => (\n//   <App>\n//     <Header />\n//     <DashInitialTerms />\n//   </App>\n// );\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: flex-start;\n  margin: 0 10vw 0 10vw;\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAPA;AAQA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;;;;AAvDA;AA2DA;AACA;AACA;AACA;AACA;AAAA;AASA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}