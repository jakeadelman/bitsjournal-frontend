{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.a283526356ea59367d36.hot-update.js","sources":["webpack:///./components/Dashboard/FetchQuery.js"],"sourcesContent":["import { Query } from \"react-apollo\";\nimport ReChart from \"../Charts/ReChart\";\nimport Sidebar from \"../Categories/Menu\";\nimport gql from \"graphql-tag\";\nimport styled from \"styled-components\";\nimport { inject, observer } from \"mobx-react\";\nimport {\n  ContainDiv,\n  NextToDiv,\n  NextToDivHeader,\n  RowContainer,\n  ContainDivHeader\n} from \"../Charts/ReChart\";\nimport { getStateDate } from \"../Helpers/Functions\";\nimport { equal } from \"fast-deep-equal\";\n// import { useState, useEffect } from \"react\";\n\n// import { storesContext } from \"../../stores/UserStore\";\n\n@inject(\"store\")\n@observer\nclass FetchQuery extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { startDate: \"\", endDate: \"\", date: \"\" };\n  }\n\n  componentDidMount() {\n    // console.log(this.props.store.date);\n    let myStore = this.props.store;\n    console.log(myStore.date);\n    let dates = getStateDate(myStore.date);\n    console.log(dates);\n    this.setState({\n      startDate: dates.start,\n      endDate: dates.end,\n      date: this.props.store.date\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(\"updated\");\n    if (this.props.store.date != prevProps.store.date) {\n      // Check if it's a new user, you can also use some unique property, like the ID  (this.props.user.id !== prevProps.user.id)\n      let dates = getStateDate(this.props.store.date);\n      console.log(dates);\n      this.setState({\n        startDate: dates.start,\n        endDate: dates.end,\n        date: this.props.store.date\n      });\n    }\n  }\n\n  clicked = () => {\n    store.isAuth = !store.isAuth;\n    console.log(store.isAuth);\n  };\n\n  render() {\n    // let fetchTradeHistoryVariables = {\n    //   start: this.state.startDate,\n    //   end: this.state.endDate\n    // };\n    let fetchTradeHistoryVariables = {\n      start: \"2020-02-15T12:43:56.702Z\",\n      end: \"2020-02-16T15:01:59.727Z\"\n    };\n    return (\n      <div>\n        <Comp\n          query={fetchTradeHistoryQuery}\n          vars={fetchTradeHistoryVariables}\n        />\n      </div>\n    );\n  }\n}\n\n// const FetchQuery = inject(\"store\")(\n//   observer(({ store }) => {\n//     // if (store) {\n//     // const [startDate, setStartDate] = useState();\n//     // const [endDate, setEndDate] = useState();\n//     // const [myStore, setStore] = useState();\n\n//     // useEffect(() => {\n//     //   setStore(store);\n//     //   let dates = getStateDate(myStore.date);\n//     //   setStartDate(dates.start);\n//     //   setEndDate(dates.end);\n//     // }, []);\n\n//     const clicked = () => {\n//       store.isAuth = !store.isAuth;\n//       console.log(store.isAuth);\n//     };\n\n//     // let fetchTradeHistoryVariables = {\n//     //   start: \"2020-01-14T12:43:56.702Z\",\n//     //   end: \"2020-01-14T15:01:59.727Z\"\n//     // };\n\n//     if (dates) {\n//       let fetchTradeHistoryVariables = {\n//         start: dates.start,\n//         end: dates.end\n//       };\n//     }\n//     return (\n//       <div>\n//         <Comp\n//           query={fetchTradeHistoryQuery}\n//           vars={fetchTradeHistoryVariables}\n//         />\n//       </div>\n//     );\n//   })\n// );\n\nclass Comp extends React.Component {\n  render() {\n    return (\n      <Query query={this.props.query} variables={this.props.vars}>\n        {({ loading, error, data }) => {\n          console.log(data);\n          if (error) return <div>no data loaded</div>;\n          if (loading) return <div>Loading</div>;\n\n          return (\n            <Wrapper>\n              <ChartWrapper>\n                <ContainDivHeader>\n                  <NextToDivHeader>Start</NextToDivHeader>\n                  <NextToDivHeader>End</NextToDivHeader>\n                  <NextToDivHeader>Direction</NextToDivHeader>\n                  <NextToDivHeader>Avg Entry Price</NextToDivHeader>\n                  <NextToDivHeader>Avg Exit Price</NextToDivHeader>\n                  <NextToDivHeader>Realized Pnl</NextToDivHeader>\n                </ContainDivHeader>\n                <ReChart data={data} />\n              </ChartWrapper>\n              <Sidebar />\n            </Wrapper>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default FetchQuery;\n\nconst fetchTradeHistoryQuery = gql`\n  query fetchTradeHistory($start: String!, $end: String!) {\n    fetchTradeHistory(start: $start, end: $end) {\n      id\n      timestamp\n      side\n      price\n      orderQty\n      leavesQty\n      currentQty\n      avgEntryPrice\n      execGrossPnl\n      realizedPnl\n      commission\n      trdStart\n      trdEnd\n    }\n  }\n`;\n\nconst ChartWrapper = styled.div`\n  background: white;\n  padding: 5px;\n  width: 100%;\n  @media (max-width: 768px) {\n    margin: 0 5vw;\n  }\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: flex-align;\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAGA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiCA;AACA;AACA;AACA;AAlCA;AAAA;AAAA;AAAA;AAAA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAGA;AACA;AAFA;AAMA;;;;AAvDA;AA2DA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAWA;AAAA;AAKA;AAGA;;;;AA5BA;AACA;AA8BA;AAEA;AAoBA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}