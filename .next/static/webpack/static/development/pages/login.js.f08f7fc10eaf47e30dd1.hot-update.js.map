{"version":3,"file":"static/webpack/static/development/pages/login.js.f08f7fc10eaf47e30dd1.hot-update.js","sources":["webpack:///./components/LoginForm2.js"],"sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport { Alert } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { observer } from \"mobx-react-lite\";\nimport { UserStoreContext } from \"../stores/UserStore.ts\";\nimport styled from \"styled-components\";\nimport FormWrapper from \"./Form2/FormWrapper\";\nimport Input from \"./Form2/Input\";\nimport Form from \"./form/Form\";\n\nconst LoginForm = observer(() => {\n  const userStore = useContext(UserStoreContext);\n\n  async function handleSubmit(event, client) {\n    event.preventDefault();\n    const form = event.target;\n    const formData = new window.FormData(form);\n    const email = formData.get(\"email\");\n    const password = formData.get(\"password\");\n    form.reset();\n\n    let res = client.mutate({\n      mutation: gql`\n        mutation login($email: String!, $password: String!) {\n          login(email: $email, password: $password)\n        }\n      `,\n      variables: { email, password }\n    });\n\n    //check if login credentials are correct\n    let r = await res;\n    r = r.data.login;\n    let isTrue = r == \"true\";\n    if (isTrue == true) {\n      userStore.isAuth = true;\n      Router.push(\"/dashboard\");\n    } else {\n      setWrongCredentials(true);\n      return;\n    }\n  }\n\n  const [wrongCredentials, setWrongCredentials] = useState(false);\n\n  return (\n    <ApolloConsumer>\n      {client => (\n        <div>\n          <form>\n            <h1>Login</h1>\n            <InputWrapper>\n              <Label>{field.label}</Label>\n              {field.meta.touched && field.meta.error && (\n                <Error>{field.meta.error}</Error>\n              )}\n              <Input\n                {...field.input}\n                error={field.meta.touched && !!field.meta.error}\n                type={field.type}\n                placeholder={field.label}\n                autoComplete=\"off\"\n              />\n            </InputWrapper>\n            <button type=\"submit\">Submit</button>\n            {wrongCredentials == true ? (\n              <div className=\"login-alert\">\n                <Alert\n                  color=\"secondary\"\n                  isOpen={wrongCredentials == true ? true : false}\n                >\n                  Wrong login credentials\n                </Alert>\n              </div>\n            ) : null}\n          </form>\n        </div>\n      )}\n    </ApolloConsumer>\n  );\n});\n\nexport default LoginForm;\n\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  ${props =>\n    props.loading &&\n    \"filter: grayscale(0.5) blur(5px) opacity(0.6); pointer-events: none\"};\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAAA;AAAA;AAAA;AANA;AACA;AATA;AAAA;AACA;AADA;AAkBA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AACA;AAqBA;AACA;AAvBA;AAAA;AACA;AADA;AAyBA;AAzBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAkCA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AApBA;AAiCA;AAEA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;;;;A","sourceRoot":""}