{"version":3,"file":"static/webpack/static/development/pages/_app.js.a870d43fbfb12738b346.hot-update.js","sources":["webpack:///./stores/store.js"],"sourcesContent":["import { action, observable } from \"mobx\";\nimport { useStaticRendering } from \"mobx-react\";\nimport { create, persist } from \"mobx-persist\";\nimport { createContext } from \"react\";\nimport { getStateDate } from \"../components/Helpers/Functions\";\n\nconst isServer = !process.browser;\nuseStaticRendering(isServer);\n\nexport class Store {\n  @observable lastUpdate = 0;\n  @persist @observable light = true;\n  @persist @observable isAuth = false;\n  @persist @observable startDate = \"2020-02-24T12:43:56.702Z\";\n  @persist @observable endDate = \"2020-02-28T12:43:56.702Z\";\n  @persist @observable date = 1;\n  @observable pnl = 0;\n  @persist @observable globalHash = [];\n\n  @action changeDate = newDate => {\n    let dates = getStateDate(newDate);\n    this.date = newDate;\n    this.startDate = dates.start;\n    this.endDate = dates.end;\n  };\n\n  @action addPnl = pnl => {\n    this.pnl += pnl;\n  };\n\n  @action resetPnl = () => {\n    this.pnl = 0;\n  };\n\n  @action pushGlobalHash = hash => {\n    this.globalHash.push(hash);\n  };\n\n  //   constructor(isServer, initialData = {}) {\n  //     this.lastUpdate =\n  //       initialData.lastUpdate != null ? initialData.lastUpdate : Date.now();\n  //     this.light = !!initialData.light;\n  //   }\n\n  //   @action start = () => {\n  //     this.timer = setInterval(() => {\n  //       this.lastUpdate = Date.now();\n  //       this.light = true;\n  //     }, 1000);\n  //   };\n\n  //   stop = () => clearInterval(this.timer);\n}\n\nlet store = null;\nexport const hydrate = create();\nexport const StoreContext = createContext(new Store());\n\nexport function initializeStore(initialData) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return new Store(isServer, initialData);\n  }\n  if (store === null) {\n    store = new Store(isServer, initialData);\n  }\n\n  hydrate(\"store\", store).then(() => {\n    console.log(\"someStore has been hydrated\");\n  });\n\n  return store;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AA8BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AA1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAWA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAkBA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAsBA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AA0BA;AACA;AA3BA;AAAA;AA6CA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}