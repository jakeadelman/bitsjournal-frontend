{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.1674aa72fe1bc2ee0be7.hot-update.js","sources":["webpack:///./components/Charts2/index.js"],"sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport Chart from \"./ChartDemo\";\nimport { getData } from \"./utils\";\n\n// import { TypeChooser } from \"react-stockcharts/lib/helper\";\n\nexport default class ChartComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    // state = {};\n  }\n  componentDidMount() {\n    // getData().then(data => {\n    //   console.log(data);\n    //   this.setState({ data });\n    // });\n    console.log(this.props);\n    console.log(this.props.trades, \"MY TRADES\");\n    let startTime = new Date(this.props.trades[0].timestamp);\n    let endTime = new Date(\n      this.props.trades[this.props.trades.length - 1].timestamp\n    );\n    let diffMs = Math.abs(startTime - endTime);\n    var diffSecs = diffMs / 1000;\n    var diffMins = Math.round(diffSecs / 60); // minutes\n    // var diffHrs = Math.round(diffMins / 60); // hours\n    // let myTimeframe = \"1m\";\n    try {\n      if (diffMins < 60) {\n        //   this.setState({ candleData: this.props.onemin });\n        let allExec = [];\n        for (let i = 0; i < this.props.onemin.length; i++) {\n          let trade = this.props.onemin[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(\n            this.props.trades[this.props.trades.length - 1].timestamp\n          );\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          if (compare1 > 0 && compare2 < 0) {\n            allExec.unshift(newTrade);\n          }\n          if (i == this.props.onemin.length - 1) {\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExe,\n              timeframe: \"1m\"\n            });\n            console.log(this.state, \"THIS STATE\");\n          }\n        }\n      }\n      if (diffMins >= 60 && diffMins < 60 * 10) {\n        //   this.setState({ candleData: this.props.fivemin });\n        let allExec = [];\n        for (let i = 0; i < this.props.fivemin.length; i++) {\n          let trade = this.props.fivemin[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(\n            this.props.trades[this.props.trades.length - 1].timestamp\n          );\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          if (compare1 > 0 && compare2 < 0) {\n            allExec.unshift(newTrade);\n          }\n          if (i == this.props.fivemin.length - 1) {\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: \"5m\"\n            });\n            console.log(this.state, \"THIS STATE\");\n          }\n        }\n      }\n      let day = 60 * 24;\n      if (diffMins >= 60 * 10 && diffMins < day * 4) {\n        //   this.setState({ candleData: this.props.onehour });\n        let allExec = [];\n        for (let i = 0; i < this.props.onehour.length; i++) {\n          let trade = this.props.onehour[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(\n            this.props.trades[this.props.trades.length - 1].timestamp\n          );\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          if (compare1 > 0 && compare2 < 0) {\n            allExec.unshift(newTrade);\n          }\n          if (i == this.props.onehour.length - 1) {\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: \"1h\"\n            });\n            console.log(this.state, \"THIS STATE\");\n          }\n        }\n      }\n      if (diffMins >= day * 4) {\n        //   this.setState({ candleData: this.props.oneday });\n        let allExec = [];\n        for (let i = 0; i < this.props.oneday.length; i++) {\n          let trade = this.props.oneday[i];\n          let newTrade = {};\n          newTrade.date = new Date(trade.timestamp);\n          newTrade.open = parseFloat(trade.open);\n          newTrade.close = parseFloat(trade.close);\n          newTrade.high = parseFloat(trade.high);\n          newTrade.low = parseFloat(trade.low);\n          let strt = new Date(this.props.trades[0].timestamp);\n          let end = new Date(\n            this.props.trades[this.props.trades.length - 1].timestamp\n          );\n          let compare1 = newTrade.date - strt;\n          let compare2 = newTrade.date - end;\n          if (compare1 > 0 && compare2 < 0) {\n            allExec.unshift(newTrade);\n          }\n          if (i == this.props.oneday.length - 1) {\n            this.setState({\n              trades: this.props.trades,\n              newDat: allExec,\n              timeframe: \"1d\"\n            });\n            console.log(this.state, \"THIS STATE\");\n          }\n        }\n      }\n    } catch (err) {\n      let allExec = [];\n      for (let i = 0; i < this.props.onehour.length; i++) {\n        let trade = this.props.onehour[i];\n        let newTrade = {};\n        newTrade.date = new Date(trade.timestamp);\n        newTrade.open = parseFloat(trade.open);\n        newTrade.close = parseFloat(trade.close);\n        newTrade.high = parseFloat(trade.high);\n        newTrade.low = parseFloat(trade.low);\n        let strt = new Date(this.props.trades[0].timestamp);\n        let end = new Date(\n          this.props.trades[this.props.trades.length - 1].timestamp\n        );\n        let compare1 = newTrade.date - strt;\n        let compare2 = newTrade.date - end;\n        if (compare1 > 0 && compare2 < 0) {\n          allExec.unshift(newTrade);\n        }\n        if (i == this.props.onehour.length - 1) {\n          this.setState({\n            trades: this.props.trades,\n            newDat: allExec,\n            timeframe: \"1h\"\n          });\n          console.log(this.state, \"THIS STATE\");\n        }\n      }\n    }\n  }\n  render() {\n    if (this.state == null) {\n      return <div>Loading...</div>;\n    }\n    return (\n      // <TypeChooser>\n      //   {type => (\n      <Chart\n        type={\"svy\"}\n        data={this.state.newDat}\n        trades={this.state.trades}\n        timeframe={this.state.timeframe}\n      />\n      //   )}\n      // </TypeChooser>\n    );\n  }\n}\n\n// render(<ChartComponent />, document.getElementById(\"root\"));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AAGA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAXA;AAYA;;;;AA7LA;AACA;AACA;;;;;A","sourceRoot":""}