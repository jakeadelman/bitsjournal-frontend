{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.ae9cb29ebc76306ee9c0.hot-update.js","sources":["webpack:///./components/Dashboard/Dashboard.js"],"sourcesContent":["import styled from \"styled-components\";\nimport {\n  ContainDiv,\n  NextToDiv,\n  NextToDivHeader,\n  RowContainer,\n  ContainDivHeader,\n} from \"./Trades\";\nimport ReChart from \"./Trades\";\nimport Sidebar, { SymbolChooser, Pnl } from \"../Menu/Menu\";\nimport { getNewDat } from \"./shared/helpers\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { useState } from \"react\";\nimport Notes from \"./Notes/NotesTest\";\nimport Tabs from \"./Tabs\";\nimport {\n  Nav,\n  NavItem,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownMenu,\n  NavLink,\n} from \"reactstrap\";\n\nimport { inject, observer } from \"mobx-react\";\nimport { when, reaction } from \"mobx\";\nimport { wideFont } from \"../shared/helpers\";\n\n@inject(\"store\")\n@observer\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      globalHash: [],\n      globalHashActive: [\"all\"],\n      data: null,\n      filteredData: null,\n      isSingle: false,\n    };\n    this.getGlobalHashtags = this.getGlobalHashtags.bind(this);\n    this.hashtagClicked = this.hashtagClicked.bind(this);\n    this.hashtagClickedBack = this.hashtagClickedBack.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({ data: this.props.data });\n    this.getGlobalHashtags(this.props.data);\n  }\n  componentDidMount() {\n    this.singleTradeReaction = reaction(\n      () => this.props.store.hasSingleTrade,\n      (notifications, reaction) => {\n        console.log(\"HAS SINGLE\", this.props.store.hasSingleTrade);\n        if (this.props.store.hasSingleTrade == false) {\n          this.setState({ isSingle: false });\n          console.log(\"setting back\");\n        } else {\n          this.setState({\n            isSingle: true,\n            singleTrade: this.props.store.singleTrade[0],\n          });\n          console.log(this.state, \"STATEE\");\n          console.log(\"setting back\");\n        }\n      }\n    );\n\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n  updateWindowDimensions() {\n    this.setState({\n      width: window.innerWidth,\n    });\n  }\n\n  async getGlobalHashtags(data) {\n    for (let i = 0; i < data.fetchTradeHistory.length; i++) {\n      let thisTradeHash = data.fetchTradeHistory[i].hashtags.split(\",\");\n      if (thisTradeHash != \"undefined\") {\n        for (let j = 0; j < thisTradeHash.length; j++) {\n          if (thisTradeHash[j] != \"undefined\") {\n            let newGlobalHash = this.state.globalHash;\n            newGlobalHash.push(thisTradeHash[j]);\n            this.setState({ globalHash: newGlobalHash });\n          }\n        }\n      }\n    }\n  }\n\n  async hashtagClickedBack(value) {\n    if (value == \"all\") {\n      console.log(\"DO NOTHING\");\n    } else {\n      let newHashActive = [];\n      let newHash = this.state.globalHash;\n      for (let i = 0; i < this.state.globalHashActive.length; i++) {\n        if (value !== this.state.globalHashActive[i]) {\n          newHashActive.push(this.state.globalHashActive[i]);\n        } else {\n          newHash.push(this.state.globalHashActive[i]);\n        }\n        if (i == this.state.globalHashActive.length - 1) {\n          if (newHashActive[0] == undefined) {\n            let newHash2 = [];\n            for (let j = 0; j < newHash.length; j++) {\n              if (newHash[j] != \"all\") {\n                newHash2.push(newHash[j]);\n              }\n              if (j == newHash.length - 1) {\n                this.setState({\n                  globalHash: newHash2,\n                  globalHashActive: [\"all\"],\n                  filteredData: null,\n                });\n              }\n            }\n          } else {\n            let newHash2 = [];\n            for (let j = 0; j < newHash.length; j++) {\n              if (newHash[j] != \"all\") {\n                newHash2.push(newHash[j]);\n              }\n              if (j == newHash.length - 1) {\n                getNewDat(this.state.data, newHashActive).then((res) => {\n                  this.setState({\n                    globalHash: newHash2,\n                    globalHashActive: newHashActive,\n                    filteredData: res,\n                  });\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  async hashtagClicked(value) {\n    if (value == \"all\") {\n      let newGlobalHash = this.state.globalHash;\n      let newGlobalHash2 = [];\n      for (let i = 0; i < this.state.globalHashActive.length; i++) {\n        newGlobalHash.push(this.state.globalHashActive[i]);\n        if (i == this.state.globalHashActive.length - 1) {\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (newGlobalHash[j] != \"all\") {\n              newGlobalHash2.push(newGlobalHash[j]);\n            }\n            if (j == newGlobalHash.length - 1) {\n              this.setState({\n                globalHash: newGlobalHash2,\n                globalHashActive: [\"all\"],\n                filteredData: null,\n              });\n              return;\n            }\n          }\n        }\n      }\n    }\n    if (this.state.globalHashActive[0] == undefined) {\n      let newArray = [];\n      newArray.push(value);\n      this.setState({ globalHashActive: newArray });\n      const index = this.state.globalHash.indexOf(value);\n      if (index > -1) {\n        let newGlobalHash = this.state.globalHash;\n        newGlobalHash.splice(index, 1);\n        this.setState({ globalHash: newGlobalHash });\n      }\n      return;\n    }\n    for (let i = 0; i < this.state.globalHashActive.length; i++) {\n      if (this.state.globalHashActive[i] == \"all\") {\n        this.state.globalHashActive = [];\n        const index = this.state.globalHash.indexOf(value);\n        if (index > -1) {\n          let newGlobalHash = this.state.globalHash;\n          newGlobalHash.splice(index, 1);\n          let torf = false;\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (\"all\" == newGlobalHash[j]) {\n              torf = true;\n            }\n            if (j == newGlobalHash.length - 1 && torf == false) {\n              newGlobalHash.push(\"all\");\n            }\n          }\n          let newGlobalHashActive = this.state.globalHashActive;\n          newGlobalHashActive.push(value);\n          getNewDat(this.state.data, newGlobalHashActive).then((newDat) => {\n            this.setState({\n              globalHashActive: newGlobalHashActive,\n              globalHash: newGlobalHash,\n              filteredData: newDat,\n            });\n            return;\n          });\n        }\n      }\n      if (value == this.state.globalHashActive[i]) {\n        return;\n      }\n      if (i == this.state.globalHashActive.length - 1) {\n        const index = this.state.globalHash.indexOf(value);\n        if (index > -1) {\n          let newGlobalHash = this.state.globalHash;\n          newGlobalHash.splice(index, 1);\n          // newGlobalHash.push(\"all\");\n          let torf = false;\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (\"all\" == newGlobalHash[j]) {\n              torf = true;\n            }\n            if (j == newGlobalHash.length - 1 && torf == false) {\n              newGlobalHash.push(\"all\");\n            }\n          }\n          let newGlobalHashActive = this.state.globalHashActive;\n          newGlobalHashActive.push(value);\n          getNewDat(this.state.data, newGlobalHashActive).then((newDat) => {\n            this.setState({\n              globalHashActive: newGlobalHashActive,\n              globalHash: newGlobalHash,\n              filteredData: newDat,\n            });\n            return;\n          });\n        }\n      }\n    }\n  }\n  render() {\n    if (this.state.data != null) {\n      if (this.state.isSingle == false) {\n        return (\n          <Wrapper>\n            <ChartWrapper>\n              <TopBarParent>\n                <TopBarChildBig>\n                  {this.state.globalHashActive.map((hash) => {\n                    return (\n                      <TopHashtagIndividualActive\n                        onClick={() => this.hashtagClickedBack(hash)}\n                      >\n                        #{hash}\n                      </TopHashtagIndividualActive>\n                    );\n                  })}\n                  {this.state.globalHash.map((hash) => {\n                    return (\n                      <TopHashtagIndividual\n                        onClick={() => this.hashtagClicked(hash)}\n                      >\n                        #{hash}\n                      </TopHashtagIndividual>\n                    );\n                  })}\n                </TopBarChildBig>\n                <TopBarChildSmall>\n                  <TopHashtagIndividualActivePnl>\n                    <Pnl />\n                  </TopHashtagIndividualActivePnl>\n                </TopBarChildSmall>\n                <TopBarChildBig>\n                  <TopHashtagIndividualActiveRight>\n                    <SymbolChooser />\n                  </TopHashtagIndividualActiveRight>\n                </TopBarChildBig>\n              </TopBarParent>\n              <WholeGrid>\n                {this.state.width > 1380 ? (\n                  <ContainDivHeader>\n                    <NextToDivHeader>Start</NextToDivHeader>\n                    <NextToDivHeader>End</NextToDivHeader>\n                    <NextToDivHeader>L/S</NextToDivHeader>\n                    <NextToDivHeader>Avg Entry</NextToDivHeader>\n                    <NextToDivHeader>Avg Exit</NextToDivHeader>\n                    <NextToDivHeader>Qty</NextToDivHeader>\n                    <NextToDivHeader>Realized Pnl</NextToDivHeader>\n                  </ContainDivHeader>\n                ) : (\n                  <ContainDivHeader>\n                    <NextToDivHeader>Start</NextToDivHeader>\n                    <NextToDivHeader>End</NextToDivHeader>\n                    <NextToDivHeader>L/S</NextToDivHeader>\n                    <NextToDivHeader>Entry</NextToDivHeader>\n                    <NextToDivHeader>Exit</NextToDivHeader>\n                    <NextToDivHeader>Qty</NextToDivHeader>\n                    <NextToDivHeader>RPNL</NextToDivHeader>\n                  </ContainDivHeader>\n                )}\n                <ReChart\n                  data={this.state.data}\n                  filteredData={this.state.filteredData}\n                  initData={this.props.data}\n                />\n              </WholeGrid>\n            </ChartWrapper>\n          </Wrapper>\n        );\n      } else {\n        return (\n          <Wrapper>\n            <ChartWrapper>\n              <TopBarParent>\n                <TopBarChildBig>\n                  <Tabs />\n                </TopBarChildBig>\n                <TopBarChildSmall>\n                  <TopHashtagIndividualActivePnl>\n                    <Pnl />\n                  </TopHashtagIndividualActivePnl>\n                </TopBarChildSmall>\n                <TopBarChildBig>\n                  <RightTabs>\n                    <Notes firstTrade={this.state.singleTrade} />\n                  </RightTabs>\n                </TopBarChildBig>\n              </TopBarParent>\n              <WholeGrid>\n                {this.state.width > 1380 ? (\n                  <ContainDivHeader>\n                    <NextToDivHeader>Start</NextToDivHeader>\n                    <NextToDivHeader>End</NextToDivHeader>\n                    <NextToDivHeader>L/S</NextToDivHeader>\n                    <NextToDivHeader>Avg Entry</NextToDivHeader>\n                    <NextToDivHeader>Avg Exit</NextToDivHeader>\n                    <NextToDivHeader>Qty</NextToDivHeader>\n                    <NextToDivHeader>Realized Pnl</NextToDivHeader>\n                  </ContainDivHeader>\n                ) : (\n                  <ContainDivHeader>\n                    <NextToDivHeader>Start</NextToDivHeader>\n                    <NextToDivHeader>End</NextToDivHeader>\n                    <NextToDivHeader>L/S</NextToDivHeader>\n                    <NextToDivHeader>Entry</NextToDivHeader>\n                    <NextToDivHeader>Exit</NextToDivHeader>\n                    <NextToDivHeader>Qty</NextToDivHeader>\n                    <NextToDivHeader>RPNL</NextToDivHeader>\n                  </ContainDivHeader>\n                )}\n                <ReChart\n                  data={this.state.data}\n                  filteredData={this.state.filteredData}\n                  initData={this.props.data}\n                />\n              </WholeGrid>\n            </ChartWrapper>\n          </Wrapper>\n        );\n      }\n    }\n  }\n}\n\nconst SingleTabInner = styled.div`\n  margin: auto;\n`;\n\nconst SingleTab = styled.div`\n  color: ${(props) => (props.isActive ? \"#fff\" : \"#000\")};\n  background-color: ${(props) => (props.isActive ? \"#000\" : \"#fff\")};\n\n  margin: auto 10px;\n  border-radius: 2px;\n  padding: 5px;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst WrapTabs = styled.div`\n  display: flex;\n  flex-direction: row;\n  font-size: 15px;\n`;\nconst WholeGrid = styled.div`\n  border: 1px solid #f2f2f2;\n`;\n\nconst TopBarParent = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  margin-bottom: 14px;\n`;\n\nconst TopBarChildBig = styled.div`\n  flex: 1 1 45%; /*grow | shrink | basis */\n  display: flex;\n  flex-direction: row;\n`;\nconst TopBarChildSmall = styled.div`\n  flex: 1 1 10%; /*grow | shrink | basis */\n  display: flex;\n  flex-direction: row;\n`;\n\nconst TopHashtagIndividual = styled.div`\n  background: #f8f8ff;\n  color: #000;\n  padding: 8px;\n  margin: 0 10px;\n  border-radius: 2px;\n  ${wideFont}\n\n  :hover {\n    cursor: pointer;\n  }\n  margin-left: 0;\n`;\n\nconst TopHashtagIndividualActive = styled.div`\n  background: #212528;\n  color: #fff;\n  padding: 8px;\n  margin: 0 10px;\n  border-radius: 2px;\n  ${wideFont}\n  margin:0 auto;\n  :hover {\n    cursor: pointer;\n  }\n  margin-left: 0;\n`;\nconst TopHashtagIndividualActiveRight = styled.div`\n  background: #212528;\n  color: #fff;\n  padding: 8px;\n  margin: 0 10px;\n  border-radius: 2px;\n  ${wideFont}\n  margin:0 auto;\n  :hover {\n    cursor: pointer;\n  }\n  margin-right: 0;\n`;\nconst RightTabs = styled.div`\n  color: #fff;\n  margin: 0 10px;\n  border-radius: 2px;\n  ${wideFont}\n  margin:0 auto;\n  :hover {\n    cursor: pointer;\n  }\n  margin-right: 0;\n`;\n\nconst TopHashtagIndividualActivePnl = styled.div`\n  color: #fff;\n  padding: 0px;\n  margin: 0 10px;\n  border-radius: 2px;\n  ${wideFont}\n  :hover {\n    cursor: pointer;\n  }\n  margin: auto;\n`;\n\nconst ChartWrapper = styled.div`\n  background: white;\n  padding: 5px;\n  width: 100%;\n  padding: 10px;\n  @media (max-width: 768px) {\n    margin: 0 5vw;\n  }\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  margin-top: 5px;\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAZA;AAaA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;AADA;AAGA;;;;;;AAEA;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAfA;AAgBA;AACA;AACA;AA1CA;AA2CA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;AACA;;;;;AACA;AACA;AACA;AACA;;AADA;;;;;AACA;AACA;AAAA;;;;;AACA;AACA;;AADA;;;;;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AACA;AACA;AACA;AAHA;;;;AALA;;;;;AAHA;;;;;AAmBA;;;;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;AAEA;AACA;;AADA;;;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AArBA;AAsBA;AACA;AACA;AAAA;;;;;;;;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAtBA;AAuBA;AACA;AACA;;AA1DA;;;;;;;;;;;;;;;;;;;;AA4DA;AAAA;AACA;AAAA;AACA;AACA;AAMA;AAEA;AAAA;AAAA;AADA;AAMA;AAEA;AAEA;AAAA;AAAA;AADA;AAMA;AAoCA;AACA;AACA;AAHA;AASA;AACA;AAcA;AAAA;AA2BA;AACA;AACA;AAHA;AASA;AACA;AACA;;;;AA1UA;AACA;;AA4UA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAUA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}