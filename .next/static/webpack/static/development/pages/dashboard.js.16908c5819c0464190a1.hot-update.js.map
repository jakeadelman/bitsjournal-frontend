{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.16908c5819c0464190a1.hot-update.js","sources":["webpack:///./components/Dashboard/AddTerm.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n// import Popover from \"./Popover\";\nimport { Button, Popover, PopoverHeader, PopoverBody } from \"reactstrap\";\n\nexport default function AddTerm(props) {\n  const [clicked, setClicked] = useState(false);\n  const [popover, setPopover] = useState(false);\n\n  function toggle() {\n    if (!popover) {\n      setPopover(true);\n    } else {\n      setPopover(false);\n    }\n  }\n\n  return (\n    <div>\n      <button\n        id=\"Popover1\"\n        onClick={() => {\n          setClicked(true);\n          toggle();\n        }}\n      >\n        add term\n      </button>\n      <Popover placement=\"bottom\" isOpen={popover} target=\"Popover1\">\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>\n          <PopBody />\n        </PopoverBody>\n      </Popover>\n    </div>\n  );\n}\n\nconst PopBody = () => {\n  const [newTerm, setNewTerm] = useState();\n  const [clicked, setClicked] = useState(false);\n  console.log(newTerm);\n\n  function handleClick() {\n    console.log(\"was clicked\");\n    setClicked(true);\n    // return <AddTodo term={newTerm} />;\n  }\n\n  if (!!clicked) {\n    return (\n      <Mutation mutation={addSearchTermQuery}>\n        {(addSearchTerm, { data }) => {\n          setClicked(false);\n          addSearchTerm({ variables: { searchterm: newTerm } });\n        }}\n      </Mutation>\n    );\n  }\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"enter term to add\"\n        onChange={e => setNewTerm(e.target.value)}\n      />\n      <button onClick={() => handleClick()}>submit</button>\n    </div>\n  );\n};\n\nconst AddTodo = props => {\n  return (\n    <Mutation mutation={addSearchTermQuery}>\n      {(addSearchTerm, { data }) =>\n        addSearchTerm({ variables: { searchterm: props.term } })\n      }\n    </Mutation>\n  );\n};\n\nexport const addSearchTermQuery = gql`\n  mutation AddSearchTerm($searchterm: String!) {\n    addSearchTerm(searchterm: $searchterm)\n  }\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AACA;;;;A","sourceRoot":""}