{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.d9930e15499b3566e278.hot-update.js","sources":["webpack:///./components/Dashboard/DashMain.js"],"sourcesContent":["import React, { setState } from \"react\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { withRouter } from \"next/router\";\nimport SentimentModule from \"./SentimentModule\";\n\nexport default class DashMain extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    console.log(this.props.initialTerm);\n  }\n\n  render() {\n    const fetchTweetsVars = {\n      query: this.props.initialTerm\n    };\n\n    return (\n      <Query query={fetchTweetsQuery} variables={fetchTweetsVars}>\n        {({ loading, error, data }) => {\n          if (error) return <div>no data loaded</div>;\n          if (loading) return <div>Loading</div>;\n          console.log(data);\n\n          return (\n            <div className=\"dash-main-table\">\n              <div>\n                <table>\n                  <thread>\n                    <tr>\n                      <th>query: {this.props.initialTerm}</th>\n                      <th>\n                        <SentimentModule term=\"hello\" />\n                      </th>\n                    </tr>\n                  </thread>\n                  <tbody>\n                    <div>\n                      {data.fetchTweets.map(tweet => (\n                        <tr className=\"data\">\n                          <th scope=\"row\">text</th>\n                          <td>{tweet.text}</td>\n                        </tr>\n                      ))}\n                    </div>\n                  </tbody>\n                </table>\n                <style jsx>\n                  {`\n                    .dash-main-table {\n                      max-width: 50%;\n                      display: block;\n                      margin: auto;\n                    }\n                    table {\n                      table-layout: fixed;\n                      width: 100% !important;\n                    }\n                    .data {\n                      display: inline-table;\n                      word-wrap: break-word;\n                    }\n                    td {\n                      word-break: break-all;\n                    }\n                  `}\n                </style>\n              </div>\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport const fetchTweetsQuery = gql`\n  query fetchTweets($query: String!) {\n    fetchTweets(query: $query) {\n      id\n      tweetId\n      text\n      polarity\n    }\n\n    getDailyTweet(query: $query) {\n      day\n      negative\n      positive\n      total\n    }\n  }\n`;\n\n// const DashMainWrapper = withRouter(props => {\n//   if (!!props.router.query) {\n//     console.log(\"ROUTER QUERY TERM\", props.router.query);\n//     return (\n//       <div>\n//         <DashMain initialTerm={props.router.query.term} />\n//       </div>\n//     );\n//   } else {\n//     console.log(\"INITIAL TERM\", props.initialTerm);\n//     return (\n//       <div>\n//         <DashMain initialTerm={props.initialTerm} />\n//       </div>\n//     );\n//   }\n// });\n// export default DashMainWrapper;\n// const Page = props => (\n//   <div>\n//     <DashMainWrapper initialTerm={props.initialTerm} />\n//   </div>\n// );\n\n// export default Page;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AADA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAHA;AAZA;AAAA;AAAA;AA4CA;AAGA;;;;AAtEA;AACA;AADA;AAyEA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;A","sourceRoot":""}