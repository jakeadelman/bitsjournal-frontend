{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.0e2db6616f2dd97a09a2.hot-update.js","sources":["webpack:///./components/Dashboard/768px/Dashboard.js","webpack:///./components/Dashboard/Dashboard.js","webpack:///./components/Dashboard/FetchQuery.js","webpack:///./components/Dashboard/Trades.js","webpack:///./components/Menu/768px/Menu.js","webpack:///./components/Menu/Menu.js"],"sourcesContent":["import styled from \"styled-components\";\nimport {\n  ContainDiv,\n  NextToDiv,\n  NextToDivHeader,\n  RowContainer,\n  ContainDivHeader,\n} from \"../Trades\";\nimport ReChart from \"../Trades\";\nimport Sidebar768 from \"../../Menu/768px/Menu\";\nimport { getNewDat } from \"../helpers\";\n\nimport { inject, observer } from \"mobx-react\";\nimport { when } from \"mobx\";\n\n@inject(\"store\")\n@observer\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      globalHash: [],\n      globalHashActive: [\"all\"],\n      data: null,\n      filteredData: null,\n    };\n    this.getGlobalHashtags = this.getGlobalHashtags.bind(this);\n    this.hashtagClicked = this.hashtagClicked.bind(this);\n    this.hashtagClickedBack = this.hashtagClickedBack.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({ data: this.props.data });\n    this.getGlobalHashtags(this.props.data);\n  }\n\n  async getGlobalHashtags(data) {\n    for (let i = 0; i < data.fetchTradeHistory.length; i++) {\n      let thisTradeHash = data.fetchTradeHistory[i].hashtags.split(\",\");\n      if (thisTradeHash != \"undefined\") {\n        for (let j = 0; j < thisTradeHash.length; j++) {\n          if (thisTradeHash[j] != \"undefined\") {\n            let newGlobalHash = this.state.globalHash;\n            newGlobalHash.push(thisTradeHash[j]);\n            this.setState({ globalHash: newGlobalHash });\n          }\n        }\n      }\n    }\n  }\n\n  async hashtagClickedBack(value) {\n    if (value == \"all\") {\n      console.log(\"DO NOTHING\");\n    } else {\n      let newHashActive = [];\n      let newHash = this.state.globalHash;\n      for (let i = 0; i < this.state.globalHashActive.length; i++) {\n        if (value !== this.state.globalHashActive[i]) {\n          newHashActive.push(this.state.globalHashActive[i]);\n        } else {\n          newHash.push(this.state.globalHashActive[i]);\n        }\n        if (i == this.state.globalHashActive.length - 1) {\n          if (newHashActive[0] == undefined) {\n            let newHash2 = [];\n            for (let j = 0; j < newHash.length; j++) {\n              if (newHash[j] != \"all\") {\n                newHash2.push(newHash[j]);\n              }\n              if (j == newHash.length - 1) {\n                this.setState({\n                  globalHash: newHash2,\n                  globalHashActive: [\"all\"],\n                  filteredData: null,\n                });\n              }\n            }\n          } else {\n            let newHash2 = [];\n            for (let j = 0; j < newHash.length; j++) {\n              if (newHash[j] != \"all\") {\n                newHash2.push(newHash[j]);\n              }\n              if (j == newHash.length - 1) {\n                getNewDat(this.state.data, newHashActive).then((res) => {\n                  this.setState({\n                    globalHash: newHash2,\n                    globalHashActive: newHashActive,\n                    filteredData: res,\n                  });\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  async hashtagClicked(value) {\n    if (value == \"all\") {\n      let newGlobalHash = this.state.globalHash;\n      let newGlobalHash2 = [];\n      for (let i = 0; i < this.state.globalHashActive.length; i++) {\n        newGlobalHash.push(this.state.globalHashActive[i]);\n        if (i == this.state.globalHashActive.length - 1) {\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (newGlobalHash[j] != \"all\") {\n              newGlobalHash2.push(newGlobalHash[j]);\n            }\n            if (j == newGlobalHash.length - 1) {\n              this.setState({\n                globalHash: newGlobalHash2,\n                globalHashActive: [\"all\"],\n                filteredData: null,\n              });\n              return;\n            }\n          }\n        }\n      }\n    }\n    if (this.state.globalHashActive[0] == undefined) {\n      let newArray = [];\n      newArray.push(value);\n      this.setState({ globalHashActive: newArray });\n      const index = this.state.globalHash.indexOf(value);\n      if (index > -1) {\n        let newGlobalHash = this.state.globalHash;\n        newGlobalHash.splice(index, 1);\n        this.setState({ globalHash: newGlobalHash });\n      }\n      return;\n    }\n    for (let i = 0; i < this.state.globalHashActive.length; i++) {\n      if (this.state.globalHashActive[i] == \"all\") {\n        this.state.globalHashActive = [];\n        const index = this.state.globalHash.indexOf(value);\n        if (index > -1) {\n          let newGlobalHash = this.state.globalHash;\n          newGlobalHash.splice(index, 1);\n          let torf = false;\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (\"all\" == newGlobalHash[j]) {\n              torf = true;\n            }\n            if (j == newGlobalHash.length - 1 && torf == false) {\n              newGlobalHash.push(\"all\");\n            }\n          }\n          let newGlobalHashActive = this.state.globalHashActive;\n          newGlobalHashActive.push(value);\n          getNewDat(this.state.data, newGlobalHashActive).then((newDat) => {\n            this.setState({\n              globalHashActive: newGlobalHashActive,\n              globalHash: newGlobalHash,\n              filteredData: newDat,\n            });\n            return;\n          });\n        }\n      }\n      if (value == this.state.globalHashActive[i]) {\n        return;\n      }\n      if (i == this.state.globalHashActive.length - 1) {\n        const index = this.state.globalHash.indexOf(value);\n        if (index > -1) {\n          let newGlobalHash = this.state.globalHash;\n          newGlobalHash.splice(index, 1);\n          // newGlobalHash.push(\"all\");\n          let torf = false;\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (\"all\" == newGlobalHash[j]) {\n              torf = true;\n            }\n            if (j == newGlobalHash.length - 1 && torf == false) {\n              newGlobalHash.push(\"all\");\n            }\n          }\n          let newGlobalHashActive = this.state.globalHashActive;\n          newGlobalHashActive.push(value);\n          getNewDat(this.state.data, newGlobalHashActive).then((newDat) => {\n            this.setState({\n              globalHashActive: newGlobalHashActive,\n              globalHash: newGlobalHash,\n              filteredData: newDat,\n            });\n            return;\n          });\n        }\n      }\n    }\n  }\n  render() {\n    console.log(\"THIS IS GLOBAL HAS\", this.state.globalHash);\n    console.log(\"IN 786\");\n    if (this.state.data != null) {\n      return (\n        <Wrapper>\n          <Sidebar768 />\n          <ChartWrapper>\n            <TopHashtagDiv>\n              {this.state.globalHashActive.map((hash) => {\n                return (\n                  <TopHashtagIndividualActive\n                    onClick={() => this.hashtagClickedBack(hash)}\n                  >\n                    #{hash}\n                  </TopHashtagIndividualActive>\n                );\n              })}\n              {this.state.globalHash.map((hash) => {\n                return (\n                  <TopHashtagIndividual\n                    onClick={() => this.hashtagClicked(hash)}\n                  >\n                    #{hash}\n                  </TopHashtagIndividual>\n                );\n              })}\n            </TopHashtagDiv>\n            <ContainDivHeader>\n              <NextToDivHeader>Start</NextToDivHeader>\n              <NextToDivHeader>End</NextToDivHeader>\n              <NextToDivHeader>L/S</NextToDivHeader>\n              <NextToDivHeader>Entry</NextToDivHeader>\n              <NextToDivHeader>Exit</NextToDivHeader>\n              <NextToDivHeader>Qty</NextToDivHeader>\n              <NextToDivHeader>RPNL</NextToDivHeader>\n            </ContainDivHeader>\n            <ReChart\n              data={this.state.data}\n              filteredData={this.state.filteredData}\n              initData={this.props.data}\n            />\n          </ChartWrapper>\n        </Wrapper>\n      );\n    }\n  }\n}\n\nconst TopHashtagDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 8px;\n`;\nconst TopHashtagIndividual = styled.div`\n  background: #f8f8ff;\n  color: #000;\n  padding: 8px;\n  margin: 0 10px;\n  border-radius: 2px;\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst TopHashtagIndividualActive = styled.div`\n  background: #212528;\n  color: #fff;\n  padding: 8px;\n  margin: 0 10px;\n  border-radius: 2px;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst ChartWrapper = styled.div`\n  background: white;\n  padding: 5px;\n  width: 100%;\n  @media (max-width: 768px) {\n    margin: 0;\n  }\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n","import styled from \"styled-components\";\nimport {\n  ContainDiv,\n  NextToDiv,\n  NextToDivHeader,\n  RowContainer,\n  ContainDivHeader,\n} from \"./Trades\";\nimport ReChart from \"./Trades\";\nimport Sidebar, { SymbolChooser, Pnl } from \"../Menu/Menu\";\nimport { getNewDat } from \"./helpers\";\n\nimport { inject, observer } from \"mobx-react\";\nimport { when } from \"mobx\";\nimport { wideFont } from \"../shared/helpers\";\n\n@inject(\"store\")\n@observer\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      globalHash: [],\n      globalHashActive: [\"all\"],\n      data: null,\n      filteredData: null,\n    };\n    this.getGlobalHashtags = this.getGlobalHashtags.bind(this);\n    this.hashtagClicked = this.hashtagClicked.bind(this);\n    this.hashtagClickedBack = this.hashtagClickedBack.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({ data: this.props.data });\n    this.getGlobalHashtags(this.props.data);\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n  updateWindowDimensions() {\n    this.setState({\n      width: window.innerWidth,\n    });\n  }\n\n  async getGlobalHashtags(data) {\n    for (let i = 0; i < data.fetchTradeHistory.length; i++) {\n      let thisTradeHash = data.fetchTradeHistory[i].hashtags.split(\",\");\n      if (thisTradeHash != \"undefined\") {\n        for (let j = 0; j < thisTradeHash.length; j++) {\n          if (thisTradeHash[j] != \"undefined\") {\n            let newGlobalHash = this.state.globalHash;\n            newGlobalHash.push(thisTradeHash[j]);\n            this.setState({ globalHash: newGlobalHash });\n          }\n        }\n      }\n    }\n  }\n\n  async hashtagClickedBack(value) {\n    if (value == \"all\") {\n      console.log(\"DO NOTHING\");\n    } else {\n      let newHashActive = [];\n      let newHash = this.state.globalHash;\n      for (let i = 0; i < this.state.globalHashActive.length; i++) {\n        if (value !== this.state.globalHashActive[i]) {\n          newHashActive.push(this.state.globalHashActive[i]);\n        } else {\n          newHash.push(this.state.globalHashActive[i]);\n        }\n        if (i == this.state.globalHashActive.length - 1) {\n          if (newHashActive[0] == undefined) {\n            let newHash2 = [];\n            for (let j = 0; j < newHash.length; j++) {\n              if (newHash[j] != \"all\") {\n                newHash2.push(newHash[j]);\n              }\n              if (j == newHash.length - 1) {\n                this.setState({\n                  globalHash: newHash2,\n                  globalHashActive: [\"all\"],\n                  filteredData: null,\n                });\n              }\n            }\n          } else {\n            let newHash2 = [];\n            for (let j = 0; j < newHash.length; j++) {\n              if (newHash[j] != \"all\") {\n                newHash2.push(newHash[j]);\n              }\n              if (j == newHash.length - 1) {\n                getNewDat(this.state.data, newHashActive).then((res) => {\n                  this.setState({\n                    globalHash: newHash2,\n                    globalHashActive: newHashActive,\n                    filteredData: res,\n                  });\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  async hashtagClicked(value) {\n    if (value == \"all\") {\n      let newGlobalHash = this.state.globalHash;\n      let newGlobalHash2 = [];\n      for (let i = 0; i < this.state.globalHashActive.length; i++) {\n        newGlobalHash.push(this.state.globalHashActive[i]);\n        if (i == this.state.globalHashActive.length - 1) {\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (newGlobalHash[j] != \"all\") {\n              newGlobalHash2.push(newGlobalHash[j]);\n            }\n            if (j == newGlobalHash.length - 1) {\n              this.setState({\n                globalHash: newGlobalHash2,\n                globalHashActive: [\"all\"],\n                filteredData: null,\n              });\n              return;\n            }\n          }\n        }\n      }\n    }\n    if (this.state.globalHashActive[0] == undefined) {\n      let newArray = [];\n      newArray.push(value);\n      this.setState({ globalHashActive: newArray });\n      const index = this.state.globalHash.indexOf(value);\n      if (index > -1) {\n        let newGlobalHash = this.state.globalHash;\n        newGlobalHash.splice(index, 1);\n        this.setState({ globalHash: newGlobalHash });\n      }\n      return;\n    }\n    for (let i = 0; i < this.state.globalHashActive.length; i++) {\n      if (this.state.globalHashActive[i] == \"all\") {\n        this.state.globalHashActive = [];\n        const index = this.state.globalHash.indexOf(value);\n        if (index > -1) {\n          let newGlobalHash = this.state.globalHash;\n          newGlobalHash.splice(index, 1);\n          let torf = false;\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (\"all\" == newGlobalHash[j]) {\n              torf = true;\n            }\n            if (j == newGlobalHash.length - 1 && torf == false) {\n              newGlobalHash.push(\"all\");\n            }\n          }\n          let newGlobalHashActive = this.state.globalHashActive;\n          newGlobalHashActive.push(value);\n          getNewDat(this.state.data, newGlobalHashActive).then((newDat) => {\n            this.setState({\n              globalHashActive: newGlobalHashActive,\n              globalHash: newGlobalHash,\n              filteredData: newDat,\n            });\n            return;\n          });\n        }\n      }\n      if (value == this.state.globalHashActive[i]) {\n        return;\n      }\n      if (i == this.state.globalHashActive.length - 1) {\n        const index = this.state.globalHash.indexOf(value);\n        if (index > -1) {\n          let newGlobalHash = this.state.globalHash;\n          newGlobalHash.splice(index, 1);\n          // newGlobalHash.push(\"all\");\n          let torf = false;\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (\"all\" == newGlobalHash[j]) {\n              torf = true;\n            }\n            if (j == newGlobalHash.length - 1 && torf == false) {\n              newGlobalHash.push(\"all\");\n            }\n          }\n          let newGlobalHashActive = this.state.globalHashActive;\n          newGlobalHashActive.push(value);\n          getNewDat(this.state.data, newGlobalHashActive).then((newDat) => {\n            this.setState({\n              globalHashActive: newGlobalHashActive,\n              globalHash: newGlobalHash,\n              filteredData: newDat,\n            });\n            return;\n          });\n        }\n      }\n    }\n  }\n  render() {\n    if (this.state.data != null) {\n      return (\n        <Wrapper>\n          <ChartWrapper>\n            <TopHashtagDiv>\n              {this.state.globalHashActive.map((hash) => {\n                return (\n                  <TopHashtagIndividualActive\n                    onClick={() => this.hashtagClickedBack(hash)}\n                  >\n                    #{hash}\n                  </TopHashtagIndividualActive>\n                );\n              })}\n              {this.state.globalHash.map((hash) => {\n                return (\n                  <TopHashtagIndividual\n                    onClick={() => this.hashtagClicked(hash)}\n                  >\n                    #{hash}\n                  </TopHashtagIndividual>\n                );\n              })}\n              <TopHashtagIndividualActivePnl style={{ margin: \"0 auto\" }}>\n                <Pnl />\n              </TopHashtagIndividualActivePnl>\n              <TopHashtagIndividualActive style={{ marginRight: \"0\" }}>\n                <SymbolChooser />\n              </TopHashtagIndividualActive>\n            </TopHashtagDiv>\n            <WholeGrid>\n              {this.state.width > 1380 ? (\n                <ContainDivHeader>\n                  <NextToDivHeader>Start</NextToDivHeader>\n                  <NextToDivHeader>End</NextToDivHeader>\n                  <NextToDivHeader>L/S</NextToDivHeader>\n                  <NextToDivHeader>Avg Entry</NextToDivHeader>\n                  <NextToDivHeader>Avg Exit</NextToDivHeader>\n                  <NextToDivHeader>Qty</NextToDivHeader>\n                  <NextToDivHeader>Realized Pnl</NextToDivHeader>\n                </ContainDivHeader>\n              ) : (\n                <ContainDivHeader>\n                  <NextToDivHeader>Start</NextToDivHeader>\n                  <NextToDivHeader>End</NextToDivHeader>\n                  <NextToDivHeader>L/S</NextToDivHeader>\n                  <NextToDivHeader>Entry</NextToDivHeader>\n                  <NextToDivHeader>Exit</NextToDivHeader>\n                  <NextToDivHeader>Qty</NextToDivHeader>\n                  <NextToDivHeader>RPNL</NextToDivHeader>\n                </ContainDivHeader>\n              )}\n              <ReChart\n                data={this.state.data}\n                filteredData={this.state.filteredData}\n                initData={this.props.data}\n              />\n            </WholeGrid>\n          </ChartWrapper>\n        </Wrapper>\n      );\n    }\n  }\n}\n\nconst WholeGrid = styled.div`\n  border: 1px solid #f2f2f2;\n`;\n\nconst TopHashtagDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 14px;\n`;\nconst TopHashtagIndividual = styled.div`\n  background: #f8f8ff;\n  color: #000;\n  padding: 8px;\n  margin: 0 10px;\n  border-radius: 2px;\n  ${wideFont}\n\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst TopHashtagIndividualActive = styled.div`\n  background: #212528;\n  color: #fff;\n  padding: 8px;\n  margin: 0 10px;\n  border-radius: 2px;\n  ${wideFont}\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst TopHashtagIndividualActivePnl = styled.div`\n  color: #fff;\n  padding: 0px;\n  margin: 0 10px;\n  border-radius: 2px;\n  ${wideFont}\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst ChartWrapper = styled.div`\n  background: white;\n  padding: 5px;\n  width: 100%;\n  padding: 10px;\n  @media (max-width: 768px) {\n    margin: 0 5vw;\n  }\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  margin-top: 5px;\n`;\n","import { Query } from \"react-apollo\";\nimport ReChart from \"./Trades\";\nimport Sidebar from \"../Menu/Menu\";\nimport gql from \"graphql-tag\";\nimport styled from \"styled-components\";\nimport { inject, observer } from \"mobx-react\";\nimport {\n  ContainDiv,\n  NextToDiv,\n  NextToDivHeader,\n  RowContainer,\n  ContainDivHeader,\n} from \"./Trades\";\nimport { getStateDate } from \"../Helpers/Functions\";\nimport { equal } from \"fast-deep-equal\";\nimport ApiKeyForm from \"./AddApiForm\";\nimport TotalDat from \"./Dashboard\";\nimport TotalDat768 from \"./768px/Dashboard\";\nimport { when, reaction } from \"mobx\";\n\n@inject([\"store\"])\n@observer\nclass FetchQuery extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { startDate: \"\", endDate: \"\", date: \"\" };\n  }\n\n  componentDidMount() {\n    console.log(\"loaded fetch query component\");\n  }\n\n  clicked = () => {\n    store.isAuth = !store.isAuth;\n    console.log(store.isAuth);\n  };\n\n  render() {\n    let fetchTradeHistoryVariables = {\n      start: this.props.store.startDate,\n      end: this.props.store.endDate,\n      symbol: this.props.store.symbol,\n    };\n    return (\n      <div>\n        <Comp\n          query={fetchTradeHistoryQuery}\n          vars={fetchTradeHistoryVariables}\n        />\n      </div>\n    );\n  }\n}\n\n@inject([\"store\"])\n@observer\nclass Comp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { width: 0 };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.tempTagsReaction = reaction(\n      () => this.props.store.hasTempTags,\n      (notifications, reaction) => {\n        this.forceUpdate(console.log(\"FORCE UPDATE WAS CALLED\"));\n      }\n    );\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    this.tempTagsReaction();\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    console.log(window.innerWidth);\n    this.setState({\n      width: window.innerWidth,\n    });\n  }\n\n  render() {\n    console.log(\"rerendered\");\n    return (\n      <Query query={this.props.query} variables={this.props.vars}>\n        {({ loading, error, data }) => {\n          if (error) return <div>no data loaded</div>;\n          if (loading) return <div>Loading</div>;\n          if (data.checkApiKey == false) {\n            return <ApiKeyForm />;\n          } else if (data.checkApiKey == true) {\n            this.props.store.resetHasTempTags();\n            this.props.store.clearTempNotes();\n            this.props.store.clearTempTags();\n            this.props.store.resetPnl();\n\n            if (this.state.width > 768) {\n              return <TotalDat data={data} />;\n            } else {\n              return <TotalDat768 data={data} />;\n            }\n          }\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default FetchQuery;\n\nconst fetchTradeHistoryQuery = gql`\n  query fetchTradeHistory($start: String!, $end: String!, $symbol: String!) {\n    checkApiKey\n\n    fetchTradeHistory(start: $start, end: $end, symbol: $symbol) {\n      id\n      timestamp\n      side\n      price\n      orderQty\n      leavesQty\n      currentQty\n      avgEntryPrice\n      execGrossPnl\n      realizedPnl\n      commission\n      execType\n      orderType\n      trdStart\n      trdEnd\n      notes\n      hashtags\n    }\n\n    fetchOneMinuteCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchOneHourCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchOneDayCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchFiveMinuteCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n  }\n`;\n","import React, { PureComponent, Component } from \"react\";\nimport {\n  LineChart,\n  AreaChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { wideFont, smallFont } from \"../shared/helpers\";\nimport theme from \"../theme\";\nimport {\n  formatDateMonthOnly,\n  calcCommission,\n  formatDateShort,\n  formatDateShortWithHour,\n} from \"../Helpers/Functions.js\";\nimport { inject, observer } from \"mobx-react\";\nimport MainChart from \"../Charts2/index\";\nimport Notes from \"./Notes\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretDown, faCaretUp } from \"@fortawesome/free-solid-svg-icons\";\nimport equal from \"fast-deep-equal\";\nimport { when } from \"mobx\";\n\nexport default class Example extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0,\n      height: 0,\n      data: [],\n      fullTrades: [],\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.createFullTrades = this.createFullTrades.bind(this);\n  }\n\n  createFullTrades(data) {\n    let fullRay = [];\n    let fullTrades = [];\n    for (let i = 0; i < data.fetchTradeHistory.length; i++) {\n      fullRay.unshift(data.fetchTradeHistory[i]);\n      if (i == data.fetchTradeHistory.length - 1) {\n        for (let j = 0; j < fullRay.length; j++) {\n          let dat = fullRay[j];\n          // dat.timestamp = formatDateForRow(dat.timestamp);\n          // fullRay[j] = dat;\n          if (dat.trdStart == true) {\n            let sliced = fullRay.slice(j, fullRay.length);\n            for (let k = 0; k < sliced.length; k++) {\n              if (sliced[k].trdEnd == true && k > 0) {\n                let newsliced = sliced.slice(0, k + 1);\n                fullTrades.unshift(newsliced);\n                break;\n              }\n            }\n          }\n          if (j == fullRay.length - 1) {\n            let returnVal = {};\n            returnVal[\"initData\"] = this.props.initData;\n            returnVal[\"data\"] = fullRay;\n            returnVal[\"fullTrades\"] = fullTrades;\n            return returnVal;\n          }\n        }\n      }\n    }\n  }\n\n  filter() {}\n\n  componentDidUpdate(prevProps) {\n    if (!equal(this.props.filteredData, prevProps.filteredData)) {\n      console.log(\"WAS NOT EQUAL\");\n      // this.updateTrades(this.props.data);\n      let newFullTrades = [];\n      let firstFullTrades = this.createFullTrades(this.props.data);\n      firstFullTrades = firstFullTrades.fullTrades;\n      console.log(this.props.data);\n      if (this.props.filteredData == null) {\n        console.log(\"was null\", firstFullTrades);\n        this.setState({ fullTrades: firstFullTrades });\n      } else {\n        for (let i = 0; i < firstFullTrades.length; i++) {\n          for (let j = 0; j < this.props.filteredData.length; j++) {\n            if (firstFullTrades[i][0].id == this.props.filteredData[j].id) {\n              console.log(\"ADDING\", firstFullTrades[i]);\n              newFullTrades.unshift(firstFullTrades[i]);\n            }\n          }\n          if (i == firstFullTrades.length - 1) {\n            console.log(newFullTrades, \"NEW FULL\");\n            this.setState({ fullTrades: newFullTrades });\n          }\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    console.log(\"MOUNTING\");\n    let returned = this.createFullTrades(this.props.data);\n    if (returned != undefined) {\n      this.setState({\n        data: returned.fullRay,\n        fullTrades: returned.fullTrades,\n        initData: returned.initData,\n      });\n    } else {\n      this.setState({\n        data: this.props.initData,\n        initData: this.props.initData,\n      });\n    }\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    if (window.innerWidth < 768) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.9,\n      });\n    } else if (window.innerWidth < 1024) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.9 - 179,\n      });\n    } else if (window.innerWidth >= 1024) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.8 - 179,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <ThemeProvider theme={theme(false)}>\n        <div style={{ minWidth: this.state.chartWidth }}>\n          {this.state.fullTrades.map((slic, i) => {\n            console.log(slic);\n            return (\n              <MakeCol\n                slic={slic}\n                onemin={this.props.data.fetchOneMinuteCandleHistory}\n                fivemin={this.props.data.fetchFiveMinuteCandleHistory}\n                onehour={this.props.data.fetchOneHourCandleHistory}\n                oneday={this.props.data.fetchOneDayCandleHistory}\n                key={i}\n              />\n            );\n          })}\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n\n@inject(\"store\")\n@observer\nclass MakeCol extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      pnl: 0,\n      avgEntryPrice: 0,\n      avgExitPrice: 0,\n      clicked: false,\n      cumQty: 0,\n      readMoreClicked: false,\n    };\n    this.readMoreClicked = this.readMoreClicked.bind(this);\n    this.clicked = this.clicked.bind(this);\n    this.getSlicData = this.getSlicData.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  updateWindowDimensions() {\n    console.log(this.state.width);\n    this.setState({\n      width: window.innerWidth,\n    });\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n  componentDidMount() {\n    console.log(\"MOUNTED\", this.props.slic);\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n  componentDidUpdate(prevProps) {\n    if (!equal(this.props.slic, prevProps.slic)) {\n      console.log(\"UPDATED\");\n      this.getSlicData();\n    }\n  }\n\n  componentWillMount() {\n    this.getSlicData();\n    this.updateWindowDimensions();\n  }\n\n  getSlicData() {\n    this.state.data = this.props.slic;\n    if (\n      this.state.data[0].side == \"Buy\" &&\n      this.state.data[0].execType == \"Trade\"\n    ) {\n      let avgBuyPrice = 0;\n      let avgSellPrice = 0;\n      let totBuyContracts = 0;\n      let totSellContracts = 0;\n      let buyNum = 0;\n      let sellNum = 0;\n      let totBuyContractsMult = 0;\n      let totSellContractsMult = 0;\n      let realQty = 0;\n      let totCommission = 0;\n      for (let i = 0; i < this.state.data.length; i++) {\n        realQty = this.state.data[i].orderQty - this.state.data[i].leavesQty;\n        if (this.state.data[i].side == \"Buy\") {\n          buyNum += 1;\n          totBuyContracts += realQty;\n          totBuyContractsMult += realQty * parseFloat(this.state.data[i].price);\n        }\n        if (this.state.data[i].side == \"Sell\") {\n          sellNum += 1;\n          totSellContracts += realQty;\n          totSellContractsMult +=\n            realQty * parseFloat(this.state.data[i].price);\n        }\n        // console.log(\"REAL QTY\", realQty);\n        if (\n          this.state.data[i].orderType == \"Limit\" &&\n          this.state.data[i].execType !== \"Funding\"\n        ) {\n          totCommission += (realQty * 0.0025) / this.state.data[i].price;\n        }\n        if (this.state.data[i].orderType == \"Market\") {\n          totCommission -= (realQty * 0.0075) / this.state.data[i].price;\n        }\n        if (this.state.data[i].orderType.includes(\"Stop\")) {\n          totCommission -= (realQty * 0.0075) / this.state.data[i].price;\n        }\n        if (i == this.state.data.length - 1) {\n          avgBuyPrice = totBuyContractsMult / totBuyContracts;\n          avgSellPrice = totSellContractsMult / totSellContracts;\n          let avgExit;\n          let avgEntry;\n          if (avgBuyPrice != null) {\n            // this.state.avgEntryPrice = avgBuyPrice;\n            avgEntry = avgBuyPrice;\n          } else {\n            avgEntry = 0;\n            // this.state.avgEntryPrice = 0;\n          }\n          if (avgSellPrice != null) {\n            // this.state.avgExitPrice = avgSellPrice;\n            avgExit = avgSellPrice;\n          } else {\n            // this.state.avgExitPrice = 0;\n            avgExit = 0;\n          }\n          this.state.cumQty = totBuyContracts;\n          let thePnl = (1 / avgBuyPrice - 1 / avgSellPrice) * totSellContracts;\n          if (thePnl != null) {\n            let myPnl = thePnl + totCommission;\n            this.setState(\n              {\n                pnl: myPnl,\n                avgEntryPrice: avgEntry,\n                avgExitPrice: avgExit,\n              },\n              () => console.log(\"STATE IS SET\")\n            );\n            this.props.store.addPnl(myPnl);\n          } else {\n            // this.state.pnl = 0;\n            this.setState(\n              {\n                pnl: 0,\n                avgEntryPrice: avgEntry,\n                avgExitPrice: avgExit,\n              },\n              () => console.log(\"STATE IS SET\")\n            );\n          }\n        }\n      }\n    }\n    if (\n      this.state.data[0].side == \"Sell\" &&\n      this.state.data[0].execType == \"Trade\"\n    ) {\n      let totBuyContracts = 0;\n      let totSellContracts = 0;\n      let buyNum = 0;\n      let sellNum = 0;\n      let totBuyContractsMult = 0;\n      let totSellContractsMult = 0;\n      let realQty = 0;\n      let totCommission = 0;\n      for (let i = 0; i < this.state.data.length; i++) {\n        realQty = this.state.data[i].orderQty - this.state.data[i].leavesQty;\n        if (this.state.data[i].side == \"Buy\") {\n          // totBuyPrice += parseFloat(this.state.data[i].price);\n          buyNum += 1;\n          totBuyContracts += realQty;\n          totBuyContractsMult += realQty * parseFloat(this.state.data[i].price);\n        }\n        if (this.state.data[i].side == \"Sell\") {\n          sellNum += 1;\n          totSellContracts += realQty;\n          totSellContractsMult +=\n            realQty * parseFloat(this.state.data[i].price);\n        }\n        // console.log(\"REAL QTY\", realQty);\n        if (\n          this.state.data[i].orderType == \"Limit\" &&\n          this.state.data[i].execType !== \"Funding\"\n        ) {\n          totCommission += (realQty * 0.0025) / this.state.data[i].price;\n        }\n        if (this.state.data[i].orderType == \"Market\") {\n          totCommission -= (realQty * 0.0075) / this.state.data[i].price;\n        }\n        if (this.state.data[i].orderType.includes(\"Stop\")) {\n          totCommission -= (realQty * 0.0075) / this.state.data[i].price;\n        }\n        if (i == this.state.data.length - 1) {\n          let avgBuyPrice = totBuyContractsMult / totBuyContracts;\n          let avgSellPrice = totSellContractsMult / totSellContracts;\n          let pnl = (1 / avgBuyPrice - 1 / avgSellPrice) * totBuyContracts;\n          let avgEntry;\n          let avgExit;\n          if (avgBuyPrice != null) {\n            avgExit = avgBuyPrice;\n          } else {\n            avgExit = 0;\n          }\n          if (avgSellPrice != null) {\n            avgEntry = avgSellPrice;\n          } else {\n            avgEntry = 0;\n          }\n          this.state.cumQty = totSellContracts;\n          if (pnl != null) {\n            let myPnl = pnl + totCommission;\n            this.setState(\n              {\n                pnl: myPnl,\n                avgEntryPrice: avgEntry,\n                avgExitPrice: avgExit,\n              },\n              () => console.log(\"STATE IS SET\")\n            );\n            this.props.store.addPnl(myPnl);\n          } else {\n            // this.state.pnl = 0;\n            this.setState(\n              {\n                pnl: 0,\n                avgEntryPrice: avgEntry,\n                avgExitPrice: avgExit,\n              },\n              () => console.log(\"STATE IS SET\")\n            );\n          }\n        }\n      }\n    }\n  }\n\n  clicked() {\n    // console.log(this.state);\n    if (this.state.clicked == false) {\n      this.setState({ clicked: true });\n    } else {\n      this.setState({ clicked: false });\n    }\n  }\n  readMoreClicked() {\n    // console.log(this.state);\n    if (this.state.readMoreClicked == false) {\n      this.setState({ readMoreClicked: true });\n    } else {\n      this.setState({ readMoreClicked: false });\n    }\n  }\n\n  render() {\n    if (this.state.width > 1380) {\n      if (this.state.clicked == false) {\n        return (\n          <ContainDiv onClick={this.clicked.bind(this)}>\n            <NextToDiv>\n              {formatDateMonthOnly(this.state.data[0].timestamp)}\n            </NextToDiv>\n            <NextToDiv>\n              {formatDateMonthOnly(\n                this.state.data[this.state.data.length - 1].timestamp\n              )}\n            </NextToDiv>\n            <IsShort side={this.state.data[0].side} />\n            <NextToDiv>${this.state.avgEntryPrice.toFixed(1)}</NextToDiv>\n            <NextToDiv>${this.state.avgExitPrice.toFixed(1)}</NextToDiv>\n            <NextToDiv>{this.state.cumQty}</NextToDiv>\n            <NextToDiv>{this.state.pnl.toFixed(4) + \"xbt\"}</NextToDiv>\n          </ContainDiv>\n        );\n      } else {\n        return (\n          <TotalDetails>\n            {this.state.readMoreClicked ? (\n              <MoreBoxTall>\n                <ContainDivClicked onClick={this.clicked.bind(this)}>\n                  <NextToDiv>\n                    {formatDateMonthOnly(this.state.data[0].timestamp)}\n                  </NextToDiv>\n                  <NextToDiv>\n                    {formatDateMonthOnly(\n                      this.state.data[this.state.data.length - 1].timestamp\n                    )}\n                  </NextToDiv>\n                  <IsShort side={this.state.data[0].side} />\n                  <NextToDiv>${this.state.avgEntryPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>${this.state.avgExitPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>{this.state.cumQty}</NextToDiv>\n                  <NextToDiv>{this.state.pnl.toFixed(4) + \"xbt\"}</NextToDiv>\n                </ContainDivClicked>\n                <Notes firstTrade={this.state.data[0]} />\n                <ContainDivBlack>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Timestamp</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Side</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Order Type</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Price</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Order Qty</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Leaves Qty</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Commission</TitleSpan>\n                  </NextToDivBlackTitle>\n                </ContainDivBlack>\n\n                {this.state.data.map((dat) => {\n                  return (\n                    <ContainDivBlack onClick={this.clicked.bind(this)}>\n                      <NextToDivBlack>\n                        {formatDateMonthOnly(dat.timestamp)}\n                      </NextToDivBlack>\n                      {dat.execType == \"Trade\" ? (\n                        <NextToDivBlack>{dat.side}</NextToDivBlack>\n                      ) : (\n                        <NextToDivBlack>{dat.execType}</NextToDivBlack>\n                      )}\n                      <NextToDivBlack>{dat.orderType}</NextToDivBlack>\n                      <NextToDivBlack>${dat.price.toString()}</NextToDivBlack>\n                      <NextToDivBlack>{dat.orderQty}</NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.leavesQty == \"0\" ? \"\" : dat.leavesQty}\n                      </NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.execType == \"Funding\"\n                          ? \"\"\n                          : calcCommission(\n                              dat.price,\n                              dat.side,\n                              dat.orderQty,\n                              dat.leavesQty,\n                              dat.orderType\n                            )}\n                      </NextToDivBlack>\n                    </ContainDivBlack>\n                  );\n                })}\n                <ReadMoreTall>\n                  <ReadMoreInner onClick={this.readMoreClicked}>\n                    <FontAwesomeIcon\n                      icon={faCaretUp}\n                      style={{ transition: \"none\" }}\n                    />\n                  </ReadMoreInner>\n                </ReadMoreTall>\n              </MoreBoxTall>\n            ) : (\n              <MoreBoxShort>\n                <ContainDivClicked onClick={this.clicked}>\n                  <NextToDiv>\n                    {formatDateMonthOnly(this.state.data[0].timestamp)}\n                  </NextToDiv>\n                  <NextToDiv>\n                    {formatDateMonthOnly(\n                      this.state.data[this.state.data.length - 1].timestamp\n                    )}\n                  </NextToDiv>\n                  <IsShort side={this.state.data[0].side} />\n                  <NextToDiv>${this.state.avgEntryPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>${this.state.avgExitPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>{this.state.cumQty}</NextToDiv>\n                  <NextToDiv>{this.state.pnl.toFixed(4) + \"xbt\"}</NextToDiv>\n                </ContainDivClicked>\n                <Notes firstTrade={this.state.data[0]} />\n                <ContainDivBlack>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Timestamp</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Side</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Order Type</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Price</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Order Qty</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Leaves Qty</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Commission</TitleSpan>\n                  </NextToDivBlackTitle>\n                </ContainDivBlack>\n\n                {this.state.data.map((dat) => {\n                  return (\n                    <ContainDivBlack onClick={this.clicked.bind(this)}>\n                      <NextToDivBlack>\n                        {formatDateMonthOnly(dat.timestamp)}\n                      </NextToDivBlack>\n                      {dat.execType == \"Trade\" ? (\n                        <NextToDivBlack>{dat.side}</NextToDivBlack>\n                      ) : (\n                        <NextToDivBlack>{dat.execType}</NextToDivBlack>\n                      )}\n                      <NextToDivBlack>{dat.orderType}</NextToDivBlack>\n                      <NextToDivBlack>${dat.price.toString()}</NextToDivBlack>\n                      <NextToDivBlack>{dat.orderQty}</NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.leavesQty == \"0\" ? \"\" : dat.leavesQty}\n                      </NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.execType == \"Funding\"\n                          ? \"\"\n                          : calcCommission(\n                              dat.price,\n                              dat.side,\n                              dat.orderQty,\n                              dat.leavesQty,\n                              dat.orderType\n                            )}\n                      </NextToDivBlack>\n                    </ContainDivBlack>\n                  );\n                })}\n                <ReadMore>\n                  <ReadMoreInner onClick={this.readMoreClicked}>\n                    <FontAwesomeIcon\n                      icon={faCaretDown}\n                      style={{ transition: \"none\" }}\n                    />\n                  </ReadMoreInner>\n                </ReadMore>\n              </MoreBoxShort>\n            )}\n\n            <MainChart\n              onemin={this.props.onemin}\n              fivemin={this.props.fivemin}\n              onehour={this.props.onehour}\n              oneday={this.props.oneday}\n              trades={this.state.data}\n            />\n          </TotalDetails>\n        );\n      }\n    } else {\n      if (this.state.clicked == false) {\n        return (\n          <ContainDiv onClick={this.clicked.bind(this)}>\n            <NextToDiv>\n              {formatDateShort(this.state.data[0].timestamp)}\n            </NextToDiv>\n            <NextToDiv>\n              {formatDateShort(\n                this.state.data[this.state.data.length - 1].timestamp\n              )}\n            </NextToDiv>\n            <IsShort side={this.state.data[0].side} />\n            <NextToDiv>${this.state.avgEntryPrice.toFixed(1)}</NextToDiv>\n            <NextToDiv>${this.state.avgExitPrice.toFixed(1)}</NextToDiv>\n            <NextToDiv>{this.state.cumQty}</NextToDiv>\n            <NextToDiv>{this.state.pnl.toFixed(4) + \"xbt\"}</NextToDiv>\n          </ContainDiv>\n        );\n      } else {\n        return (\n          <TotalDetails>\n            {this.state.readMoreClicked ? (\n              <MoreBoxTall>\n                <ContainDivClicked onClick={this.clicked.bind(this)}>\n                  <NextToDiv>\n                    {formatDateShort(this.state.data[0].timestamp)}\n                  </NextToDiv>\n                  <NextToDiv>\n                    {formatDateShort(\n                      this.state.data[this.state.data.length - 1].timestamp\n                    )}\n                  </NextToDiv>\n                  <IsShort side={this.state.data[0].side} />\n                  <NextToDiv>${this.state.avgEntryPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>${this.state.avgExitPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>{this.state.cumQty}</NextToDiv>\n                  <NextToDiv>{this.state.pnl.toFixed(4) + \"xbt\"}</NextToDiv>\n                </ContainDivClicked>\n                <Notes firstTrade={this.state.data[0]} />\n                <ContainDivBlack>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Timestamp</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Side</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Order Type</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Price</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Order Qty</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Leaves Qty</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Commission</TitleSpan>\n                  </NextToDivBlackTitle>\n                </ContainDivBlack>\n\n                {this.state.data.map((dat) => {\n                  return (\n                    <ContainDivBlack onClick={this.clicked.bind(this)}>\n                      <NextToDivBlackTime>\n                        {formatDateShortWithHour(dat.timestamp)}\n                      </NextToDivBlackTime>\n                      {dat.execType == \"Trade\" ? (\n                        <NextToDivBlack>{dat.side}</NextToDivBlack>\n                      ) : (\n                        <NextToDivBlack>{dat.execType}</NextToDivBlack>\n                      )}\n                      <NextToDivBlack>{dat.orderType}</NextToDivBlack>\n                      <NextToDivBlack>${dat.price.toString()}</NextToDivBlack>\n                      <NextToDivBlack>{dat.orderQty}</NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.leavesQty == \"0\" ? \"\" : dat.leavesQty}\n                      </NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.execType == \"Funding\"\n                          ? \"\"\n                          : calcCommission(\n                              dat.price,\n                              dat.side,\n                              dat.orderQty,\n                              dat.leavesQty,\n                              dat.orderType\n                            )}\n                      </NextToDivBlack>\n                    </ContainDivBlack>\n                  );\n                })}\n                <ReadMoreTall>\n                  <ReadMoreInner onClick={this.readMoreClicked}>\n                    <FontAwesomeIcon\n                      icon={faCaretUp}\n                      style={{ transition: \"none\" }}\n                    />\n                  </ReadMoreInner>\n                </ReadMoreTall>\n              </MoreBoxTall>\n            ) : (\n              <MoreBoxShort>\n                <ContainDivClicked onClick={this.clicked}>\n                  <NextToDiv>\n                    {formatDateShort(this.state.data[0].timestamp)}\n                  </NextToDiv>\n                  <NextToDiv>\n                    {formatDateShort(\n                      this.state.data[this.state.data.length - 1].timestamp\n                    )}\n                  </NextToDiv>\n                  <IsShort side={this.state.data[0].side} />\n                  <NextToDiv>${this.state.avgEntryPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>${this.state.avgExitPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>{this.state.cumQty}</NextToDiv>\n                  <NextToDiv>{this.state.pnl.toFixed(4) + \"xbt\"}</NextToDiv>\n                </ContainDivClicked>\n                <Notes firstTrade={this.state.data[0]} />\n                <ContainDivBlack>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Timestamp</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Side</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Order Type</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Price</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Order Qty</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Leaves Qty</TitleSpan>\n                  </NextToDivBlackTitle>\n                  <NextToDivBlackTitle>\n                    <TitleSpan>Commission</TitleSpan>\n                  </NextToDivBlackTitle>\n                </ContainDivBlack>\n\n                {this.state.data.map((dat) => {\n                  return (\n                    <ContainDivBlack onClick={this.clicked.bind(this)}>\n                      <NextToDivBlackTime>\n                        {formatDateShortWithHour(dat.timestamp)}\n                      </NextToDivBlackTime>\n                      {dat.execType == \"Trade\" ? (\n                        <NextToDivBlack>{dat.side}</NextToDivBlack>\n                      ) : (\n                        <NextToDivBlack>{dat.execType}</NextToDivBlack>\n                      )}\n                      <NextToDivBlack>{dat.orderType}</NextToDivBlack>\n                      <NextToDivBlack>${dat.price.toString()}</NextToDivBlack>\n                      <NextToDivBlack>{dat.orderQty}</NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.leavesQty == \"0\" ? \"\" : dat.leavesQty}\n                      </NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.execType == \"Funding\"\n                          ? \"\"\n                          : calcCommission(\n                              dat.price,\n                              dat.side,\n                              dat.orderQty,\n                              dat.leavesQty,\n                              dat.orderType\n                            )}\n                      </NextToDivBlack>\n                    </ContainDivBlack>\n                  );\n                })}\n                <ReadMore>\n                  <ReadMoreInner onClick={this.readMoreClicked}>\n                    <FontAwesomeIcon\n                      icon={faCaretDown}\n                      style={{ transition: \"none\" }}\n                    />\n                  </ReadMoreInner>\n                </ReadMore>\n              </MoreBoxShort>\n            )}\n\n            <MainChart\n              onemin={this.props.onemin}\n              fivemin={this.props.fivemin}\n              onehour={this.props.onehour}\n              oneday={this.props.oneday}\n              trades={this.state.data}\n            />\n          </TotalDetails>\n        );\n      }\n    }\n  }\n}\n\nclass IsShort extends Component {\n  render() {\n    if (this.props.side == \"Sell\") {\n      return <NextToDiv>Short</NextToDiv>;\n    } else {\n      return <NextToDiv>Long</NextToDiv>;\n    }\n  }\n}\n\nexport const ContainDiv = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  height: 52px;\n\n  font-weight: 400;\n  border-bottom: 1px solid #f2f2f2;\n\n  &:hover {\n    border-bottom: none;\n    transition: none;\n    border-left: 3px solid #212528;\n    cursor: pointer;\n  }\n`;\nexport const ContainDivClicked = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  height: 52px;\n\n  transition: none;\n\n  font-weight: 400;\n  border-bottom: 1px solid #f2f2f2;\n  border-left: 5px solid #212528;\n  border-radius: none;\n  cursor: pointer;\n  background: #f8f8ff;\n`;\nexport const ContainDivBlack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  height: 42px;\n  background: #f8f8ff;\n\n  border-bottom: 1px solid #f2f2f2;\n`;\nexport const ContainDivHeader = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  height: 42px;\n  border-bottom: 1px solid #d3d3d3;\n`;\n// f2f2f2\n\nexport const NextToDiv = styled.div`\n  display: inline-block;\n  width: 30%;\n  padding: 8px;\n  padding-top: 14px;\n  padding-left: 12px;\n  font-size: 15px;\n  color: #000000;\n  border-right: 1px solid #f2f2f2;\n\n  font-weight: 300;\n  font-size: 15px;\n\n  @media (max-width: 550px) {\n    font-size: 13px;\n  }\n`;\n\nexport const NextToDivBlack = styled.div`\n  display: inline-block;\n  width: 30%;\n  padding: 4px;\n  padding-left: 12px;\n  font-size: 14px;\n  padding-top: 9px;\n  border-right: 1px solid #f2f2f2;\n`;\nexport const NextToDivBlackTitle = styled.div`\n  display: inline-block;\n  width: 30%;\n  padding: 4px;\n  padding-left: 14px;\n  padding-top: 9px;\n  font-size: 14px;\n`;\n\nconst TitleSpan = styled.span`\n  display: inline-block;\n  border-bottom: 1px dotted black;\n  padding-bottom: 0px;\n  font-size: 13px;\n  font-weight: 300;\n  color: black;\n`;\nexport const NextToDivBlackTime = styled.div`\n  display: inline-block;\n  width: 30%;\n  padding: 4px;\n  padding-left: 12px;\n  font-size: 14px;\n  padding-top: 10px;\n  @media (max-width: 1200px) {\n    font-size: 13px;\n  }\n  @media (max-width: 663px) {\n    padding-top: 0px !important;\n  }\n`;\nexport const NextToDivHeader = styled.div`\n  display: inline-block;\n  width: 30%;\n  color: #78838e;\n  font-weight: 600;\n  display: inline-block;\n  text-transform: uppercase;\n  padding: 10px;\n  padding-left: 12px;\n  ${smallFont}\n  font-size:13px;\n`;\n\nconst ReadMore = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  text-align: center;\n  margin: 0;\n  padding: 10px 0;\n\n  /* \"transparent\" only works here because == rgba(0,0,0,0) */\n\n  background-image: -webkit-gradient(\n    linear,\n    left top,\n    left bottom,\n    color-stop(0, rgba(255, 0, 0, 0)),\n    color-stop(1, rgba(248, 248, 255, 1))\n  );\n`;\nconst ReadMoreTall = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  text-align: center;\n  margin: 0;\n  padding: 10px 0;\n`;\n// background-image: linear-gradient(to bottom, transparent, black);\nconst MoreBoxShort = styled.div`\n  max-height: 300px;\n  position: relative;\n  overflow: hidden;\n`;\nconst MoreBoxTall = styled.div`\n  max-height: none;\n  position: relative;\n  overflow: hidden;\n`;\n\nconst TotalDetails = styled.div``;\n// border: 1px solid rgba(33, 37, 40, 0.7);\nconst ReadMoreInner = styled.div`\n  color: rgba(33, 37, 40, 1);\n\n  padding: 0;\n  margin: auto;\n  width: 30px;\n  border-radius: 2px;\n  -webkit-transition-property: none;\n  -moz-transition-property: none;\n  -o-transition-property: none;\n  transition-property: none;\n\n  :hover {\n    cursor: pointer;\n    background-color: rgba(33, 37, 40, 1);\n    color: #fff;\n    -webkit-transition-property: none;\n    -moz-transition-property: none;\n    -o-transition-property: none;\n    transition-property: none;\n  }\n  font-size: 20px;\n`;\n","import React from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport theme from \"../../theme\";\nimport CategoryList from \"./CategoryList\";\nimport Header from \"./Header\";\nimport { inject } from \"mobx-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useEffect, useState } from \"react\";\nimport { ContainDivClicked } from \"../../Dashboard/Trades\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretDown, faCaretUp } from \"@fortawesome/free-solid-svg-icons\";\n\n// border: 1px solid ${props => props.theme.border};\n\nconst Sidebar = inject(\"store\")(\n  observer(({ store }) => {\n    const [dropdown, setDropdown] = useState(false);\n\n    const clicked = (value) => {\n      store.setSymbol(value);\n      store.changeHasTempTags();\n      setDropdown(false);\n    };\n\n    const showDropdown = () => {\n      if (dropdown == false) {\n        setDropdown(true);\n      } else {\n        setDropdown(false);\n      }\n    };\n    return (\n      <LapContain>\n        <LapInner>\n          <LapFurtherIn>\n            <SetSymbol\n              onClick={() => {\n                showDropdown();\n              }}\n            >\n              {dropdown == true ? (\n                <FontAwesomeIcon\n                  icon={faCaretUp}\n                  style={{\n                    transition: \"none\",\n                    marginRight: \"4px\",\n                    marginLeft: \"3px\",\n                  }}\n                />\n              ) : (\n                <FontAwesomeIcon\n                  icon={faCaretDown}\n                  style={{\n                    transition: \"none\",\n                    marginRight: \"4px\",\n                    marginLeft: \"3px\",\n                  }}\n                />\n              )}\n              {store.symbol}\n            </SetSymbol>\n            {dropdown == true ? (\n              <DropdownListContainer>\n                <DropdownListItem onClick={() => clicked(\"XBTUSD\")}>\n                  XBTUSD\n                </DropdownListItem>\n                <DropdownListItem onClick={() => clicked(\"XBTU20\")}>\n                  XBTU20\n                </DropdownListItem>\n                <DropdownListItem onClick={() => clicked(\"XBTM20\")}>\n                  XBTM20\n                </DropdownListItem>\n              </DropdownListContainer>\n            ) : null}\n          </LapFurtherIn>\n        </LapInner>\n        <LapInner>\n          <LapFurtherIn>\n            <CategoryList />\n          </LapFurtherIn>\n        </LapInner>\n        {store.pnl >= 0 ? (\n          <LapInner>\n            <InnerLapper>+{store.pnl.toFixed(4) + \"xbt\"}</InnerLapper>\n          </LapInner>\n        ) : (\n          <LapInner>\n            <InnerLapper>-{store.pnl.toFixed(4) + \"xbt\"}</InnerLapper>\n          </LapInner>\n        )}\n      </LapContain>\n    );\n  })\n);\n\nconst LapContain = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst LapInner = styled.div`\n  background-color: #212529;\n  margin: 4px 15px;\n  border-radius: 2px;\n`;\nconst LapFurtherIn = styled.div`\n  margin: 0 auto;\n  width: 100px;\n`;\n\nexport default Sidebar;\n\nconst LapperMegaContainer = styled.div`\n  display: absolute;\n`;\nconst LapperContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 24px;\n`;\n\nconst Lapper = styled.aside`\n  display: flex;\n  flex-direction: column;\n  flex-basis: 240px;\n\n  border-radius: 2px;\n  background-color: ${(props) => props.theme.foreground};\n  background-color: #212529;\n  margin-bottom: 10px;\n  @media (max-width: 768px) {\n    display: none;\n  }\n`;\nconst InnerLapper = styled.div`\n  color: white;\n  text-align: center;\n  margin: auto;\n`;\n\nconst Lapper2 = styled.aside`\n  border-radius: 2px;\n  background-color: ${(props) => props.theme.foreground};\n  background-color: green;\n  max-height: 30px;\n  @media (max-width: 768px) {\n    display: none;\n  }\n`;\n\nconst Lapper3 = styled.aside`\n  border-radius: 2px;\n  background-color: ${(props) => props.theme.foreground};\n  background-color: red;\n  max-height: 30px;\n  @media (max-width: 768px) {\n    display: none;\n  }\n`;\n\nconst Lapper4 = styled.aside`\n  display: flex;\n  flex-direction: column;\n\n  border-radius: 2px;\n  background-color: ${(props) => props.theme.foreground};\n  background-color: #212529;\n  margin-bottom: 10px;\n  @media (max-width: 768px) {\n    display: none;\n  }\n`;\nconst SetSymbol = styled.div`\n  font-size: 15px;\n  color: #fff;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst DropdownContainer = styled.div`\n  height: 100px;\n`;\nconst DropdownListContainer = styled.ul`\n  list-style-type: none;\n`;\nconst DropdownListItem = styled.li`\n  text-align: center;\n  font-size: 15px;\n  color: #fff;\n  :hover {\n    cursor: pointer;\n    color: #000;\n    background-color: #fff;\n  }\n`;\n","import React from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport theme from \"../theme\";\nimport CategoryList from \"./CategoryList\";\nimport Header from \"./Header\";\nimport { inject } from \"mobx-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useEffect, useState } from \"react\";\nimport { ContainDivClicked } from \"../Dashboard/Trades\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretDown, faCaretUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { wideFont } from \"../shared/helpers\";\n\n// border: 1px solid ${props => props.theme.border};\n\nexport const SymbolChooser = inject(\"store\")(\n  observer(({ store }) => {\n    const [dropdown, setDropdown] = useState(false);\n\n    const showDropdown = () => {\n      if (dropdown == false) {\n        setDropdown(true);\n      } else {\n        setDropdown(false);\n      }\n    };\n    return (\n      <SetSymbol\n        onClick={() => {\n          showDropdown();\n        }}\n      >\n        {dropdown == true ? (\n          <FontAwesomeIcon\n            icon={faCaretUp}\n            style={{\n              transition: \"none\",\n              marginRight: \"4px\",\n              marginLeft: \"3px\",\n            }}\n          />\n        ) : (\n          <FontAwesomeIcon\n            icon={faCaretDown}\n            style={{\n              transition: \"none\",\n              marginRight: \"4px\",\n              marginLeft: \"3px\",\n            }}\n          />\n        )}\n        {store.symbol}\n      </SetSymbol>\n    );\n  })\n);\n\nexport const Pnl = inject(\"store\")(\n  observer(({ store }) => {\n    return (\n      <div style={{ minHeight: \"100%\" }}>\n        {store.pnl >= 0 ? (\n          <Lapper2>\n            <InnerLapper>{store.pnl.toFixed(4) + \"xbt\"}</InnerLapper>\n          </Lapper2>\n        ) : (\n          <Lapper3>\n            <InnerLapper>{store.pnl.toFixed(4) + \"xbt\"}</InnerLapper>\n          </Lapper3>\n        )}\n      </div>\n    );\n  })\n);\n\nconst Sidebar = inject(\"store\")(\n  observer(({ store }) => {\n    const [dropdown, setDropdown] = useState(false);\n\n    const clicked = (value) => {\n      store.setSymbol(value);\n      store.changeHasTempTags();\n      setDropdown(false);\n    };\n\n    const showDropdown = () => {\n      if (dropdown == false) {\n        setDropdown(true);\n      } else {\n        setDropdown(false);\n      }\n    };\n\n    return (\n      <ThemeProvider theme={theme(false)}>\n        <LapperContainer>\n          <Lapper4>\n            <SetSymbol\n              onClick={() => {\n                showDropdown();\n              }}\n            >\n              {dropdown == true ? (\n                <FontAwesomeIcon\n                  icon={faCaretUp}\n                  style={{\n                    transition: \"none\",\n                    marginRight: \"4px\",\n                    marginLeft: \"3px\",\n                  }}\n                />\n              ) : (\n                <FontAwesomeIcon\n                  icon={faCaretDown}\n                  style={{\n                    transition: \"none\",\n                    marginRight: \"4px\",\n                    marginLeft: \"3px\",\n                  }}\n                />\n              )}\n              {store.symbol}\n            </SetSymbol>\n            {dropdown == true ? (\n              <DropdownListContainer>\n                <DropdownListItem onClick={() => clicked(\"XBTUSD\")}>\n                  XBTUSD\n                </DropdownListItem>\n                <DropdownListItem onClick={() => clicked(\"XBTU20\")}>\n                  XBTU20\n                </DropdownListItem>\n                <DropdownListItem onClick={() => clicked(\"XBTM20\")}>\n                  XBTM20\n                </DropdownListItem>\n              </DropdownListContainer>\n            ) : null}\n          </Lapper4>\n          <Lapper>\n            <CategoryList />\n          </Lapper>\n          {store.pnl >= 0 ? (\n            <Lapper2>\n              <InnerLapper>{store.pnl.toFixed(4) + \"xbt\"}</InnerLapper>\n            </Lapper2>\n          ) : (\n            <Lapper3>\n              <InnerLapper>{store.pnl.toFixed(4) + \"xbt\"}</InnerLapper>\n            </Lapper3>\n          )}\n        </LapperContainer>\n      </ThemeProvider>\n    );\n  })\n);\n\nexport default Sidebar;\nconst LapperContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 24px;\n`;\n\nconst Lapper = styled.aside`\n  display: flex;\n  flex-direction: column;\n  flex-basis: 240px;\n\n  border-radius: 2px;\n  background-color: ${(props) => props.theme.foreground};\n  background-color: #212529;\n  margin-bottom: 10px;\n  @media (max-width: 768px) {\n    display: none;\n  }\n`;\nconst InnerLapper = styled.div`\n  color: white;\n  text-align: center;\n  margin: auto;\n`;\n\nconst Lapper2 = styled.aside`\n  border-radius: 2px;\n  background-color: ${(props) => props.theme.foreground};\n  background-color: green;\n  margin: auto;\n`;\n\nconst Lapper3 = styled.aside`\n  border-radius: 2px;\n  background-color: ${(props) => props.theme.foreground};\n  background-color: red;\n  margin: auto;\n`;\n\nconst Lapper4 = styled.aside`\n  display: flex;\n  flex-direction: column;\n\n  border-radius: 2px;\n  background-color: ${(props) => props.theme.foreground};\n  background-color: #212529;\n  margin-bottom: 10px;\n  @media (max-width: 768px) {\n    display: none;\n  }\n`;\nexport const SetSymbol = styled.div`\n  font-weight: 500;\n  font-size: 14px;\n  ${wideFont}\n  color: #fff;\n  background-color: #212527;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst DropdownContainer = styled.div`\n  height: 100px;\n`;\nconst DropdownListContainer = styled.ul`\n  list-style-type: none;\n`;\nconst DropdownListItem = styled.li`\n  text-align: center;\n  ${wideFont}\n  font-weight:500;\n  font-size: 14px;\n  color: #fff;\n  :hover {\n    cursor: pointer;\n    color: #000;\n    background-color: #fff;\n  }\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAVA;AAWA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AAEA;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAfA;AAgBA;AACA;AACA;AA1CA;AA2CA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;AACA;;;;;AACA;AACA;AACA;AACA;;AADA;;;;;AACA;AACA;AAAA;;;;;AACA;AACA;;AADA;;;;;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AACA;AACA;AACA;AAHA;;;;AALA;;;;;AAHA;;;;;AAmBA;;;;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;AAEA;AACA;;AADA;;;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AArBA;AAsBA;AACA;AACA;AAAA;;;;;;;;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAtBA;AAuBA;AACA;AACA;;AA1DA;;;;;;;;;;;;;;;;;;;;AA4DA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAMA;AAEA;AAAA;AAAA;AADA;AAMA;AAEA;AAEA;AAAA;AAAA;AADA;AAMA;AAYA;AACA;AACA;AAHA;AAQA;AACA;;;;AAhOA;AACA;;AAkOA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvRA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAXA;AAYA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;AADA;AAGA;;;;;;AAEA;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAfA;AAgBA;AACA;AACA;AA1CA;AA2CA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;AACA;;;;;AACA;AACA;AACA;AACA;;AADA;;;;;AACA;AACA;AAAA;;;;;AACA;AACA;;AADA;;;;;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AACA;AACA;AACA;AAHA;;;;AALA;;;;;AAHA;;;;;AAmBA;;;;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;AAEA;AACA;;AADA;;;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AArBA;AAsBA;AACA;AACA;AAAA;;;;;;;;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAtBA;AAuBA;AACA;AACA;;AA1DA;;;;;;;;;;;;;;;;;;;;AA4DA;AAAA;AACA;AAAA;AACA;AAKA;AAEA;AAAA;AAAA;AADA;AAMA;AAEA;AAEA;AAAA;AAAA;AADA;AAMA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AA2BA;AACA;AACA;AAHA;AASA;AACA;;;;AA7PA;AACA;;AA+PA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxUA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAUA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;;;AAOA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAGA;AACA;AAFA;AAMA;;;;AA7BA;AAkCA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAHA;AAIA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;;;;AAtDA;AAyDA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnHA;AACA;AAWA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AATA;AAUA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAIA;;;;AA5IA;AACA;AADA;AAiJA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAdA;AAeA;AACA;;;AACA;AACA;AACA;AACA;AADA;AAGA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AASA;AAAA;AAOA;AACA;AAIA;AAAA;AASA;AAAA;AAMA;AAAA;AA0BA;AACA;AAAA;AA4BA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AASA;AAAA;AAMA;AAAA;AA0BA;AACA;AAAA;AA4BA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AAAA;AASA;AAAA;AAOA;AACA;AAIA;AAAA;AASA;AAAA;AAMA;AAAA;AA0BA;AACA;AAAA;AA4BA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AASA;AAAA;AAMA;AAAA;AA0BA;AACA;AAAA;AA4BA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;;;;AArnBA;AACA;AAunBA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAPA;AACA;AASA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACl9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAUA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAaA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAuBA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAKA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAMA;AAAA;AAOA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAEA;AAAA;AAQA;AAAA;AAAA;AAAA;AAEA;AAAA;AAQA;AAAA;AAAA;AAAA;AAKA;AAAA;AAOA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzaA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAqBA;AAGA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAMA;AAAA;AAOA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAEA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAKA;AAAA;AAAA;AAAA;AAKA;AAAA;AAOA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}