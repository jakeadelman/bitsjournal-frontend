{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.101482a99e29e768aa73.hot-update.js","sources":["webpack:///./components/Dashboard/Hashtags.js"],"sourcesContent":["import styled from \"styled-components\";\nimport {\n  ContainDiv,\n  NextToDiv,\n  NextToDivHeader,\n  RowContainer,\n  ContainDivHeader\n} from \"../Charts/ReChart\";\nimport ReChart from \"../Charts/ReChart\";\nimport Sidebar from \"../Categories/Menu\";\nimport { getNewDat } from \"./helpers\";\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      globalHash: [],\n      globalHashActive: [\"all\"],\n      data: null\n    };\n    this.getGlobalHashtags = this.getGlobalHashtags.bind(this);\n    this.hashtagClicked = this.hashtagClicked.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({ data: this.props.data });\n    this.getGlobalHashtags(this.props.data);\n  }\n  componentDidMount() {\n    console.log(this.state.data, \"THIS DAT\");\n  }\n\n  async getGlobalHashtags(data) {\n    for (let i = 0; i < data.fetchTradeHistory.length; i++) {\n      let thisTradeHash = data.fetchTradeHistory[i].hashtags.split(\",\");\n      if (thisTradeHash != \"undefined\") {\n        for (let j = 0; j < thisTradeHash.length; j++) {\n          if (thisTradeHash[j] != \"undefined\") {\n            let newGlobalHash = this.state.globalHash;\n            newGlobalHash.push(thisTradeHash[j]);\n            this.setState({ globalHash: newGlobalHash });\n            // let newDat = await getNewDat(data, this.state.globalHashActive);\n            // this.setState({ globalHash: newGlobalHash, data: newDat });\n          }\n        }\n      }\n    }\n  }\n\n  async hashtagClicked(value) {\n    console.log(\"CLICKED\");\n    console.log(this.state.data, \"THIS DAT\");\n    if (this.state.globalHashActive[0] == undefined) {\n      console.log(\"WAS UNDEFINED\");\n      let newArray = [];\n      newArray.push(value);\n      this.setState({ globalHashActive: newArray });\n      const index = this.state.globalHash.indexOf(value);\n      if (index > -1) {\n        let newGlobalHash = this.state.globalHash;\n        newGlobalHash.splice(index, 1);\n        this.setState({ globalHash: newGlobalHash });\n      }\n      console.log(this.state.globalHashActive);\n      console.log(this.state.globalHash);\n      return;\n    }\n    for (let i = 0; i < this.state.globalHashActive.length; i++) {\n      if (this.state.globalHashActive[i] == \"all\") {\n        this.state.globalHashActive = [];\n        const index = this.state.globalHash.indexOf(value);\n        if (index > -1) {\n          let newGlobalHash = this.state.globalHash;\n          newGlobalHash.splice(index, 1);\n          newGlobalHash.push(\"all\");\n          let newGlobalHashActive = this.state.globalHashActive;\n          newGlobalHashActive.push(value);\n          let newDat = getNewDat(this.state.data, newGlobalHashActive);\n          console.log(\"GOT NEW DAT\", newDat);\n          this.setState({\n            globalHashActive: newGlobalHashActive,\n            globalHash: newGlobalHash,\n            data: await newDat\n          });\n          console.log(this.state);\n          return;\n        }\n      }\n      if (value == this.state.globalHashActive[i]) {\n        return;\n      }\n      if (i == this.state.globalHashActive.length - 1) {\n        console.log(\"ENDING\");\n        const index = this.state.globalHash.indexOf(value);\n        if (index > -1) {\n          let newGlobalHash = this.state.globalHash;\n          newGlobalHash.splice(index, 1);\n          newGlobalHash.push(\"all\");\n          let newGlobalHashActive = this.state.globalHashActive;\n          newGlobalHashActive.push(value);\n          let newDat = getNewDat(this.state.data, newGlobalHashActive);\n          console.log(\"GOT NEW DAT\", newDat);\n          this.setState({\n            globalHashActive: newGlobalHashActive,\n            globalHash: newGlobalHash,\n            data: await newDat\n          });\n          console.log(this.state.globalHashActive);\n          console.log(this.state.globalHash);\n          console.log(this.state);\n          return;\n        }\n      }\n    }\n  }\n  render() {\n    // this.getGlobalHashtags(this.props.data);\n    console.log(\"RERENDERED\");\n    if (this.state.data != null) {\n      return (\n        <Wrapper>\n          <ChartWrapper>\n            <TopHashtagDiv>\n              {this.state.globalHashActive.map(hash => {\n                return (\n                  <TopHashtagIndividualActive>\n                    #{hash}\n                  </TopHashtagIndividualActive>\n                );\n              })}\n              {this.state.globalHash.map(hash => {\n                return (\n                  <TopHashtagIndividual\n                    onClick={() => this.hashtagClicked(hash)}\n                  >\n                    #{hash}\n                  </TopHashtagIndividual>\n                );\n              })}\n            </TopHashtagDiv>\n            <ContainDivHeader>\n              <NextToDivHeader>Start</NextToDivHeader>\n              <NextToDivHeader>End</NextToDivHeader>\n              <NextToDivHeader>Direction</NextToDivHeader>\n              <NextToDivHeader>Avg Entry</NextToDivHeader>\n              <NextToDivHeader>Avg Exit</NextToDivHeader>\n              <NextToDivHeader>Qty</NextToDivHeader>\n              <NextToDivHeader>Realized Pnl</NextToDivHeader>\n            </ContainDivHeader>\n            <ReChart data={this.state.data} />\n          </ChartWrapper>\n          <Sidebar />\n        </Wrapper>\n      );\n    }\n  }\n}\n\nconst TopHashtagDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 8px;\n`;\nconst TopHashtagIndividual = styled.div`\n  background: #f8f8ff;\n  color: #000;\n  padding: 8px;\n  margin: 0 10px;\n  border-radius: 2px;\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst TopHashtagIndividualActive = styled.div`\n  background: #212528;\n  color: #fff;\n  padding: 8px;\n  margin: 0 10px;\n  border-radius: 2px;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst ChartWrapper = styled.div`\n  background: white;\n  padding: 5px;\n  width: 100%;\n  @media (max-width: 768px) {\n    margin: 0 5vw;\n  }\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: flex-align;\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAOA;AACA;AACA;AACA;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AARA;AASA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AACA;AACA;AACA;;;;;;AAEA;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;AACA;AACA;AAAA;;;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;;;;AAGA;AACA;;AADA;;;;;AACA;;;;;AACA;AACA;AACA;AAAA;;;;;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;;;AAHA;AACA;AACA;;;AAHA;AACA;AAIA;;;;AAIA;;;;;;;;AAGA;;;;;AACA;AACA;AACA;AAAA;;;;;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;;;;AAHA;AACA;AACA;;;AAHA;AACA;AAIA;AACA;AACA;;;;AA1CA;;;;;;;;;;;;;;;;;;;;AAgDA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAKA;AAKA;AAEA;AAEA;AAAA;AAAA;AADA;AAMA;AAWA;AAAA;AAKA;AACA;;;;AA/IA;AACA;;AAiJA;AAKA;AAUA;AAWA;AASA;;;;A","sourceRoot":""}