{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.813557e9f2f8a29e1518.hot-update.js","sources":["webpack:///./components/Charts/ReChart.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport {\n  LineChart,\n  AreaChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend\n} from \"recharts\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { wideFont } from \"../shared/helpers\";\nimport theme from \"../theme\";\n\nconst data = [\n  {\n    name: \"Page A\",\n    sentiment: 4000,\n    amt: 2400\n  },\n  {\n    name: \"Page B\",\n    sentiment: 3000,\n    amt: 2210\n  },\n  {\n    name: \"Page C\",\n    sentiment: 2000,\n    amt: 2290\n  },\n  {\n    name: \"Page D\",\n    sentiment: 2780,\n    amt: 2000\n  },\n  {\n    name: \"Page E\",\n    sentiment: 1890,\n    amt: 2181\n  },\n  {\n    name: \"Page F\",\n    sentiment: 2390,\n    amt: 2500\n  },\n  {\n    name: \"the date\",\n    sentiment: 3490,\n    amt: 2100\n  }\n];\n\nexport default class Example extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { width: 0, height: 0 };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    if (window.innerWidth < 1024) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.9 - 179\n      });\n    } else if (window.innerWidth < 750) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth - 179\n      });\n    } else if (window.innerWidth >= 1024) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.8 - 179\n      });\n    }\n  }\n\n  render() {\n    return (\n      <ThemeProvider theme={theme(false)}>\n        <AreaChart\n          width={this.state.chartWidth}\n          height={200}\n          data={data.slice(0, 7)}\n          margin={{\n            top: 20,\n            right: 35,\n            left: 15,\n            bottom: 5\n          }}\n        >\n          <defs>\n            <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#62BFED\" stopOpacity={0.7} />\n              <stop offset=\"95%\" stopColor=\"#62BFED\" stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n\n          <Area\n            type=\"monotone\"\n            dataKey=\"sentiment\"\n            stroke=\"#62BFED\"\n            fillOpacity={1}\n            fill=\"url(#colorPv)\"\n          />\n          {/* <Legend height={36} /> */}\n          {/* <Legend content={<CustomizedLegend external={external} />} /> */}\n\n          <Legend content={renderLegend} />\n\n          {/* <Line type=\"monotone\" dataKey=\"sentiment\" stroke=\"#82ca9d\" /> */}\n        </AreaChart>\n      </ThemeProvider>\n    );\n  }\n}\n\nconst renderLegend = props => {\n  const { payload } = props;\n  console.log(payload);\n\n  return (\n    <StyledUl>\n      {payload.map((entry, index) => (\n        <li key={`item-${index}`} style={{ display: \"flex\", margin: \"auto\" }}>\n          <Sv color={entry.color} />\n          <div style={{ marginLeft: \"10px\" }}>{entry.value}</div>\n        </li>\n      ))}\n    </StyledUl>\n  );\n};\n\nconst StyledUl = styled.ul`\n  display: flex;\n  font-size: 16px;\n  text-decoration: none;\n  margin-left: 60px;\n  list-style: none;\n  text-align: center;\n  color: ${props => props.theme.normalText};\n`;\n\nconst Sv = ({ color }) => (\n  <svg width=\"10\" height=\"10\" style={{ marginTop: \"8px\" }}>\n    <rect width=\"10\" height=\"10\" fill={color} />\n  </svg>\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAWA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AACA;AAMA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA/EA;AACA;AADA;AACA;AAiFA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;;;;A","sourceRoot":""}