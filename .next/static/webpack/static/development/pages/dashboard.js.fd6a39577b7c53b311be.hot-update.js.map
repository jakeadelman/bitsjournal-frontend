{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.fd6a39577b7c53b311be.hot-update.js","sources":["webpack:///./components/Dashboard/ReChart.js"],"sourcesContent":["import React, { PureComponent, Component } from \"react\";\nimport {\n  LineChart,\n  AreaChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { wideFont, smallFont } from \"../shared/helpers\";\nimport theme from \"../theme\";\nimport {\n  formatDateMonthOnly,\n  calcCommission,\n  formatDateShort,\n  formatDateShortWithHour,\n} from \"../Helpers/Functions.js\";\nimport { inject, observer } from \"mobx-react\";\nimport MainChart from \"../Charts2/index\";\nimport Notes from \"./Notes\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretDown, faCaretUp } from \"@fortawesome/free-solid-svg-icons\";\nimport equal from \"fast-deep-equal\";\nimport { when } from \"mobx\";\n\nexport default class Example extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0,\n      height: 0,\n      data: [],\n      fullTrades: [],\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.createFullTrades = this.createFullTrades.bind(this);\n  }\n\n  createFullTrades(data) {\n    let fullRay = [];\n    let fullTrades = [];\n    for (let i = 0; i < data.fetchTradeHistory.length; i++) {\n      fullRay.unshift(data.fetchTradeHistory[i]);\n      if (i == data.fetchTradeHistory.length - 1) {\n        for (let j = 0; j < fullRay.length; j++) {\n          let dat = fullRay[j];\n          // dat.timestamp = formatDateForRow(dat.timestamp);\n          // fullRay[j] = dat;\n          if (dat.trdStart == true) {\n            let sliced = fullRay.slice(j, fullRay.length);\n            for (let k = 0; k < sliced.length; k++) {\n              if (sliced[k].trdEnd == true && k > 0) {\n                let newsliced = sliced.slice(0, k + 1);\n                fullTrades.unshift(newsliced);\n                break;\n              }\n            }\n          }\n          if (j == fullRay.length - 1) {\n            let returnVal = {};\n            returnVal[\"initData\"] = this.props.initData;\n            returnVal[\"data\"] = fullRay;\n            returnVal[\"fullTrades\"] = fullTrades;\n            return returnVal;\n          }\n        }\n      }\n    }\n  }\n\n  filter() {}\n\n  componentDidUpdate(prevProps) {\n    if (!equal(this.props.filteredData, prevProps.filteredData)) {\n      console.log(\"WAS NOT EQUAL\");\n      // this.updateTrades(this.props.data);\n      let newFullTrades = [];\n      let firstFullTrades = this.createFullTrades(this.props.data);\n      firstFullTrades = firstFullTrades.fullTrades;\n      console.log(this.props.data);\n      if (this.props.filteredData == null) {\n        console.log(\"was null\", firstFullTrades);\n        this.setState({ fullTrades: firstFullTrades });\n      } else {\n        for (let i = 0; i < firstFullTrades.length; i++) {\n          for (let j = 0; j < this.props.filteredData.length; j++) {\n            if (firstFullTrades[i][0].id == this.props.filteredData[j].id) {\n              console.log(\"ADDING\", firstFullTrades[i]);\n              newFullTrades.unshift(firstFullTrades[i]);\n            }\n          }\n          if (i == firstFullTrades.length - 1) {\n            console.log(newFullTrades, \"NEW FULL\");\n            this.setState({ fullTrades: newFullTrades });\n          }\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    console.log(\"MOUNTING\");\n    let returned = this.createFullTrades(this.props.data);\n    if (returned != undefined) {\n      this.setState({\n        data: returned.fullRay,\n        fullTrades: returned.fullTrades,\n        initData: returned.initData,\n      });\n    } else {\n      this.setState({\n        data: this.props.initData,\n        initData: this.props.initData,\n      });\n    }\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    if (window.innerWidth < 768) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.9,\n      });\n    } else if (window.innerWidth < 1024) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.9 - 179,\n      });\n    } else if (window.innerWidth >= 1024) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.8 - 179,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <ThemeProvider theme={theme(false)}>\n        <div style={{ minWidth: this.state.chartWidth }}>\n          {this.state.fullTrades.map((slic, i) => {\n            console.log(slic);\n            return (\n              <MakeCol\n                slic={slic}\n                onemin={this.props.data.fetchOneMinuteCandleHistory}\n                fivemin={this.props.data.fetchFiveMinuteCandleHistory}\n                onehour={this.props.data.fetchOneHourCandleHistory}\n                oneday={this.props.data.fetchOneDayCandleHistory}\n                key={i}\n              />\n            );\n          })}\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n\n@inject(\"store\")\n@observer\nclass MakeCol extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      pnl: 0,\n      avgEntryPrice: 0,\n      avgExitPrice: 0,\n      clicked: false,\n      cumQty: 0,\n      readMoreClicked: false,\n    };\n    this.readMoreClicked = this.readMoreClicked.bind(this);\n    this.clicked = this.clicked.bind(this);\n    this.getSlicData = this.getSlicData.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  updateWindowDimensions() {\n    console.log(this.state.width);\n    this.setState({\n      width: window.innerWidth,\n    });\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n  componentDidMount() {\n    console.log(\"MOUNTED\", this.props.slic);\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n  componentDidUpdate(prevProps) {\n    if (!equal(this.props.slic, prevProps.slic)) {\n      console.log(\"UPDATED\");\n      this.getSlicData();\n    }\n  }\n\n  componentWillMount() {\n    this.getSlicData();\n    this.updateWindowDimensions();\n  }\n\n  getSlicData() {\n    this.state.data = this.props.slic;\n    if (\n      this.state.data[0].side == \"Buy\" &&\n      this.state.data[0].execType == \"Trade\"\n    ) {\n      let avgBuyPrice = 0;\n      let avgSellPrice = 0;\n      let totBuyContracts = 0;\n      let totSellContracts = 0;\n      let buyNum = 0;\n      let sellNum = 0;\n      let totBuyContractsMult = 0;\n      let totSellContractsMult = 0;\n      let realQty = 0;\n      let totCommission = 0;\n      for (let i = 0; i < this.state.data.length; i++) {\n        realQty = this.state.data[i].orderQty - this.state.data[i].leavesQty;\n        if (this.state.data[i].side == \"Buy\") {\n          buyNum += 1;\n          totBuyContracts += realQty;\n          totBuyContractsMult += realQty * parseFloat(this.state.data[i].price);\n        }\n        if (this.state.data[i].side == \"Sell\") {\n          sellNum += 1;\n          totSellContracts += realQty;\n          totSellContractsMult +=\n            realQty * parseFloat(this.state.data[i].price);\n        }\n        // console.log(\"REAL QTY\", realQty);\n        if (\n          this.state.data[i].orderType == \"Limit\" &&\n          this.state.data[i].execType !== \"Funding\"\n        ) {\n          totCommission += (realQty * 0.0025) / this.state.data[i].price;\n        }\n        if (this.state.data[i].orderType == \"Market\") {\n          totCommission -= (realQty * 0.0075) / this.state.data[i].price;\n        }\n        if (this.state.data[i].orderType.includes(\"Stop\")) {\n          totCommission -= (realQty * 0.0075) / this.state.data[i].price;\n        }\n        if (i == this.state.data.length - 1) {\n          avgBuyPrice = totBuyContractsMult / totBuyContracts;\n          avgSellPrice = totSellContractsMult / totSellContracts;\n          let avgExit;\n          let avgEntry;\n          if (avgBuyPrice != null) {\n            // this.state.avgEntryPrice = avgBuyPrice;\n            avgEntry = avgBuyPrice;\n          } else {\n            avgEntry = 0;\n            // this.state.avgEntryPrice = 0;\n          }\n          if (avgSellPrice != null) {\n            // this.state.avgExitPrice = avgSellPrice;\n            avgExit = avgSellPrice;\n          } else {\n            // this.state.avgExitPrice = 0;\n            avgExit = 0;\n          }\n          this.state.cumQty = totBuyContracts;\n          let thePnl = (1 / avgBuyPrice - 1 / avgSellPrice) * totSellContracts;\n          if (thePnl != null) {\n            let myPnl = thePnl + totCommission;\n            this.setState(\n              {\n                pnl: myPnl,\n                avgEntryPrice: avgEntry,\n                avgExitPrice: avgExit,\n              },\n              () => console.log(\"STATE IS SET\")\n            );\n            this.props.store.addPnl(myPnl);\n          } else {\n            // this.state.pnl = 0;\n            this.setState(\n              {\n                pnl: 0,\n                avgEntryPrice: avgEntry,\n                avgExitPrice: avgExit,\n              },\n              () => console.log(\"STATE IS SET\")\n            );\n          }\n        }\n      }\n    }\n    if (\n      this.state.data[0].side == \"Sell\" &&\n      this.state.data[0].execType == \"Trade\"\n    ) {\n      let totBuyContracts = 0;\n      let totSellContracts = 0;\n      let buyNum = 0;\n      let sellNum = 0;\n      let totBuyContractsMult = 0;\n      let totSellContractsMult = 0;\n      let realQty = 0;\n      let totCommission = 0;\n      for (let i = 0; i < this.state.data.length; i++) {\n        realQty = this.state.data[i].orderQty - this.state.data[i].leavesQty;\n        if (this.state.data[i].side == \"Buy\") {\n          // totBuyPrice += parseFloat(this.state.data[i].price);\n          buyNum += 1;\n          totBuyContracts += realQty;\n          totBuyContractsMult += realQty * parseFloat(this.state.data[i].price);\n        }\n        if (this.state.data[i].side == \"Sell\") {\n          sellNum += 1;\n          totSellContracts += realQty;\n          totSellContractsMult +=\n            realQty * parseFloat(this.state.data[i].price);\n        }\n        // console.log(\"REAL QTY\", realQty);\n        if (\n          this.state.data[i].orderType == \"Limit\" &&\n          this.state.data[i].execType !== \"Funding\"\n        ) {\n          totCommission += (realQty * 0.0025) / this.state.data[i].price;\n        }\n        if (this.state.data[i].orderType == \"Market\") {\n          totCommission -= (realQty * 0.0075) / this.state.data[i].price;\n        }\n        if (this.state.data[i].orderType.includes(\"Stop\")) {\n          totCommission -= (realQty * 0.0075) / this.state.data[i].price;\n        }\n        if (i == this.state.data.length - 1) {\n          let avgBuyPrice = totBuyContractsMult / totBuyContracts;\n          let avgSellPrice = totSellContractsMult / totSellContracts;\n          let pnl = (1 / avgBuyPrice - 1 / avgSellPrice) * totBuyContracts;\n          let avgEntry;\n          let avgExit;\n          if (avgBuyPrice != null) {\n            avgExit = avgBuyPrice;\n          } else {\n            avgExit = 0;\n          }\n          if (avgSellPrice != null) {\n            avgEntry = avgSellPrice;\n          } else {\n            avgEntry = 0;\n          }\n          this.state.cumQty = totSellContracts;\n          if (pnl != null) {\n            let myPnl = pnl + totCommission;\n            this.setState(\n              {\n                pnl: myPnl,\n                avgEntryPrice: avgEntry,\n                avgExitPrice: avgExit,\n              },\n              () => console.log(\"STATE IS SET\")\n            );\n            this.props.store.addPnl(myPnl);\n          } else {\n            // this.state.pnl = 0;\n            this.setState(\n              {\n                pnl: 0,\n                avgEntryPrice: avgEntry,\n                avgExitPrice: avgExit,\n              },\n              () => console.log(\"STATE IS SET\")\n            );\n          }\n        }\n      }\n    }\n  }\n\n  clicked() {\n    // console.log(this.state);\n    if (this.state.clicked == false) {\n      this.setState({ clicked: true });\n    } else {\n      this.setState({ clicked: false });\n    }\n  }\n  readMoreClicked() {\n    // console.log(this.state);\n    if (this.state.readMoreClicked == false) {\n      this.setState({ readMoreClicked: true });\n    } else {\n      this.setState({ readMoreClicked: false });\n    }\n  }\n\n  render() {\n    // console.log(this.state.data[0], \"DAT ZERO\");\n    // if (this.state.data[0] != undefined) {\n    // if (this.state.width != null) {\n    if (this.state.width > 1380) {\n      if (this.state.clicked == false) {\n        return (\n          <ContainDiv onClick={this.clicked.bind(this)}>\n            <NextToDiv>\n              {formatDateMonthOnly(this.state.data[0].timestamp)}\n            </NextToDiv>\n            <NextToDiv>\n              {formatDateMonthOnly(\n                this.state.data[this.state.data.length - 1].timestamp\n              )}\n            </NextToDiv>\n            <IsShort side={this.state.data[0].side} />\n            <NextToDiv>${this.state.avgEntryPrice.toFixed(1)}</NextToDiv>\n            <NextToDiv>${this.state.avgExitPrice.toFixed(1)}</NextToDiv>\n            <NextToDiv>{this.state.cumQty}</NextToDiv>\n            <NextToDiv>{this.state.pnl.toFixed(4) + \"xbt\"}</NextToDiv>\n          </ContainDiv>\n        );\n      } else {\n        return (\n          <TotalDetails>\n            {this.state.readMoreClicked ? (\n              <MoreBoxTall>\n                <ContainDivClicked onClick={this.clicked.bind(this)}>\n                  <NextToDiv>\n                    {formatDateMonthOnly(this.state.data[0].timestamp)}\n                  </NextToDiv>\n                  <NextToDiv>\n                    {formatDateMonthOnly(\n                      this.state.data[this.state.data.length - 1].timestamp\n                    )}\n                  </NextToDiv>\n                  <IsShort side={this.state.data[0].side} />\n                  <NextToDiv>${this.state.avgEntryPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>${this.state.avgExitPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>{this.state.cumQty}</NextToDiv>\n                  <NextToDiv>{this.state.pnl.toFixed(4) + \"xbt\"}</NextToDiv>\n                </ContainDivClicked>\n                <ContainDivBlack>\n                  <NextToDivBlack>Timestamp</NextToDivBlack>\n                  <NextToDivBlack>Side</NextToDivBlack>\n                  <NextToDivBlack>Order Type</NextToDivBlack>\n                  <NextToDivBlack>Price</NextToDivBlack>\n                  <NextToDivBlack>Order Qty</NextToDivBlack>\n                  <NextToDivBlack>Leaves Qty</NextToDivBlack>\n                  <NextToDivBlack>Commission</NextToDivBlack>\n                </ContainDivBlack>\n\n                {this.state.data.map((dat) => {\n                  return (\n                    <ContainDivBlack onClick={this.clicked.bind(this)}>\n                      <NextToDivBlack>\n                        {formatDateMonthOnly(dat.timestamp)}\n                      </NextToDivBlack>\n                      {dat.execType == \"Trade\" ? (\n                        <NextToDivBlack>{dat.side}</NextToDivBlack>\n                      ) : (\n                        <NextToDivBlack>{dat.execType}</NextToDivBlack>\n                      )}\n                      <NextToDivBlack>{dat.orderType}</NextToDivBlack>\n                      <NextToDivBlack>${dat.price.toString()}</NextToDivBlack>\n                      <NextToDivBlack>{dat.orderQty}</NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.leavesQty == \"0\" ? \"\" : dat.leavesQty}\n                      </NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.execType == \"Funding\"\n                          ? \"\"\n                          : calcCommission(\n                              dat.price,\n                              dat.side,\n                              dat.orderQty,\n                              dat.leavesQty,\n                              dat.orderType\n                            )}\n                      </NextToDivBlack>\n                    </ContainDivBlack>\n                  );\n                })}\n                <ReadMoreTall>\n                  <ReadMoreInner onClick={this.readMoreClicked}>\n                    <FontAwesomeIcon\n                      icon={faCaretUp}\n                      style={{ transition: \"none\" }}\n                    />\n                  </ReadMoreInner>\n                </ReadMoreTall>\n              </MoreBoxTall>\n            ) : (\n              <MoreBoxShort>\n                <ContainDivClicked onClick={this.clicked}>\n                  <NextToDiv>\n                    {formatDateMonthOnly(this.state.data[0].timestamp)}\n                  </NextToDiv>\n                  <NextToDiv>\n                    {formatDateMonthOnly(\n                      this.state.data[this.state.data.length - 1].timestamp\n                    )}\n                  </NextToDiv>\n                  <IsShort side={this.state.data[0].side} />\n                  <NextToDiv>${this.state.avgEntryPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>${this.state.avgExitPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>{this.state.cumQty}</NextToDiv>\n                  <NextToDiv>{this.state.pnl.toFixed(4) + \"xbt\"}</NextToDiv>\n                </ContainDivClicked>\n                <ContainDivBlack>\n                  <NextToDivBlack>Timestamp</NextToDivBlack>\n                  <NextToDivBlack>Side</NextToDivBlack>\n                  <NextToDivBlack>Order Type</NextToDivBlack>\n                  <NextToDivBlack>Price</NextToDivBlack>\n                  <NextToDivBlack>Order Qty</NextToDivBlack>\n                  <NextToDivBlack>Leaves Qty</NextToDivBlack>\n                  <NextToDivBlack>Commission</NextToDivBlack>\n                </ContainDivBlack>\n\n                {this.state.data.map((dat) => {\n                  return (\n                    <ContainDivBlack onClick={this.clicked.bind(this)}>\n                      <NextToDivBlack>\n                        {formatDateMonthOnly(dat.timestamp)}\n                      </NextToDivBlack>\n                      {dat.execType == \"Trade\" ? (\n                        <NextToDivBlack>{dat.side}</NextToDivBlack>\n                      ) : (\n                        <NextToDivBlack>{dat.execType}</NextToDivBlack>\n                      )}\n                      <NextToDivBlack>{dat.orderType}</NextToDivBlack>\n                      <NextToDivBlack>${dat.price.toString()}</NextToDivBlack>\n                      <NextToDivBlack>{dat.orderQty}</NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.leavesQty == \"0\" ? \"\" : dat.leavesQty}\n                      </NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.execType == \"Funding\"\n                          ? \"\"\n                          : calcCommission(\n                              dat.price,\n                              dat.side,\n                              dat.orderQty,\n                              dat.leavesQty,\n                              dat.orderType\n                            )}\n                      </NextToDivBlack>\n                    </ContainDivBlack>\n                  );\n                })}\n                <ReadMore>\n                  <ReadMoreInner onClick={this.readMoreClicked}>\n                    <FontAwesomeIcon\n                      icon={faCaretDown}\n                      style={{ transition: \"none\" }}\n                    />\n                  </ReadMoreInner>\n                </ReadMore>\n              </MoreBoxShort>\n            )}\n            <Notes firstTrade={this.state.data[0]} />\n            <MainChart\n              onemin={this.props.onemin}\n              fivemin={this.props.fivemin}\n              onehour={this.props.onehour}\n              oneday={this.props.oneday}\n              trades={this.state.data}\n            />\n          </TotalDetails>\n        );\n      }\n    } else {\n      if (this.state.clicked == false) {\n        return (\n          <ContainDiv onClick={this.clicked.bind(this)}>\n            <NextToDiv>\n              {formatDateShort(this.state.data[0].timestamp)}\n            </NextToDiv>\n            <NextToDiv>\n              {formatDateShort(\n                this.state.data[this.state.data.length - 1].timestamp\n              )}\n            </NextToDiv>\n            <IsShort side={this.state.data[0].side} />\n            <NextToDiv>${this.state.avgEntryPrice.toFixed(1)}</NextToDiv>\n            <NextToDiv>${this.state.avgExitPrice.toFixed(1)}</NextToDiv>\n            <NextToDiv>{this.state.cumQty}</NextToDiv>\n            <NextToDiv>{this.state.pnl.toFixed(4) + \"xbt\"}</NextToDiv>\n          </ContainDiv>\n        );\n      } else {\n        return (\n          <TotalDetails>\n            {this.state.readMoreClicked ? (\n              <MoreBoxTall>\n                <ContainDivClicked onClick={this.clicked.bind(this)}>\n                  <NextToDiv>\n                    {formatDateShort(this.state.data[0].timestamp)}\n                  </NextToDiv>\n                  <NextToDiv>\n                    {formatDateShort(\n                      this.state.data[this.state.data.length - 1].timestamp\n                    )}\n                  </NextToDiv>\n                  <IsShort side={this.state.data[0].side} />\n                  <NextToDiv>${this.state.avgEntryPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>${this.state.avgExitPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>{this.state.cumQty}</NextToDiv>\n                  <NextToDiv>{this.state.pnl.toFixed(4) + \"xbt\"}</NextToDiv>\n                </ContainDivClicked>\n                <ContainDivBlack>\n                  <NextToDivBlack>Timestamp</NextToDivBlack>\n                  <NextToDivBlack>Side</NextToDivBlack>\n                  <NextToDivBlack>Type</NextToDivBlack>\n                  <NextToDivBlack>Price</NextToDivBlack>\n                  <NextToDivBlack>Qty</NextToDivBlack>\n                  <NextToDivBlack>Leaves</NextToDivBlack>\n                  <NextToDivBlack>Commission</NextToDivBlack>\n                </ContainDivBlack>\n\n                {this.state.data.map((dat) => {\n                  return (\n                    <ContainDivBlack onClick={this.clicked.bind(this)}>\n                      <NextToDivBlackTime>\n                        {formatDateShortWithHour(dat.timestamp)}\n                      </NextToDivBlackTime>\n                      {dat.execType == \"Trade\" ? (\n                        <NextToDivBlack>{dat.side}</NextToDivBlack>\n                      ) : (\n                        <NextToDivBlack>{dat.execType}</NextToDivBlack>\n                      )}\n                      <NextToDivBlack>{dat.orderType}</NextToDivBlack>\n                      <NextToDivBlack>${dat.price.toString()}</NextToDivBlack>\n                      <NextToDivBlack>{dat.orderQty}</NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.leavesQty == \"0\" ? \"\" : dat.leavesQty}\n                      </NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.execType == \"Funding\"\n                          ? \"\"\n                          : calcCommission(\n                              dat.price,\n                              dat.side,\n                              dat.orderQty,\n                              dat.leavesQty,\n                              dat.orderType\n                            )}\n                      </NextToDivBlack>\n                    </ContainDivBlack>\n                  );\n                })}\n                <ReadMoreTall>\n                  <ReadMoreInner onClick={this.readMoreClicked}>\n                    <FontAwesomeIcon\n                      icon={faCaretUp}\n                      style={{ transition: \"none\" }}\n                    />\n                  </ReadMoreInner>\n                </ReadMoreTall>\n              </MoreBoxTall>\n            ) : (\n              <MoreBoxShort>\n                <ContainDivClicked onClick={this.clicked}>\n                  <NextToDiv>\n                    {formatDateShort(this.state.data[0].timestamp)}\n                  </NextToDiv>\n                  <NextToDiv>\n                    {formatDateShort(\n                      this.state.data[this.state.data.length - 1].timestamp\n                    )}\n                  </NextToDiv>\n                  <IsShort side={this.state.data[0].side} />\n                  <NextToDiv>${this.state.avgEntryPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>${this.state.avgExitPrice.toFixed(1)}</NextToDiv>\n                  <NextToDiv>{this.state.cumQty}</NextToDiv>\n                  <NextToDiv>{this.state.pnl.toFixed(4) + \"xbt\"}</NextToDiv>\n                </ContainDivClicked>\n                <ContainDivBlack>\n                  <NextToDivBlack>Timestamp</NextToDivBlack>\n                  <NextToDivBlack>Side</NextToDivBlack>\n                  <NextToDivBlack>Type</NextToDivBlack>\n                  <NextToDivBlack>Price</NextToDivBlack>\n                  <NextToDivBlack>Qty</NextToDivBlack>\n                  <NextToDivBlack>Leaves</NextToDivBlack>\n                  <NextToDivBlack>Commission</NextToDivBlack>\n                </ContainDivBlack>\n\n                {this.state.data.map((dat) => {\n                  return (\n                    <ContainDivBlack onClick={this.clicked.bind(this)}>\n                      <NextToDivBlackTime>\n                        {formatDateShortWithHour(dat.timestamp)}\n                      </NextToDivBlackTime>\n                      {dat.execType == \"Trade\" ? (\n                        <NextToDivBlack>{dat.side}</NextToDivBlack>\n                      ) : (\n                        <NextToDivBlack>{dat.execType}</NextToDivBlack>\n                      )}\n                      <NextToDivBlack>{dat.orderType}</NextToDivBlack>\n                      <NextToDivBlack>${dat.price.toString()}</NextToDivBlack>\n                      <NextToDivBlack>{dat.orderQty}</NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.leavesQty == \"0\" ? \"\" : dat.leavesQty}\n                      </NextToDivBlack>\n                      <NextToDivBlack>\n                        {dat.execType == \"Funding\"\n                          ? \"\"\n                          : calcCommission(\n                              dat.price,\n                              dat.side,\n                              dat.orderQty,\n                              dat.leavesQty,\n                              dat.orderType\n                            )}\n                      </NextToDivBlack>\n                    </ContainDivBlack>\n                  );\n                })}\n                <ReadMore>\n                  <ReadMoreInner onClick={this.readMoreClicked}>\n                    <FontAwesomeIcon\n                      icon={faCaretDown}\n                      style={{ transition: \"none\" }}\n                    />\n                  </ReadMoreInner>\n                </ReadMore>\n              </MoreBoxShort>\n            )}\n            <Notes firstTrade={this.state.data[0]} />\n            <MainChart\n              onemin={this.props.onemin}\n              fivemin={this.props.fivemin}\n              onehour={this.props.onehour}\n              oneday={this.props.oneday}\n              trades={this.state.data}\n            />\n          </TotalDetails>\n        );\n      }\n    }\n  }\n}\n\nclass IsShort extends Component {\n  render() {\n    if (this.props.side == \"Sell\") {\n      return <NextToDiv>Short</NextToDiv>;\n    } else {\n      return <NextToDiv>Long</NextToDiv>;\n    }\n  }\n}\n\nexport const ContainDiv = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  height: 52px;\n\n  &:hover {\n    border-left: 3px solid black;\n    cursor: pointer;\n  }\n`;\nexport const ContainDivClicked = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  height: 52px;\n\n  border-bottom: 1px solid #d3d3d3;\n\n  border-left: 5px solid black;\n  cursor: pointer;\n  box-shadow: 10px 10px 8px 10px #000000;\n`;\nexport const ContainDivBlack = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  height: 42px;\n  background: #f8f8ff;\n\n  border-bottom: 1px solid #f2f2f2;\n`;\nexport const ContainDivHeader = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  height: 42px;\n  border-bottom: 1px solid #d3d3d3;\n`;\n\nexport const NextToDiv = styled.div`\n  display: inline-block;\n  width: 30%;\n  padding: 10px;\n  padding-left: 12px;\n  font-size: 15px;\n  font-weight: 500;\n  background-color: #f8f8ff;\n  color: #000;\n  @media (max-width: 550px) {\n    font-size: 13px;\n  }\n`;\n\nexport const NextToDivBlack = styled.div`\n  display: inline-block;\n  width: 30%;\n  padding: 5px;\n  padding-left: 12px;\n  font-size: 15px;\n`;\nexport const NextToDivBlackTime = styled.div`\n  display: inline-block;\n  width: 30%;\n  padding: 5px;\n  padding-left: 12px;\n  font-size: 14px;\n  @media (max-width: 1200px) {\n    font-size: 13px;\n  }\n  @media (max-width: 663px) {\n    padding-top: 0px !important;\n  }\n`;\nexport const NextToDivHeader = styled.div`\n  display: inline-block;\n  width: 30%;\n  color: #78838e;\n  font-weight: 600;\n  display: inline-block;\n  text-transform: uppercase;\n  padding: 10px;\n  padding-left: 12px;\n  ${smallFont}\n  font-size:14px;\n`;\n\nconst ReadMore = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  text-align: center;\n  margin: 0;\n  padding: 10px 0;\n\n  /* \"transparent\" only works here because == rgba(0,0,0,0) */\n\n  background-image: -webkit-gradient(\n    linear,\n    left top,\n    left bottom,\n    color-stop(0, rgba(255, 0, 0, 0)),\n    color-stop(1, rgba(248, 248, 255, 1))\n  );\n`;\nconst ReadMoreTall = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  text-align: center;\n  margin: 0;\n  padding: 10px 0;\n`;\n// background-image: linear-gradient(to bottom, transparent, black);\nconst MoreBoxShort = styled.div`\n  max-height: 200px;\n  position: relative;\n  overflow: hidden;\n`;\nconst MoreBoxTall = styled.div`\n  max-height: none;\n  position: relative;\n  overflow: hidden;\n`;\n\nconst TotalDetails = styled.div``;\n// border: 1px solid rgba(33, 37, 40, 0.7);\nconst ReadMoreInner = styled.div`\n  color: rgba(33, 37, 40, 1);\n\n  padding: 0;\n  margin: auto;\n  width: 30px;\n  border-radius: 2px;\n  -webkit-transition-property: none;\n  -moz-transition-property: none;\n  -o-transition-property: none;\n  transition-property: none;\n\n  :hover {\n    cursor: pointer;\n    background-color: rgba(33, 37, 40, 1);\n    color: #fff;\n    -webkit-transition-property: none;\n    -moz-transition-property: none;\n    -o-transition-property: none;\n    transition-property: none;\n  }\n  font-size: 20px;\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAWA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AATA;AAUA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAIA;;;;AA5IA;AACA;AADA;AAiJA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAdA;AAeA;AACA;;;AACA;AACA;AACA;AACA;AADA;AAGA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AASA;AAAA;AAOA;AACA;AAIA;AAAA;AASA;AAAA;AAiBA;AACA;AAAA;AA4BA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AASA;AAAA;AAiBA;AACA;AAAA;AA4BA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AAAA;AASA;AAAA;AAOA;AACA;AAIA;AAAA;AASA;AAAA;AAiBA;AACA;AAAA;AA4BA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AASA;AAAA;AAiBA;AACA;AAAA;AA4BA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;;;;AA5jBA;AACA;AA8jBA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAPA;AACA;AASA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}