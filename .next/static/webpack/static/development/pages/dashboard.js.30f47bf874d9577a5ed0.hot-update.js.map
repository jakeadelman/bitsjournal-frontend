{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.30f47bf874d9577a5ed0.hot-update.js","sources":["webpack:///./components/Charts/Notes.js"],"sourcesContent":["import { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport { getNotes, getHashtags } from \"./helpers\";\nimport gql from \"graphql-tag\";\nimport {\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\n\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\", hashtags: [] };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({ value: this.props.firstTrade.notes });\n  }\n\n  handleChange(client) {\n    return event => {\n      // event.preventDefault();\n      this.setState({ value: event.target.value }, this.handleSubmit(client));\n    };\n  }\n\n  handleSubmit(client) {\n    return event => {\n      event.preventDefault();\n      // alert(\"A name was submitted: \" + this.state.value);\n      // let splitted = this.state.value.split(\" \");\n      // for (let i = 0; i < splitted.length; i++) {\n      //   if (splitted[i].includes(\"#\")) {\n      //     this.state.hashtags.push(splitted[i]);\n      //   }\n      //   if (i == splitted.length - 1) {\n      console.log(\"HASHTAGS\", this.state.hashtags);\n      getNotes(this.state.value).then(async res => {\n        let notes = res[0];\n        // let hashtags = res[1];\n        let time = this.props.firstTrade.timestamp;\n        let reso = client.mutate({\n          mutation: gql`\n            mutation addNotes($time: String!, $notes: String!) {\n              addNotes(time: $time, notes: $notes)\n            }\n          `,\n          variables: { time, notes }\n        });\n\n        let r = await reso;\n        console.log(r);\n      });\n    };\n  }\n  render() {\n    return (\n      <ApolloConsumer>\n        {client => (\n          <div>\n            <HashtagDiv>\n              <AddHashtag firstTrade={this.props.firstTrade} client={client} />\n            </HashtagDiv>\n            <FullRow>\n              {/* <FullRow onSubmit={this.handleSubmit(client)}> */}\n              <NotesInput\n                type=\"text\"\n                value={this.state.value}\n                onChange={this.handleChange(client)}\n              ></NotesInput>\n            </FullRow>\n          </div>\n        )}\n      </ApolloConsumer>\n    );\n  }\n}\n\nclass AddHashtag extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    // event.preventDefault();\n    console.log(event.target.value);\n    this.setState({ value: event.target.value });\n  }\n\n  async handleSubmit(client) {\n    // return async event => {\n    console.log(\"CLICKED\");\n\n    let hashtag = this.state.value;\n    let time = this.props.firstTrade.timestamp;\n    let reso = client.mutate({\n      mutation: gql`\n        mutation addHashtag($time: String!, $hashtag: String!) {\n          addHashtag(time: $time, hashtag: $hashtag)\n        }\n      `,\n      variables: { time, hashtag }\n    });\n\n    let r = await reso;\n    console.log(r);\n    return r;\n    // };\n  }\n\n  render() {\n    return (\n      // <ApolloConsumer>\n      //   {client => (\n      <Dropdown\n        direction=\"right\"\n        isOpen={this.state.btnDropright}\n        toggle={() => {\n          this.setState({ btnDropright: !this.state.btnDropright });\n        }}\n      >\n        <DropdownToggle>+</DropdownToggle>\n        <DropdownMenu>\n          <input\n            type=\"text\"\n            value={this.state.value}\n            onChange={this.handleChange}\n          ></input>\n          <button onClick={this.handleSubmit(this.props.client)}>add</button>\n        </DropdownMenu>\n      </Dropdown>\n      //   )}\n      // </ApolloConsumer>\n    );\n  }\n}\n\n// const HashtagDiv = styled.div`\n//   background: #212528;\n//   margin: 20px 8px;\n//   text-align: center;\n//   vertical-align: middle;\n//   color: white;\n//   padding: 10px;\n//   padding-top: 8px;\n// `;\nconst HashtagDiv = styled.div`\n  margin: auto;\n  text-align: center;\n  vertical-align: middle;\n  color: white;\n  padding: 10px;\n  padding-top: 8px;\n`;\n\nconst FullRow = styled.form`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst NotesSubmit = styled.input`\n  margin: 9px;\n  padding: 15px;\n  background: #212528;\n  border: none;\n  color: white;\n`;\n\nconst NotesInput = styled.input`\n  width: 100%;\n  padding: 12px 20px;\n  margin: 8px 0;\n  box-sizing: border-box;\n  background: #f8f8ff;\n  border: none;\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AALA;AAMA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AANA;AAJA;AAAA;AACA;AADA;AAaA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAgBA;AACA;;;AACA;AAAA;AACA;AAAA;AAEA;AAGA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AAPA;AAiBA;;;;AArEA;AACA;;;AAuEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAKA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;AAEA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AANA;;AASA;AACA;;AADA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAUA;AACA;AACA;AAHA;AAKA;AAAA;AAIA;AACA;AAtBA;AAuBA;;;;AA3DA;AA+DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}