{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.3210bafe043d44854183.hot-update.js","sources":["webpack:///./components/Charts/ReChart.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport {\n  LineChart,\n  AreaChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend\n} from \"recharts\";\n\nconst data = [\n  {\n    name: \"Page A\",\n    sentiment: 4000,\n    amt: 2400\n  },\n  {\n    name: \"Page B\",\n    sentiment: 3000,\n    amt: 2210\n  },\n  {\n    name: \"Page C\",\n    sentiment: 2000,\n    amt: 2290\n  },\n  {\n    name: \"Page D\",\n    sentiment: 2780,\n    amt: 2000\n  },\n  {\n    name: \"Page E\",\n    sentiment: 1890,\n    amt: 2181\n  },\n  {\n    name: \"Page F\",\n    sentiment: 2390,\n    amt: 2500\n  },\n  {\n    name: \"the date\",\n    sentiment: 3490,\n    amt: 2100\n  }\n];\n\nexport default class Example extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { width: 0, height: 0 };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    if (window.innerWidth < 1024) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.9 - 179\n      });\n    } else if (window.innerWidth < 750) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth - 179\n      });\n    } else if (window.innerWidth >= 1024) {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        chartWidth: window.innerWidth * 0.8 - 179\n      });\n    }\n  }\n\n  render() {\n    return (\n      <AreaChart\n        width={this.state.chartWidth}\n        height={200}\n        data={data.slice(0, 7)}\n        margin={{\n          top: 20,\n          right: 35,\n          left: 15,\n          bottom: 5\n        }}\n      >\n        <defs>\n          <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n            <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n          </linearGradient>\n          <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <CartesianGrid stroke=\"#eee\" strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Area\n          type=\"monotone\"\n          dataKey=\"uv\"\n          stroke=\"#8884d8\"\n          fillOpacity={1}\n          fill=\"url(#colorUv)\"\n        />\n        <Area\n          type=\"monotone\"\n          dataKey=\"sentiment\"\n          stroke=\"#82ca9d\"\n          fillOpacity={1}\n          fill=\"url(#colorPv)\"\n        />\n        <Legend />\n\n        <Line type=\"monotone\" dataKey=\"sentiment\" stroke=\"#82ca9d\" />\n      </AreaChart>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAYA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AACA;AAMA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AApFA;AACA;;;;;A","sourceRoot":""}