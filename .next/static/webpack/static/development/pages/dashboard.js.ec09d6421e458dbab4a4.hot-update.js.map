{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.ec09d6421e458dbab4a4.hot-update.js","sources":["webpack:///./components/Dashboard/SentVis.js"],"sourcesContent":["import React from \"react\";\nimport { BarGroupHorizontal, Bar } from \"@vx/shape\";\nimport { Group } from \"@vx/group\";\nimport { AxisLeft } from \"@vx/axis\";\nimport { cityTemperature } from \"@vx/mock-data\";\nimport { scaleBand, scaleLinear, scaleOrdinal } from \"@vx/scale\";\nimport { timeParse, timeFormat } from \"d3-time-format\";\n\nconst parseDate = timeParse(\"%Y%m%d\");\nconst format = timeFormat(\"%b %d\");\nconst formatDate = date => format(parseDate(date));\nconst max = (arr, fn) => Math.max(...arr.map(fn));\n\nconst data = cityTemperature.slice(0, 4);\nconst keys = Object.keys(data[0]).filter(d => d !== \"date\");\n\n// accessors\nconst y0 = d => d.date;\nconst x = d => d.value;\n\n// scales\nconst y0Scale = scaleBand({\n  domain: data.map(y0),\n  padding: 0.2\n});\nconst y1Scale = scaleBand({\n  domain: keys,\n  padding: 0.1\n});\nconst xScale = scaleLinear({\n  domain: [0, max(data, d => max(keys, key => d[key]))]\n});\nconst color = scaleOrdinal({\n  domain: keys,\n  range: [\"#aeeef8\", \"#e5fd3d\", \"#9caff6\"]\n});\n\nexport default ({\n  width,\n  height,\n  margin = {\n    top: 20,\n    left: 50,\n    right: 10,\n    bottom: 0\n  }\n}) => {\n  // bounds\n  const xMax = width - margin.left - margin.right;\n  const yMax = height - 100;\n\n  // scales\n  y0Scale.rangeRound([0, yMax]);\n  y1Scale.rangeRound([0, y0Scale.bandwidth()]);\n  xScale.rangeRound([xMax, 0]);\n\n  return (\n    <Bar x=\"10px\" y=\"10px\" width=\"20px\" height=\"10px\" fill=\"#022424\" rx={4} />\n    // <svg width={width} height={height}>\n    //   <rect x={0} y={0} width={width} height={height} fill=\"#612efb\" rx={14} />\n    //   <Group top={margin.top} left={margin.left}>\n    //     <BarGroupHorizontal\n    //       data={data}\n    //       keys={keys}\n    //       width={xMax}\n    //       y0={y0}\n    //       y0Scale={y0Scale}\n    //       y1Scale={y1Scale}\n    //       xScale={xScale}\n    //       color={color}\n    //     >\n    //       {barGroups => {\n    //         return barGroups.map(barGroup => {\n    //           return (\n    //             <Group\n    //               key={`bar-group-horizontal-${barGroup.index}-${barGroup.y0}`}\n    //               top={barGroup.y0}\n    //             >\n    //               {barGroup.bars.map(bar => {\n    //                 return (\n    //                   <Bar\n    //                     key={`${barGroup.index}-${bar.index}-${bar.key}`}\n    //                     x={bar.x}\n    //                     y={bar.y}\n    //                     width={bar.width}\n    //                     height={bar.height}\n    //                     fill={bar.color}\n    //                     rx={4}\n    //                     onClick={event => {\n    //                       alert(\n    //                         `${bar.key} (${bar.value}) - ${JSON.stringify(bar)}`\n    //                       );\n    //                     }}\n    //                   />\n    //                 );\n    //               })}\n    //             </Group>\n    //           );\n    //         });\n    //       }}\n    //     </BarGroupHorizontal>\n    //     <AxisLeft\n    //       scale={y0Scale}\n    //       stroke=\"#e5fd3d\"\n    //       tickStroke=\"#e5fd3d\"\n    //       tickFormat={formatDate}\n    //       hideAxisLine\n    //       tickLabelProps={(value, index) => ({\n    //         fill: \"#e5fd3d\",\n    //         fontSize: 11,\n    //         textAnchor: \"end\",\n    //         dy: \"0.33em\"\n    //       })}\n    //     />\n    //   </Group>\n    // </svg>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAFA;AAKA;AASA;AAAA;AAAA;AAAA;AALA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3DA;AA6DA;;;;A","sourceRoot":""}