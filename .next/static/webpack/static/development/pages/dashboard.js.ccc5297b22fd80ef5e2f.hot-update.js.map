{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.ccc5297b22fd80ef5e2f.hot-update.js","sources":["webpack:///./components/Dashboard/DashMain.js"],"sourcesContent":["import React, { setState } from \"react\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { withRouter } from \"next/router\";\n\nclass DashMain extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const fetchTweetsVars = {\n      query: this.props.initialTerm\n    };\n    return (\n      <Query query={fetchTweetsQuery} variables={fetchTweetsVars}>\n        {({ loading, error, data }) => {\n          if (error) return <div>no data loaded</div>;\n          if (loading) return <div>Loading</div>;\n          //   console.log(data.fetchTweets);\n          // const areMorePosts  allPosts.length < _allPostsMeta.count;\n          return (\n            <div>\n              <div className=\"dash-main-table\">\n                <table>\n                  <thread>\n                    <tr>\n                      <th>query: {this.props.initialTerm}</th>\n                    </tr>\n                  </thread>\n                  <tbody>\n                    <div>\n                      {data.fetchTweets.map(tweet => (\n                        <tr>\n                          <th scope=\"row\">text</th>\n                          <td>{tweet.text}</td>\n                        </tr>\n                      ))}\n                    </div>\n                  </tbody>\n                </table>\n                <style jsx>\n                  {`\n                    .dash-main-table {\n                      max-width: 50%;\n                      margin: 3em auto 3em auto;\n                    }\n                  `}\n                </style>\n              </div>\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport const fetchTweetsQuery = gql`\n  query fetchTweets($query: String!) {\n    fetchTweets(query: $query) {\n      id\n      tweetId\n      text\n      score\n      comparative\n    }\n  }\n`;\n\nconst DashMainWrapper = withRouter(props => {\n  if (!!props.router.query) {\n    console.log(props.router.query);\n    return (\n      <div>\n        <DashMain initialTerm={props.router.query.term} />\n      </div>\n    );\n  } else {\n    console.log(props.initialTerm);\n    return (\n      <div>\n        <DashMain initialTerm={props.initialTerm} />\n      </div>\n    );\n  }\n});\n// export default DashMainWrapper;\nconst Page = props => (\n  <div>\n    <DashMainWrapper />\n  </div>\n);\n\nexport default Page;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAHA;AATA;AAAA;AAAA;AA6BA;AAGA;;;;AAlDA;AACA;AAoDA;AAYA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAKA;;;;A","sourceRoot":""}