{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.3c3c0f1c716c3d97eb77.hot-update.js","sources":["webpack:///./components/Dashboard/AddTerm.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n// import Popover from \"./Popover\";\nimport { Button, Popover, PopoverHeader, PopoverBody } from \"reactstrap\";\n\nexport default function AddTerm(props) {\n  const [clicked, setClicked] = useState(false);\n  const [popover, setPopover] = useState(false);\n\n  function toggle() {\n    if (!popover) {\n      setPopover(true);\n    } else {\n      setPopover(false);\n    }\n  }\n\n  return (\n    <div>\n      <button\n        id=\"Popover1\"\n        onClick={() => {\n          setClicked(true);\n          toggle();\n        }}\n      >\n        add term\n      </button>\n      <Popover placement=\"bottom\" isOpen={popover} target=\"Popover1\">\n        <PopoverHeader>Popover Title</PopoverHeader>\n        <PopoverBody>\n          <PopBody />\n        </PopoverBody>\n      </Popover>\n    </div>\n  );\n}\n\nconst PopBody = () => {\n  const [newTerm, setNewTerm] = useState();\n  const [clicked, setClicked] = useState(false);\n  console.log(newTerm);\n\n  function handleClick() {\n    console.log(\"was clicked\");\n    setClicked(true);\n  }\n\n  let addSearchTermVars = {\n    searchterm: newTerm\n  };\n\n  return (\n    <Mutation mutation={addSearchTermQuery}>\n      {(addSearchTerm, { data }) => (\n        <div>\n          <form\n            onSubmit={e => {\n              e.preventDefault();\n              addTodo({ variables: { searchterm: \"bitcoin\" } });\n            }}\n          >\n            <input type=\"text\" />\n            <button type=\"submit\">Add Todo</button>\n          </form>\n        </div>\n      )}\n    </Mutation>\n  );\n};\n\n{\n  /* <div>\n      <input\n        type=\"text\"\n        placeholder=\"enter term to add\"\n        onChange={e => setNewTerm(e.target.value)}\n      />\n      <button onClick={() => handleClick()}>submit</button>\n      {!!clicked ? (\n        <Mutation mutation={addSearchTermQuery} variables={addSearchTermVars}>\n          {({ loading, error, data }) => {\n            if (error) return <div>no data loaded</div>;\n            if (loading) return <div>Loading</div>;\n            console.log(data);\n            return <div>success</div>;\n          }}\n        </Mutation>\n      ) : null}\n    </div> */\n}\n\nconst AddTodo = () => {\n  let input;\n\n  return (\n    <Mutation mutation={ADD_TODO}>\n      {(addTodo, { data }) => (\n        <div>\n          <form\n            onSubmit={e => {\n              e.preventDefault();\n              addTodo({ variables: { type: input.value } });\n              input.value = \"\";\n            }}\n          >\n            <input\n              ref={node => {\n                input = node;\n              }}\n            />\n            <button type=\"submit\">Add Todo</button>\n          </form>\n        </div>\n      )}\n    </Mutation>\n  );\n};\n\n/* <Query query={fetchTweetsQuery}>\n          {({ loading, error, data }) => {\n            if (error) return <div>no data loaded</div>;\n            if (loading) return <div>Loading</div>;\n            console.log(data);\n            return (\n              <div>\n                <Popover placement=\"bottom\">\n                  <PopoverHeader>Popover Title</PopoverHeader>\n                  <PopoverBody>\n                    Sed posuere consectetur est at lobortis. Aenean eu leo quam.\n                    Pellentesque ornare sem lacinia quam venenatis vestibulum.\n                  </PopoverBody>\n                </Popover>\n              </div>\n            );\n          }}\n        </Query> */\n\n// const AfterClickTry = () => (\n//   <div>\n//     <div>fuck yall</div>\n//     {console.log(\"fuck\")}\n//   </div>\n// );\n\n// function AfterClick() {\n//   return (\n//     <Query query={fetchTweetsQuery}>\n//       {({ loading, error, data }) => {\n//         if (error) return <div>no data loaded</div>;\n//         if (loading) return <div>Loading</div>;\n//         console.log(data);\n//         return (\n//           <div>\n//             <div className=\"dash-main-table\">\n//               <div>clicky bro</div>\n//               <style jsx>\n//                 {`\n//                   .dash-main-table {\n//                     max-width: 50%;\n//                     margin: 3em auto 3em auto;\n//                   }\n//                 `}\n//               </style>\n//             </div>\n//           </div>\n//         );\n//       }}\n//     </Query>\n//   );\n// }\n\nexport const addSearchTermQuery = gql`\n  query addSearchTerm($searchterm: String!) {\n    fetchTerms(searchterm: $searchterm)\n  }\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AATA;AAeA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAQA;AACA;AACA;AAHA;AAKA;AAAA;AAdA;AAoBA;AAEA;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;A","sourceRoot":""}