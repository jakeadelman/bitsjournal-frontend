{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.f162f441ee38382838dc.hot-update.js","sources":["webpack:///./components/Dashboard/DashMain.js"],"sourcesContent":["import React, { setState } from \"react\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { withRouter } from \"next/router\";\n// import SentimentModule from \"./SentimentModule\";\nconst dateformat = require(\"dateformat\");\n\nexport default class DashMain extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { term: this.props.initialTerm };\n  }\n  componentDidMount() {\n    // console.log(this.props.initialTerm);\n    // console.log(this.props.initialTerm);\n    // this.setState({ term: this.props.initialTerm });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log(nextProps.initialTerm);\n    if (nextProps.initialTerm !== this.state.term) {\n      this.setState({ term: nextProps.initialTerm });\n    }\n  }\n\n  render() {\n    if (!this.state.term) {\n      return <div>loading</div>;\n    } else {\n      const fetchTweetsVars = {\n        query: this.state.term\n      };\n      console.log(fetchTweetsVars);\n      return (\n        <Query query={fetchTweetsQuery} variables={fetchTweetsVars}>\n          {({ loading, error, data }) => {\n            if (error)\n              return (\n                <div>\n                  no data loaded.. there may have been an error please refresh\n                  the page\n                </div>\n              );\n            if (loading) return <div>Loading</div>;\n            console.log(data.getDailyTweet);\n            let pos =\n              (data.getDailyTweet.positive / data.getDailyTweet.total) * 100;\n            let neg =\n              (data.getDailyTweet.negative / data.getDailyTweet.total) * 100;\n            let trans = 140 - pos;\n            console.log(pos, neg);\n\n            return (\n              <div className=\"dash-main-table\">\n                <div>\n                  <table>\n                    <thread>\n                      <tr className=\"top-row\">\n                        <th className=\"tr-heading\">\n                          query: {this.props.initialTerm}\n                        </th>\n                        <th className=\"bar-heading tr-heading\">\n                          <svg\n                            class=\"chart\"\n                            width=\"450\"\n                            height=\"40\"\n                            aria-labelledby=\"title desc\"\n                            role=\"img\"\n                          >\n                            <g class=\"bar\" transform=\"translate(140,4)\">\n                              <rect width={neg} height=\"19\" className=\"rect1\" />\n                              <text x={neg + 5} y=\"9.5\" dy=\".35em\">\n                                {parseInt(neg)}%\n                              </text>\n                              <text x=\"130\" y=\"9.5\" dy=\".35em\">\n                                24 hour sentiment\n                              </text>\n                            </g>\n                            <g class=\"bar2\" transform={`translate(${trans},4)`}>\n                              <rect width={pos} height=\"19\" className=\"rect2\" />\n                              <text x=\"-35\" y=\"9.5\" dy=\".35em\">\n                                {parseInt(pos)}%\n                              </text>\n                            </g>\n                          </svg>\n                        </th>\n                      </tr>\n                    </thread>\n                    <tbody>\n                      <div>\n                        {data.fetchTweets.map(tweet => (\n                          <tr className={`data-${tweet.polarity}`}>\n                            <th scope=\"row\">\n                              {dateformat(tweet.timestamp, \"shortTime\")}\n                            </th>\n                            <td>{tweet.text}</td>\n                          </tr>\n                        ))}\n                      </div>\n                    </tbody>\n                  </table>\n                  <style jsx>\n                    {`\n                      .dash-main-table {\n                        max-width: 50%;\n                        display: block;\n                        margin: auto;\n                      }\n                      table {\n                        table-layout: fixed;\n                        width: 100% !important;\n                      }\n                      .data-1 {\n                        word-wrap: break-word;\n                        background-color: rgba(127, 209, 185, 0.8);\n                      }\n                      .data-0 {\n                        word-wrap: break-word;\n                        background-color: rgba(247, 175, 157, 0.8);\n                      }\n                      td {\n                        word-break: break-all;\n                        border: 1px solid #7a918d;\n                      }\n                      th {\n                        border: 1px solid #7a918d;\n                        min-width: 5em;\n                        padding: 0.2em;\n                      }\n                      .tr-heading {\n                        border: none;\n                        border-radius: 3px;\n                        text-color: white;\n                        min-width: 5em;\n                        padding: 0.3em;\n                        align-items: center;\n                        background-color: #5d737e;\n                      }\n                      .bar-heading {\n                        margin-left: auto;\n                        margin-right: 0;\n                        overflow: overlay;\n                      }\n                      .rect1 {\n                        fill: #f7af9d;\n                      }\n                      .rect2 {\n                        fill: #7fd1b9;\n                      }\n                      tr {\n                        margin: 4px;\n                      }\n\n                      tr.top-row {\n                        display: flex;\n                      }\n                    `}\n                  </style>\n                </div>\n              </div>\n            );\n          }}\n        </Query>\n      );\n    }\n  }\n}\n\nexport const fetchTweetsQuery = gql`\n  query fetchTweets($query: String!) {\n    fetchTweets(query: $query) {\n      id\n      timestamp\n      tweetId\n      text\n      polarity\n    }\n\n    getDailyTweet(query: $query) {\n      day\n      negative\n      positive\n      total\n    }\n  }\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAFA;AAGA;AACA;;;AAAA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AALA;AApCA;AAAA;AAAA;AA2GA;AAGA;AACA;;;;AA9JA;AACA;AADA;AAiKA;;;;A","sourceRoot":""}