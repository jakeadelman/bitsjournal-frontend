{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.2eb4f8be01e21dfa5b35.hot-update.js","sources":["webpack:///./components/Dashboard/Dashboard.js"],"sourcesContent":["import styled from \"styled-components\";\nimport {\n  ContainDiv,\n  NextToDiv,\n  NextToDivHeader,\n  RowContainer,\n  ContainDivHeader,\n} from \"./ReChart\";\nimport ReChart from \"./ReChart\";\nimport Sidebar, { SymbolChooser } from \"../Menu/Menu\";\nimport { getNewDat } from \"./helpers\";\n\nimport { inject, observer } from \"mobx-react\";\nimport { when } from \"mobx\";\nimport { wideFont } from \"../shared/helpers\";\n\n@inject(\"store\")\n@observer\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      globalHash: [],\n      globalHashActive: [\"all\"],\n      data: null,\n      filteredData: null,\n    };\n    this.getGlobalHashtags = this.getGlobalHashtags.bind(this);\n    this.hashtagClicked = this.hashtagClicked.bind(this);\n    this.hashtagClickedBack = this.hashtagClickedBack.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({ data: this.props.data });\n    this.getGlobalHashtags(this.props.data);\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n  updateWindowDimensions() {\n    this.setState({\n      width: window.innerWidth,\n    });\n  }\n\n  async getGlobalHashtags(data) {\n    for (let i = 0; i < data.fetchTradeHistory.length; i++) {\n      let thisTradeHash = data.fetchTradeHistory[i].hashtags.split(\",\");\n      if (thisTradeHash != \"undefined\") {\n        for (let j = 0; j < thisTradeHash.length; j++) {\n          if (thisTradeHash[j] != \"undefined\") {\n            let newGlobalHash = this.state.globalHash;\n            newGlobalHash.push(thisTradeHash[j]);\n            this.setState({ globalHash: newGlobalHash });\n          }\n        }\n      }\n    }\n  }\n\n  async hashtagClickedBack(value) {\n    if (value == \"all\") {\n      console.log(\"DO NOTHING\");\n    } else {\n      let newHashActive = [];\n      let newHash = this.state.globalHash;\n      for (let i = 0; i < this.state.globalHashActive.length; i++) {\n        if (value !== this.state.globalHashActive[i]) {\n          newHashActive.push(this.state.globalHashActive[i]);\n        } else {\n          newHash.push(this.state.globalHashActive[i]);\n        }\n        if (i == this.state.globalHashActive.length - 1) {\n          if (newHashActive[0] == undefined) {\n            let newHash2 = [];\n            for (let j = 0; j < newHash.length; j++) {\n              if (newHash[j] != \"all\") {\n                newHash2.push(newHash[j]);\n              }\n              if (j == newHash.length - 1) {\n                this.setState({\n                  globalHash: newHash2,\n                  globalHashActive: [\"all\"],\n                  filteredData: null,\n                });\n              }\n            }\n          } else {\n            let newHash2 = [];\n            for (let j = 0; j < newHash.length; j++) {\n              if (newHash[j] != \"all\") {\n                newHash2.push(newHash[j]);\n              }\n              if (j == newHash.length - 1) {\n                getNewDat(this.state.data, newHashActive).then((res) => {\n                  this.setState({\n                    globalHash: newHash2,\n                    globalHashActive: newHashActive,\n                    filteredData: res,\n                  });\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  async hashtagClicked(value) {\n    if (value == \"all\") {\n      let newGlobalHash = this.state.globalHash;\n      let newGlobalHash2 = [];\n      for (let i = 0; i < this.state.globalHashActive.length; i++) {\n        newGlobalHash.push(this.state.globalHashActive[i]);\n        if (i == this.state.globalHashActive.length - 1) {\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (newGlobalHash[j] != \"all\") {\n              newGlobalHash2.push(newGlobalHash[j]);\n            }\n            if (j == newGlobalHash.length - 1) {\n              this.setState({\n                globalHash: newGlobalHash2,\n                globalHashActive: [\"all\"],\n                filteredData: null,\n              });\n              return;\n            }\n          }\n        }\n      }\n    }\n    if (this.state.globalHashActive[0] == undefined) {\n      let newArray = [];\n      newArray.push(value);\n      this.setState({ globalHashActive: newArray });\n      const index = this.state.globalHash.indexOf(value);\n      if (index > -1) {\n        let newGlobalHash = this.state.globalHash;\n        newGlobalHash.splice(index, 1);\n        this.setState({ globalHash: newGlobalHash });\n      }\n      return;\n    }\n    for (let i = 0; i < this.state.globalHashActive.length; i++) {\n      if (this.state.globalHashActive[i] == \"all\") {\n        this.state.globalHashActive = [];\n        const index = this.state.globalHash.indexOf(value);\n        if (index > -1) {\n          let newGlobalHash = this.state.globalHash;\n          newGlobalHash.splice(index, 1);\n          let torf = false;\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (\"all\" == newGlobalHash[j]) {\n              torf = true;\n            }\n            if (j == newGlobalHash.length - 1 && torf == false) {\n              newGlobalHash.push(\"all\");\n            }\n          }\n          let newGlobalHashActive = this.state.globalHashActive;\n          newGlobalHashActive.push(value);\n          getNewDat(this.state.data, newGlobalHashActive).then((newDat) => {\n            this.setState({\n              globalHashActive: newGlobalHashActive,\n              globalHash: newGlobalHash,\n              filteredData: newDat,\n            });\n            return;\n          });\n        }\n      }\n      if (value == this.state.globalHashActive[i]) {\n        return;\n      }\n      if (i == this.state.globalHashActive.length - 1) {\n        const index = this.state.globalHash.indexOf(value);\n        if (index > -1) {\n          let newGlobalHash = this.state.globalHash;\n          newGlobalHash.splice(index, 1);\n          // newGlobalHash.push(\"all\");\n          let torf = false;\n          for (let j = 0; j < newGlobalHash.length; j++) {\n            if (\"all\" == newGlobalHash[j]) {\n              torf = true;\n            }\n            if (j == newGlobalHash.length - 1 && torf == false) {\n              newGlobalHash.push(\"all\");\n            }\n          }\n          let newGlobalHashActive = this.state.globalHashActive;\n          newGlobalHashActive.push(value);\n          getNewDat(this.state.data, newGlobalHashActive).then((newDat) => {\n            this.setState({\n              globalHashActive: newGlobalHashActive,\n              globalHash: newGlobalHash,\n              filteredData: newDat,\n            });\n            return;\n          });\n        }\n      }\n    }\n  }\n  render() {\n    if (this.state.data != null) {\n      return (\n        <Wrapper>\n          <ChartWrapper>\n            <TopHashtagDiv>\n              {this.state.globalHashActive.map((hash) => {\n                return (\n                  <TopHashtagIndividualActive\n                    onClick={() => this.hashtagClickedBack(hash)}\n                  >\n                    #{hash}\n                  </TopHashtagIndividualActive>\n                );\n              })}\n              {this.state.globalHash.map((hash) => {\n                return (\n                  <TopHashtagIndividual\n                    onClick={() => this.hashtagClicked(hash)}\n                  >\n                    #{hash}\n                  </TopHashtagIndividual>\n                );\n              })}\n              <TopHashtagIndividualActive>\n                <SymbolChooser />\n              </TopHashtagIndividualActive>\n            </TopHashtagDiv>\n            <WholeGrid>\n              {this.state.width > 1380 ? (\n                <ContainDivHeader>\n                  <NextToDivHeader>Start</NextToDivHeader>\n                  <NextToDivHeader>End</NextToDivHeader>\n                  <NextToDivHeader>L/S</NextToDivHeader>\n                  <NextToDivHeader>Avg Entry</NextToDivHeader>\n                  <NextToDivHeader>Avg Exit</NextToDivHeader>\n                  <NextToDivHeader>Qty</NextToDivHeader>\n                  <NextToDivHeader>Realized Pnl</NextToDivHeader>\n                </ContainDivHeader>\n              ) : (\n                <ContainDivHeader>\n                  <NextToDivHeader>Start</NextToDivHeader>\n                  <NextToDivHeader>End</NextToDivHeader>\n                  <NextToDivHeader>L/S</NextToDivHeader>\n                  <NextToDivHeader>Entry</NextToDivHeader>\n                  <NextToDivHeader>Exit</NextToDivHeader>\n                  <NextToDivHeader>Qty</NextToDivHeader>\n                  <NextToDivHeader>RPNL</NextToDivHeader>\n                </ContainDivHeader>\n              )}\n              <ReChart\n                data={this.state.data}\n                filteredData={this.state.filteredData}\n                initData={this.props.data}\n              />\n            </WholeGrid>\n          </ChartWrapper>\n        </Wrapper>\n      );\n    }\n  }\n}\n\nconst WholeGrid = styled.div`\n  border: 1px solid #f2f2f2;\n`;\n\nconst TopHashtagDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 14px;\n`;\nconst TopHashtagIndividual = styled.div`\n  background: #f8f8ff;\n  color: #000;\n  padding: 8px;\n  margin: 0 10px;\n  border-radius: 2px;\n  ${wideFont}\n\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst TopHashtagIndividualActive = styled.div`\n  background: #212528;\n  color: #fff;\n  padding: 8px;\n  margin: 0 10px;\n  border-radius: 2px;\n  ${wideFont}\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst ChartWrapper = styled.div`\n  background: white;\n  padding: 5px;\n  width: 100%;\n  padding: 10px;\n  @media (max-width: 768px) {\n    margin: 0 5vw;\n  }\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  margin-top: 5px;\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAXA;AAYA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;AADA;AAGA;;;;;;AAEA;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAfA;AAgBA;AACA;AACA;AA1CA;AA2CA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;AACA;;;;;AACA;AACA;AACA;AACA;;AADA;;;;;AACA;AACA;AAAA;;;;;AACA;AACA;;AADA;;;;;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AACA;AACA;AACA;AAHA;;;;AALA;;;;;AAHA;;;;;AAmBA;;;;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;AAEA;AACA;;AADA;;;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AArBA;AAsBA;AACA;AACA;AAAA;;;;;;;;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAtBA;AAuBA;AACA;AACA;;AA1DA;;;;;;;;;;;;;;;;;;;;AA4DA;AAAA;AACA;AAAA;AACA;AAKA;AAEA;AAAA;AAAA;AADA;AAMA;AAEA;AAEA;AAAA;AAAA;AADA;AAMA;AA4BA;AACA;AACA;AAHA;AASA;AACA;;;;AA1PA;AACA;;AA4PA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}