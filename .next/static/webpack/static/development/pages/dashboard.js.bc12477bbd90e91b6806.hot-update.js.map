{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.bc12477bbd90e91b6806.hot-update.js","sources":["webpack:///./components/Dashboard/Notes.js"],"sourcesContent":["import { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport { getNotes, getHashtags } from \"./notesHelpers\";\nimport gql from \"graphql-tag\";\nimport {\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes, faEquals } from \"@fortawesome/free-solid-svg-icons\";\nimport { inject, observer } from \"mobx-react\";\nimport { when } from \"mobx\";\nimport equal from \"fast-deep-equal\";\nimport TextareaAutosize from \"react-autosize-textarea\";\nimport { wideFont, smallFont } from \"../shared/helpers\";\n\n@inject([\"store\"])\n@observer\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      hashtags: [],\n      initHashtags: [],\n      showNotes: false,\n    };\n\n    this.setShowNotes = this.setShowNotes.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.store.tempNotes[0] != undefined) {\n      let isTemp = false;\n      for (let i = 0; i < this.props.store.tempNotes.length; i++) {\n        if (\n          this.props.store.tempNotes[i].time == this.props.firstTrade.timestamp\n        ) {\n          this.setState({ value: this.props.store.tempNotes[i].note });\n          isTemp = true;\n        }\n        if (i == this.props.store.tempNotes.length - 1 && isTemp == false) {\n          this.setState({\n            value: this.props.firstTrade.notes,\n          });\n        }\n      }\n    } else {\n      if (this.props.firstTrade.notes != \"undefined\") {\n        this.setState({\n          value: this.props.firstTrade.notes,\n        });\n      }\n    }\n    let splitTags = this.props.firstTrade.hashtags.split(\",\");\n    splitTags.map((tag) => {\n      this.state.initHashtags.push(tag);\n    });\n  }\n\n  handleChange(client) {\n    return (event) => {\n      // event.preventDefault();\n      this.setState({ value: event.target.value }, this.handleSubmit(client));\n      this.props.store.addTempNote(\n        this.props.firstTrade.timestamp,\n        event.target.value\n      );\n    };\n  }\n\n  removeHashtag(client, hashtag) {\n    return async (event) => {\n      if (event != undefined && event.preventDefault != undefined) {\n        event.preventDefault();\n      }\n      let time = this.props.firstTrade.timestamp;\n      client\n        .mutate({\n          mutation: gql`\n            mutation removeHashtag($time: String!, $hashtag: String!) {\n              removeHashtag(time: $time, hashtag: $hashtag)\n            }\n          `,\n          variables: { time, hashtag },\n          refetchQueries: [`fetchTradeHistory`],\n        })\n        .then(() => {\n          this.props.store.changeHasTempTags();\n        });\n    };\n  }\n\n  handleSubmit(client) {\n    return (event) => {\n      if (event != undefined && event.preventDefault != undefined) {\n        event.preventDefault();\n      }\n      console.log(\"HASHTAGS\", this.state.hashtags);\n      getNotes(this.state.value).then(async (res) => {\n        let notes = res[0];\n        // let hashtags = res[1];\n        let time = this.props.firstTrade.timestamp;\n        let reso = client.mutate({\n          mutation: gql`\n            mutation addNotes($time: String!, $notes: String!) {\n              addNotes(time: $time, notes: $notes)\n            }\n          `,\n          variables: { time, notes },\n        });\n\n        return await reso;\n      });\n    };\n  }\n\n  setShowNotes() {\n    if (this.state.showNotes == false) {\n      this.setState({ showNotes: true });\n    } else {\n      this.setState({ showNotes: false });\n    }\n  }\n  render() {\n    return (\n      <ApolloConsumer>\n        {(client) => (\n          <div>\n            {/* <FullRow> */}\n            <FullRow onSubmit={this.handleSubmit(client)}>\n              <HashtagDiv>\n                <AddHashtag\n                  firstTrade={this.props.firstTrade}\n                  client={client}\n                />\n              </HashtagDiv>\n              {this.state.initHashtags.map((tag) => {\n                if (tag != \"undefined\") {\n                  return (\n                    <SingleHashtagDiv>\n                      <SingleHashtagText>#{tag}</SingleHashtagText>\n                      <SingleHashtagDelete\n                        onClick={this.removeHashtag(client, tag)}\n                      >\n                        <FontAwesomeIcon\n                          icon={faTimes}\n                          size=\"xs\"\n                          style={{\n                            transition: \"none\",\n                          }}\n                        />\n                      </SingleHashtagDelete>\n                    </SingleHashtagDiv>\n                  );\n                }\n              })}\n              {this.state.showNotes == true ? (\n                <ShowNotesDiv onClick={() => this.setShowNotes()}>\n                  <ShowNotesInner>Hide Notes</ShowNotesInner>\n                </ShowNotesDiv>\n              ) : (\n                <ShowNotesDiv onClick={() => this.setShowNotes()}>\n                  <ShowNotesInner>Show Notes</ShowNotesInner>\n                </ShowNotesDiv>\n              )}\n            </FullRow>\n            {this.state.showNotes == true ? (\n              <TextareaAutosize\n                style={{\n                  width: \"100%\",\n                  padding: \"12px 20px\",\n                  margin: \"8px 0\",\n                  boxSizing: \"border-box\",\n                  background: \"#f8f8ff\",\n                  border: \"none\",\n                  outline: \"none\",\n                  fontSize: \"16px\",\n                }}\n                rows={5}\n                maxRows={25}\n                value={this.state.value}\n                onChange={this.handleChange(client)}\n              />\n            ) : null}\n          </div>\n        )}\n      </ApolloConsumer>\n    );\n  }\n}\n// const NotesInput = styled.textarea`\n//   width: 100%;\n//   padding: 12px 20px;\n//   margin: 8px 0;\n//   box-sizing: border-box;\n//   background: #f8f8ff;\n//   border: none;\n// `;\n\n@inject([\"store\"])\n@observer\nclass AddHashtag extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { clicked: false };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.clicked = this.clicked.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({ client: this.props.client });\n  }\n\n  handleChange(event) {\n    // event.preventDefault();\n    console.log(event.target.value);\n    this.setState({ value: event.target.value });\n  }\n\n  async handleSubmit(event) {\n    // return event => {\n    event.preventDefault();\n    console.log(this.state.value);\n    getHashtags(this.state.value)\n      .then(async (res) => {\n        console.log(\"CLICKED\");\n        let client = this.state.client;\n        // if(typeof)\n        let hashtag = res;\n        console.log(hashtag, \"HASHTAG\");\n        let time = this.props.firstTrade.timestamp;\n        let reso = client.mutate({\n          mutation: gql`\n            mutation addHashtag($time: String!, $hashtag: String!) {\n              addHashtag(time: $time, hashtag: $hashtag)\n            }\n          `,\n          variables: { time, hashtag },\n          refetchQueries: [`fetchTradeHistory`],\n        });\n\n        return await reso;\n      })\n      .then((reso) => {\n        this.setState({ value: \"\" });\n        this.props.store.changeHasTempTags();\n      });\n    // };\n  }\n\n  clicked() {\n    this.state.clicked\n      ? this.setState({ clicked: false })\n      : this.setState({ clicked: true });\n  }\n\n  render() {\n    return (\n      <div>\n        <Popup onClick={this.clicked}>\n          <FontAwesomeIcon icon={faPlus} style={{ transition: \"none\" }} />\n        </Popup>\n        {this.state.clicked ? (\n          <PopupTop>\n            <form onSubmit={this.handleSubmit}>\n              <input\n                type=\"text\"\n                value={this.state.value}\n                onChange={this.handleChange}\n              />\n              <AddHashSubmit type=\"submit\" value=\"Add Hashtag\" />\n            </form>\n          </PopupTop>\n        ) : null}\n      </div>\n    );\n  }\n}\nconst AddHashSubmit = styled.input`\n  background: none;\n  border: none;\n  color: white;\n  font-weight: 500;\n  padding: 2px;\n`;\nconst Popup = styled.div`\n  position: relative;\n  display: inline-block;\n  cursor: pointer;\n  background: #000;\n  padding: 8px;\n  border-radius: 2px;\n`;\n\nconst PopupTop = styled.div`\n  position: absolute;\n  background: #000;\n  z-index: 1;\n  margin: 5px;\n  padding: 2px;\n  border-radius: 2px;\n`;\n// background: #6c757d;\n// background: #b9bdc1;\nconst SingleHashtagDiv = styled.div`\n  background: #f8f8ff;\n  margin: 20px 8px;\n  color: black;\n  padding: 10px;\n\n  white-space: nowrap;\n  display: flex;\n  flex-direction: row;\n  margin-left: 0px;\n`;\n\nconst ShowNotesDiv = styled.div`\n  background: #fff;\n  margin: 20px 8px;\n\n  color: #000;\n  padding: 10px;\n  padding-top: 8px;\n  white-space: nowrap;\n  display: flex;\n  flex-direction: row;\n  margin-left: 0px;\n  border-radius: 2px;\n\n  :hover {\n    transition: none;\n    cursor: pointer;\n  }\n`;\n\nconst ShowNotesInner = styled.div`\n  ${wideFont}\n  font-size:13px;\n  transition: none;\n  margin: auto;\n`;\n\nconst SingleHashtagText = styled.div`\n  margin: auto;\n  ${wideFont}\n`;\nconst SingleHashtagDelete = styled.div`\n  margin-left: 6px;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst HashtagDiv = styled.div`\n  margin: auto 0;\n  text-align: center;\n  vertical-align: middle;\n  color: white;\n  padding: 10px;\n  padding-top: 8px;\n`;\n\nconst FullRow = styled.form`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst NotesSubmit = styled.input`\n  margin: 9px;\n  padding: 15px;\n  background: #212528;\n  border: none;\n  color: white;\n`;\n\nconst NotesInput = styled.textarea`\n  width: 100%;\n  padding: 12px 20px;\n  margin: 8px 0;\n  box-sizing: border-box;\n  background: #f8f8ff;\n  border: none;\n`;\n"],"mappings":"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","sourceRoot":""}