{"version":3,"file":"static/webpack/static/development/pages/register.js.e9b53f4f0e4634e1d8a3.hot-update.js","sources":["webpack:///./components/RegisterForm.js"],"sourcesContent":["import { ApolloConsumer } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { allPostsQuery, allPostsQueryVars } from \"./PostList\";\nimport Input from \"./Form2/Input\";\nimport Label from \"./form/Label\";\nimport Button from \"./shared/Button\";\nimport FormWrapper from \"./Form2/FormWrapper\";\nimport styled from \"styled-components\";\n\nexport default function RegisterForm() {\n  function handleSubmit(event, client) {\n    event.preventDefault();\n    const form = event.target;\n    const formData = new window.FormData(form);\n    const firstName = formData.get(\"firstName\");\n    const lastName = formData.get(\"lastName\");\n    const email = formData.get(\"email\");\n    const password = formData.get(\"password\");\n    form.reset();\n\n    client.mutate({\n      mutation: gql`\n        mutation register(\n          $firstName: String!\n          $lastName: String!\n          $email: String!\n          $password: String!\n        ) {\n          register(\n            data: {\n              firstName: $firstName\n              lastName: $lastName\n              email: $email\n              password: $password\n            }\n          ) {\n            id\n          }\n        }\n      `,\n      variables: { firstName, lastName, email, password }\n      // update: (proxy, { data: { createPost } }) => {\n      //   const data = proxy.readQuery({\n      //     query: allPostsQuery,\n      //     variables: allPostsQueryVars\n      //   });\n      //   proxy.writeQuery({\n      //     query: allPostsQuery,\n      //     data: {\n      //       ...data,\n      //       allPosts: [createPost, ...data.allPosts]\n      //     },\n      //     variables: allPostsQueryVars\n      //   });\n      // }\n    });\n  }\n\n  return (\n    <ApolloConsumer>\n      {client => (\n        <FormWrapper>\n          <StyledForm onSubmit={event => handleSubmit(event, client)}>\n            <InputWrapper>\n              <Label>firstname</Label>\n              <Input placeholder=\"John\" name=\"firstName\" type=\"text\" required />\n            </InputWrapper>\n            <InputWrapper>\n              <Label>lastname</Label>\n              <Input placeholder=\"Doe\" name=\"lastName\" type=\"text\" required />\n            </InputWrapper>\n            <InputWrapper>\n              <Label>email</Label>\n              <Input\n                placeholder=\"johndoe@example.com\"\n                name=\"email\"\n                type=\"text\"\n                required\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <Label>password</Label>\n              <Input\n                placeholder=\"my!pas56\"\n                name=\"password\"\n                type=\"text\"\n                required\n              />\n            </InputWrapper>\n            <SubmitButton type=\"submit\">Submit</SubmitButton>\n          </StyledForm>\n        </FormWrapper>\n      )}\n    </ApolloConsumer>\n  );\n}\n\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  ${props =>\n    props.loading &&\n    \"filter: grayscale(0.5) blur(5px) opacity(0.6); pointer-events: none\"};\n`;\n\nconst SubmitButton = styled(Button)`\n  align-self: flex-end;\n  margin-right: 0px;\n  margin-left: auto;\n`;\n\nconst InputWrapper = styled.div`\n  position: relative;\n  margin-bottom: 24px;\n  width: 100%;\n`;\n\n// import React, { useContext, useState } from \"react\";\n// import { ApolloConsumer } from \"react-apollo\";\n// import gql from \"graphql-tag\";\n// import Router from \"next/router\";\n// import { Alert } from \"reactstrap\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import { observer } from \"mobx-react-lite\";\n// import { UserStoreContext } from \"../stores/UserStore.ts\";\n// import styled from \"styled-components\";\n// import FormWrapper from \"./Form2/FormWrapper\";\n\n// const LoginForm = observer(() => {\n//   const userStore = useContext(UserStoreContext);\n\n//   async function handleSubmit(event, client) {\n//     event.preventDefault();\n//     const form = event.target;\n//     const formData = new window.FormData(form);\n//     const email = formData.get(\"email\");\n//     const password = formData.get(\"password\");\n//     console.log(email, password);\n//     form.reset();\n\n//     let res = client.mutate({\n//       mutation: gql`\n//         mutation login($email: String!, $password: String!) {\n//           login(email: $email, password: $password)\n//         }\n//       `,\n//       variables: { email, password }\n//     });\n\n//     //check if login credentials are correct\n//     let r = await res;\n//     r = r.data.login;\n//     console.log(r);\n//     let isTrue = r == \"true\";\n//     if (isTrue == true) {\n//       userStore.isAuth = true;\n//       Router.push(\"/dashboard\");\n//     } else {\n//       setWrongCredentials(true);\n//       return;\n//     }\n//   }\n\n//   const [wrongCredentials, setWrongCredentials] = useState(false);\n\n//   return (\n//     <ApolloConsumer>\n//       {client => (\n//         <FormWrapper>\n//           <StyledForm onSubmit={event => handleSubmit(event, client)}>\n//             <InputWrapper>\n//               <Label>email</Label>\n//               <Input placeholder=\"email\" name=\"email\" type=\"text\" required />\n//             </InputWrapper>\n//             <InputWrapper>\n//               <Label>password</Label>\n//               <Input\n//                 placeholder=\"password\"\n//                 name=\"password\"\n//                 type=\"text\"\n//                 required\n//               />\n//             </InputWrapper>\n//             <div style={{ display: \"flex\", width: \"100%\" }}>\n//               <SubmitButton type=\"submit\">Submit</SubmitButton>\n//             </div>\n//             {wrongCredentials == true ? (\n//               <div className=\"login-alert\">\n//                 <Alert\n//                   color=\"secondary\"\n//                   isOpen={wrongCredentials == true ? true : false}\n//                 >\n//                   Wrong login credentials\n//                 </Alert>\n//               </div>\n//             ) : null}\n//           </StyledForm>\n//         </FormWrapper>\n//       )}\n//     </ApolloConsumer>\n//   );\n// });\n\n// export default LoginForm;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AApBA;AAomCA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAKA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;A","sourceRoot":""}