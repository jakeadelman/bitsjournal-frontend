{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.02bc90651dc02ebfe818.hot-update.js","sources":["webpack:///./components/Charts2/ChartDemo.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { format } from \"d3-format\";\nimport { timeFormat } from \"d3-time-format\";\n\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\nimport { CandlestickSeries, LineSeries } from \"react-stockcharts/lib/series\";\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\nimport {\n  CrossHairCursor,\n  EdgeIndicator,\n  CurrentCoordinate,\n  MouseCoordinateX,\n  MouseCoordinateY,\n} from \"react-stockcharts/lib/coordinates\";\nimport {\n  timeCompare,\n  getYRangeNums,\n  findYValBuy,\n  findYValSell,\n} from \"./helpers\";\n\nimport {\n  LabelAnnotation,\n  Label,\n  Annotate,\n} from \"react-stockcharts/lib/annotation\";\nimport { discontinuousTimeScaleProvider } from \"react-stockcharts/lib/scale\";\nimport {\n  OHLCTooltip,\n  MovingAverageTooltip,\n} from \"react-stockcharts/lib/tooltip\";\nimport { ema } from \"react-stockcharts/lib/indicator\";\nimport { fitWidth } from \"react-stockcharts/lib/helper\";\nimport { last } from \"react-stockcharts/lib/utils\";\n\nclass CandleStickChartWithAnnotation extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    // console.log(this.props.data);\n    // console.log(this.props.initialData);\n    let yRangeNums = getYRangeNums(this.props.data);\n    this.setState({ yRangeNums: yRangeNums });\n  }\n  render() {\n    const margin = { left: 20, right: 50, top: 30, bottom: 30 };\n    const height = 400;\n    const { type, width, ratio, data: initialData } = this.props;\n\n    const [yAxisLabelX, yAxisLabelY] = [\n      width - margin.left - 40,\n      (height - margin.top - margin.bottom) / 2,\n    ];\n\n    const xScaleProvider = discontinuousTimeScaleProvider.inputDateAccessor(\n      (d) => d.date\n    );\n    const { data, xScale, xAccessor, displayXAccessor } = xScaleProvider(\n      initialData\n    );\n\n    const start = xAccessor(last(data));\n    const end = xAccessor(data[Math.max(0, data.length - 150)]);\n    const xExtents = [start, end];\n\n    if (this.state == null) {\n      return <div>Loading...</div>;\n    }\n    // try {\n    return (\n      <ChartCanvas\n        height={height}\n        ratio={ratio}\n        width={width}\n        margin={margin}\n        type={type}\n        data={data}\n        xScale={xScale}\n        seriesName=\"BTC\"\n        xAccessor={xAccessor}\n        displayXAccessor={displayXAccessor}\n        xExtents={xExtents}\n      >\n        <Chart\n          id={1}\n          yExtents={[(d) => [d.high, d.low]]}\n          padding={{ top: 80, bottom: 80 }}\n        >\n          <XAxis axisAt=\"bottom\" orient=\"bottom\" />\n          <MouseCoordinateX\n            at=\"bottom\"\n            orient=\"bottom\"\n            displayFormat={timeFormat(\"%Y-%m-%d\")}\n          />\n          <MouseCoordinateY\n            at=\"right\"\n            orient=\"right\"\n            displayFormat={format(\".2f\")}\n          />\n          <YAxis axisAt=\"right\" orient=\"right\" ticks={5} />\n          <CandlestickSeries />\n          <OHLCTooltip origin={[-10, 0]} />\n          {this.props.trades.map((each) => {\n            // console.log(\n            //   \"mapping total length\" + this.props.trades.length.toString(),\n            //   each\n            // );\n            let datu = new Date(each.timestamp);\n            // console.log(datu, this.props.timeframe);\n            if (each.side == \"Buy\") {\n              const annotationPropsUp = {\n                fontFamily: \"Glyphicons Halflings\",\n                fontSize: 20,\n                fill: \"#018001\",\n                opacity: 0.8,\n                text: \"˄\",\n                y: ({ yScale }) => {\n                  return yScale.range()[0];\n                  // return (\n                  // yScale.range()[0] *\n                  // findYValBuy(\n                  //   this.state.yRangeNums[0],\n                  //   this.state.yRangeNums[1],\n                  //   each.price\n                  // )\n                  // );\n                },\n                onClick: console.log.bind(console),\n                tooltip: (d) => timeFormat(\"%B\")(d.date),\n                // onMouseOver: console.log.bind(console),\n              };\n\n              return (\n                <Annotate\n                  with={LabelAnnotation}\n                  when={(d) => timeCompare(d, datu, this.props.timeframe)}\n                  usingProps={annotationPropsUp}\n                />\n              );\n            } else if (each.side == \"Sell\") {\n              const annotationPropsDown = {\n                fontFamily: \"Glyphicons Halflings\",\n                fontSize: 20,\n                fill: \"#FF0000\",\n                opacity: 0.8,\n                text: \"˅\",\n                y: ({ yScale }) => {\n                  // return yScale.range()[1];\n                  // yScale.range()[0] *\n                  return;\n                  findYValSell(\n                    this.state.yRangeNums[0],\n                    this.state.yRangeNums[1],\n                    each.price\n                  );\n                },\n                onClick: console.log.bind(console),\n                tooltip: (d) => timeFormat(\"%B\")(d.date),\n                // onMouseOver: console.log.bind(console),\n              };\n              return (\n                <Annotate\n                  with={LabelAnnotation}\n                  when={(d) => timeCompare(d, datu, this.props.timeframe)}\n                  usingProps={annotationPropsDown}\n                />\n              );\n            } else {\n              return;\n            }\n          })}\n        </Chart>\n        <CrossHairCursor strokeDasharray=\"LongDashDot\" />\n      </ChartCanvas>\n    );\n    // } catch (err) {\n    //   return <div>no chart</div>;\n    // }\n  }\n}\n\nCandleStickChartWithAnnotation.propTypes = {\n  data: PropTypes.array.isRequired,\n  width: PropTypes.number.isRequired,\n  ratio: PropTypes.number.isRequired,\n  type: PropTypes.oneOf([\"svg\", \"hybrid\"]).isRequired,\n};\n\nCandleStickChartWithAnnotation.defaultProps = {\n  type: \"svg\",\n};\n\nCandleStickChartWithAnnotation = fitWidth(CandleStickChartWithAnnotation);\n\nexport default CandleStickChartWithAnnotation;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAOA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAnBA;AAsBA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AAlBA;AAoBA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AACA;;;;AAhJA;AACA;AAkJA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AADA;AAIA;AAEA;;;;A","sourceRoot":""}