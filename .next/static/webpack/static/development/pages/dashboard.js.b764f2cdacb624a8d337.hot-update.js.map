{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.b764f2cdacb624a8d337.hot-update.js","sources":["webpack:///./components/Dashboard/FetchQuery.js"],"sourcesContent":["import { Query } from \"react-apollo\";\nimport ReChart from \"../Charts/ReChart\";\nimport Sidebar from \"../Categories/Menu\";\nimport gql from \"graphql-tag\";\nimport styled from \"styled-components\";\nimport { inject, observer } from \"mobx-react\";\nimport {\n  ContainDiv,\n  NextToDiv,\n  NextToDivHeader,\n  RowContainer,\n  ContainDivHeader\n} from \"../Charts/ReChart\";\nimport { getStateDate } from \"../Helpers/Functions\";\nimport { equal } from \"fast-deep-equal\";\nimport ApiKeyForm from \"./AddApiForm\";\n// import { pushGlobalHash } from \"../../stores/store\";\n// import { useState, useEffect } from \"react\";\n\n// import { storesContext } from \"../../stores/UserStore\";\n\n@inject([\"store\"])\n@observer\nclass FetchQuery extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { startDate: \"\", endDate: \"\", date: \"\" };\n  }\n\n  componentDidMount() {\n    // console.log(this.props.store);\n    // try {\n    //   let myStorage = window.localStorage;\n    //   let theDate = myStorage.getItem(\"store\");\n    //   let obj = JSON.parse(theDate);\n    //   console.log(obj);\n    //   this.setState({\n    //     startDate: obj.startDate,\n    //     endDate: obj.endDate\n    //   });\n    //   console.log(\"SUCCESS\");\n    //   console.log(obj.startDate);\n    //   console.log(obj.endDate);\n    // } catch (err) {\n    //   let theDates = getStateDate(2);\n    //   this.setState({\n    //     startDate: theDates.startDate,\n    //     endDate: theDates.endDate\n    //   });\n    //   console.log(\"FAILED\");\n    // }\n  }\n\n  clicked = () => {\n    store.isAuth = !store.isAuth;\n    console.log(store.isAuth);\n  };\n\n  render() {\n    let fetchTradeHistoryVariables = {\n      start: this.props.store.startDate,\n      end: this.props.store.endDate\n    };\n    console.log(fetchTradeHistoryQuery);\n    // let fetchTradeHistoryVariables = {\n    //   start: \"2020-02-24T12:43:56.702Z\",\n    //   end: \"2020-02-26T15:01:59.727Z\"\n    // };\n    return (\n      <div>\n        <Comp\n          query={fetchTradeHistoryQuery}\n          vars={fetchTradeHistoryVariables}\n        />\n      </div>\n    );\n  }\n}\n\n@inject([\"store\"])\n@observer\nclass Comp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  getGlobalHashtags(data) {\n    for (let i = 0; i < data.fetchTradeHistory.length; i++) {\n      let thisTradeHash = data.fetchTradeHistory[i].hashtags.split(\",\");\n      if (thisTradeHash != \"undefined\") {\n        for (let j = 0; j < thisTradeHash.length; j++) {\n          if (thisTradeHash[j] != \"undefined\") {\n            // console.log(\"PUSHING\", thisTradeHash[j]);\n            this.props.store.pushGlobalHash(thisTradeHash[j]);\n            // console.log(this.props.store.globalHash);\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.props.query} variables={this.props.vars}>\n        {({ loading, error, data }) => {\n          if (error) return <div>no data loaded</div>;\n          if (loading) return <div>Loading</div>;\n          console.log(data);\n          console.log(\"<<DATA ABOVE>>\");\n          if (data.checkApiKey == false) {\n            console.log(\"is false\");\n            return <ApiKeyForm />;\n          } else {\n            // console.log(\"is true\");\n            this.getGlobalHashtags(data);\n            return (\n              <Wrapper>\n                <ChartWrapper>\n                  <TopHashtagDiv>\n                    <TopHashtagIndividual>#all</TopHashtagIndividual>\n                    {this.props.store.globalHash.map(hash => {\n                      return (\n                        <TopHashtagIndividual onClick={hashtagClicked}>\n                          #{hash}\n                        </TopHashtagIndividual>\n                      );\n                    })}\n                  </TopHashtagDiv>\n                  <ContainDivHeader>\n                    <NextToDivHeader>Start</NextToDivHeader>\n                    <NextToDivHeader>End</NextToDivHeader>\n                    <NextToDivHeader>Direction</NextToDivHeader>\n                    <NextToDivHeader>Avg Entry</NextToDivHeader>\n                    <NextToDivHeader>Avg Exit</NextToDivHeader>\n                    <NextToDivHeader>Qty</NextToDivHeader>\n                    <NextToDivHeader>Realized Pnl</NextToDivHeader>\n                  </ContainDivHeader>\n                  <ReChart data={data} />\n                </ChartWrapper>\n                <Sidebar />\n              </Wrapper>\n            );\n          }\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default FetchQuery;\n\nconst fetchTradeHistoryQuery = gql`\n  query fetchTradeHistory($start: String!, $end: String!) {\n    checkApiKey\n\n    fetchTradeHistory(start: $start, end: $end) {\n      id\n      timestamp\n      side\n      price\n      orderQty\n      leavesQty\n      currentQty\n      avgEntryPrice\n      execGrossPnl\n      realizedPnl\n      commission\n      execType\n      orderType\n      trdStart\n      trdEnd\n      notes\n      hashtags\n    }\n\n    fetchOneMinuteCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchOneHourCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchOneDayCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n\n    fetchFiveMinuteCandleHistory(start: $start, end: $end) {\n      id\n      timestamp\n      symbol\n      timeframe\n      open\n      high\n      low\n      close\n      trades\n      volume\n      vwap\n      lastSize\n      homeNotional\n      foreignNotional\n    }\n  }\n`;\n\nconst TopHashtagDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\nconst TopHashtagIndividual = styled.div`\n  background: #000;\n  margin: 10px;\n`;\n\nconst ChartWrapper = styled.div`\n  background: white;\n  padding: 5px;\n  width: 100%;\n  @media (max-width: 768px) {\n    margin: 0 5vw;\n  }\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: flex-align;\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA8BA;AACA;AACA;AACA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAFA;AAGA;AACA;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAOA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAFA;AAMA;;;;AArDA;AA0DA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AAAA;AAIA;AAWA;AAAA;AAKA;AACA;AAGA;;;;AAlEA;AAqEA;AAEA;AA8FA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}